from typing import Any
from universal_mcp.applications import APIApplication
from universal_mcp.integrations import Integration

class PosthogApp(APIApplication):
    def __init__(self, integration: Integration = None, **kwargs) -> None:
        super().__init__(name='posthogapp', integration=integration, **kwargs)
        self.base_url = "https://us.i.posthog.com"

    def environments_app_metrics_retrieve(self, project_id, id) -> Any:
        """
        Retrieves application metrics for a specific ID within a project's environments.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/app_metrics/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_app_metrics_error_details_retrieve(self, project_id, id) -> Any:
        """
        Retrieves detailed error information for a specific application metric identified by its ID within a project environment.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/app_metrics/{id}/error_details/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_app_metrics_historical_exports_retrieve(self, project_id, plugin_config_id) -> Any:
        """
        Retrieves historical export data for application metrics associated with a specific plugin configuration and project.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        url = f"{self.base_url}/api/environments/{project_id}/app_metrics/{plugin_config_id}/historical_exports/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_app_metrics_historical_exports_retrieve_2(self, project_id, plugin_config_id, id) -> Any:
        """
        Retrieves historical export data for a specific plugin configuration within a project environment.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/app_metrics/{plugin_config_id}/historical_exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of batch exports associated with a specified project, allowing for pagination via limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Creates a new batch export job for a specific project environment using the defined parameters.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_backfills_list(self, project_id, batch_export_id, cursor=None, ordering=None) -> dict[str, Any]:
        """
        Retrieves a list of backfills for a batch export, allowing users to manage and view the status of historical data exports for a specific project and batch export.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            cursor (string): The pagination cursor value.
            ordering (string): Which field to use when ordering the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/backfills/"
        query_params = {k: v for k, v in [('cursor', cursor), ('ordering', ordering)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_backfills_create(self, project_id, batch_export_id, id, progress, status, created_at, last_updated_at, team, batch_export, start_at=None, end_at=None, finished_at=None) -> dict[str, Any]:
        """
        Creates a new backfill for a batch export, allowing users to schedule data exports for historical data intervals within a specified project.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            progress (string): progress
            status (string): The status of this backfill.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            created_at (string): The timestamp at which this BatchExportBackfill was created.
            last_updated_at (string): The timestamp at which this BatchExportBackfill was last updated.
            team (integer): The team this belongs to.
            batch_export (string): The BatchExport this backfill belongs to.
            start_at (string): The start of the data interval.
            end_at (string): The end of the data interval.
            finished_at (string): The timestamp at which this BatchExportBackfill finished, successfully or not.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        request_body = {
            'id': id,
            'progress': progress,
            'start_at': start_at,
            'end_at': end_at,
            'status': status,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'team': team,
            'batch_export': batch_export,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/backfills/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_backfills_retrieve(self, project_id, batch_export_id, id) -> dict[str, Any]:
        """
        Retrieves detailed information about a specific backfill for a batch export within a given project.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/backfills/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_backfills_cancel_create(self, project_id, batch_export_id, id, progress, status, created_at, last_updated_at, team, batch_export, start_at=None, end_at=None, finished_at=None) -> Any:
        """
        Cancels a backfill operation for a specific batch export in a PostHog environment, identified by project, batch export, and backfill IDs via POST request.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            progress (string): progress
            status (string): The status of this backfill.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            created_at (string): The timestamp at which this BatchExportBackfill was created.
            last_updated_at (string): The timestamp at which this BatchExportBackfill was last updated.
            team (integer): The team this belongs to.
            batch_export (string): The BatchExport this backfill belongs to.
            start_at (string): The start of the data interval.
            end_at (string): The end of the data interval.
            finished_at (string): The timestamp at which this BatchExportBackfill finished, successfully or not.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'progress': progress,
            'start_at': start_at,
            'end_at': end_at,
            'status': status,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'team': team,
            'batch_export': batch_export,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/backfills/{id}/cancel/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_runs_list(self, project_id, batch_export_id, cursor=None, ordering=None) -> dict[str, Any]:
        """
        Retrieves a list of batch export runs for a specific batch export in a project, optionally filtered or sorted.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            cursor (string): The pagination cursor value.
            ordering (string): Which field to use when ordering the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/runs/"
        query_params = {k: v for k, v in [('cursor', cursor), ('ordering', ordering)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_runs_retrieve(self, project_id, batch_export_id, id) -> dict[str, Any]:
        """
        Retrieves details about a specific run of a batch export for a given project environment using the provided project ID, batch export ID, and run ID.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/runs/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_runs_cancel_create(self, project_id, batch_export_id, id, status, data_interval_end, created_at, last_updated_at, batch_export, records_completed=None, latest_error=None, data_interval_start=None, cursor=None, finished_at=None, records_total_count=None, backfill=None) -> Any:
        """
        Cancels a specific batch export run identified by its ID and batch export ID within a specified project using the POST method and returns a successful status upon cancellation.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            status (string): The status of this run.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            data_interval_end (string): The end of the data interval.
            created_at (string): The timestamp at which this BatchExportRun was created.
            last_updated_at (string): The timestamp at which this BatchExportRun was last updated.
            batch_export (string): The BatchExport this run belongs to.
            records_completed (integer): The number of records that have been exported.
            latest_error (string): The latest error that occurred during this run.
            data_interval_start (string): The start of the data interval.
            cursor (string): An opaque cursor that may be used to resume.
            finished_at (string): The timestamp at which this BatchExportRun finished, successfully or not.
            records_total_count (integer): The total count of records that should be exported in this BatchExportRun.
            backfill (string): The backfill this run belongs to.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'status': status,
            'records_completed': records_completed,
            'latest_error': latest_error,
            'data_interval_start': data_interval_start,
            'data_interval_end': data_interval_end,
            'cursor': cursor,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'records_total_count': records_total_count,
            'batch_export': batch_export,
            'backfill': backfill,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/runs/{id}/cancel/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_runs_logs_retrieve(self, project_id, batch_export_id, id) -> Any:
        """
        Retrieves logs for a specific batch export run within a project environment.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/runs/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_runs_retry_create(self, project_id, batch_export_id, id, status, data_interval_end, created_at, last_updated_at, batch_export, records_completed=None, latest_error=None, data_interval_start=None, cursor=None, finished_at=None, records_total_count=None, backfill=None) -> Any:
        """
        Retries a failed batch export run for a project's environment and returns a status message.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            status (string): The status of this run.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            data_interval_end (string): The end of the data interval.
            created_at (string): The timestamp at which this BatchExportRun was created.
            last_updated_at (string): The timestamp at which this BatchExportRun was last updated.
            batch_export (string): The BatchExport this run belongs to.
            records_completed (integer): The number of records that have been exported.
            latest_error (string): The latest error that occurred during this run.
            data_interval_start (string): The start of the data interval.
            cursor (string): An opaque cursor that may be used to resume.
            finished_at (string): The timestamp at which this BatchExportRun finished, successfully or not.
            records_total_count (integer): The total count of records that should be exported in this BatchExportRun.
            backfill (string): The backfill this run belongs to.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'status': status,
            'records_completed': records_completed,
            'latest_error': latest_error,
            'data_interval_start': data_interval_start,
            'data_interval_end': data_interval_end,
            'cursor': cursor,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'records_total_count': records_total_count,
            'batch_export': batch_export,
            'backfill': backfill,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{batch_export_id}/runs/{id}/retry/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a batch export by ID for a specified project using the GET method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_update(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Updates a specific batch export for a given project and returns the updated status.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_batch_exports_destroy(self, project_id, id) -> Any:
        """
        Deletes a specified batch export from a project environment using the given identifiers.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_backfill_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Creates a new backfill for a batch export, allowing data from a specified time interval to be exported, using the "POST" method at the "/api/environments/{project_id}/batch_exports/{id}/backfill/" path.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/backfill/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_logs_retrieve(self, project_id, id) -> Any:
        """
        Retrieves logs for a specific batch export operation within a project environment using the provided identifiers.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_pause_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Pauses a specified batch export for a project using the PostHog API and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/pause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_run_test_step_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Runs a test step for a specific batch export in a project environment using the provided project and batch export IDs.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/run_test_step/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_unpause_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Resumes a paused batch export operation for a specific project in PostHog using the provided project ID and batch export ID.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/{id}/unpause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_run_test_step_new_create(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Runs a new test step batch export for a specified project using the provided project ID and returns a successful status.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/run_test_step_new/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_batch_exports_test_retrieve(self, project_id) -> Any:
        """
        Retrieves test details for a batch export configuration in a specified project environment using the "GET" method.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/batch_exports/test/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of dashboards for a specified project, allowing optional pagination using limit and offset query parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_create(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a dashboard for a specific project and returns the created resource upon success.

        Args:
            project_id (string): project_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_collaborators_list(self, project_id, dashboard_id) -> list[Any]:
        """
        Retrieves a list of collaborators associated with a specific dashboard identified by the dashboard_id and project_id.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id

        Returns:
            list[Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{dashboard_id}/collaborators/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_collaborators_create(self, project_id, dashboard_id, id, user, level, added_at, updated_at, user_uuid) -> dict[str, Any]:
        """
        Adds a collaborator to a dashboard within a specified project's environment and returns a success response upon creation.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id
            id (string): id
            user (string): user
            level (string): level
            added_at (string): added_at
            updated_at (string): updated_at
            user_uuid (string): user_uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        request_body = {
            'id': id,
            'dashboard_id': dashboard_id,
            'user': user,
            'level': level,
            'added_at': added_at,
            'updated_at': updated_at,
            'user_uuid': user_uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{dashboard_id}/collaborators/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_collaborators_destroy(self, project_id, dashboard_id, user__uuid) -> Any:
        """
        Removes a specific collaborator from a dashboard within a project's environment using their unique identifier.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id
            user__uuid (string): user__uuid

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        if user__uuid is None:
            raise ValueError("Missing required parameter 'user__uuid'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{dashboard_id}/collaborators/{user__uuid}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_sharing_list(self, project_id, dashboard_id) -> list[Any]:
        """
        Retrieves the sharing configuration for a specific dashboard within a project environment.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id

        Returns:
            list[Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{dashboard_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details for a specific dashboard by its ID within a project, identified by the project ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_dashboards_update(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a dashboard for a specific environment and project using the provided ID.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_dashboards_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific dashboard associated with a project and environment using the provided dashboard ID and project ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_dashboards_create_from_template_json_create(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> Any:
        """
        Creates a dashboard in the specified environment by processing a JSON template through a POST request, returning a success status upon completion.

        Args:
            project_id (string): project_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/dashboards/create_from_template_json/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_error_tracking_assignment_rules_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of error tracking assignment rules for a specific project, allowing for pagination via optional limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/assignment_rules/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_error_tracking_assignment_rules_create(self, project_id, id, filters) -> dict[str, Any]:
        """
        Creates assignment rules for error tracking in a specified project environment.

        Args:
            project_id (string): project_id
            id (string): id
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/assignment_rules/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_error_tracking_assignment_rules_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves an error tracking assignment rule for a specified project and rule ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/assignment_rules/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_error_tracking_assignment_rules_update(self, project_id, id, filters) -> dict[str, Any]:
        """
        Updates an error tracking assignment rule for a specified project environment using the provided ID.

        Args:
            project_id (string): project_id
            id (string): id
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/assignment_rules/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_error_tracking_assignment_rules_destroy(self, project_id, id) -> Any:
        """
        Deletes an error tracking assignment rule for a specified project environment and returns a 204 No Content status upon success.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/assignment_rules/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_error_tracking_symbol_sets_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves paginated symbol sets for error tracking in a specified project environment.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/symbol_sets/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_error_tracking_symbol_sets_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details about a specific error tracking symbol set associated with a project, using the project ID and symbol set ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/symbol_sets/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()



    def environments_error_tracking_symbol_sets_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific symbol set for error tracking in a project using its ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/error_tracking/symbol_sets/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_events_list(self, project_id, after=None, before=None, distinct_id=None, event=None, format=None, limit=None, offset=None, person_id=None, properties=None, select=None, where=None) -> dict[str, Any]:
        """
        Retrieves a list of events for a specified project, allowing filtering by various criteria such as time range, distinct ID, event type, and more, using the GET method.

        Args:
            project_id (string): project_id
            after (string): Only return events with a timestamp after this time.
            before (string): Only return events with a timestamp before this time.
            distinct_id (integer): Filter list by distinct id.
            event (string): Filter list by event. For example `user sign up` or `$pageview`.
            format (string): Specifies the output format for the response data (e.g., JSON, XML).
            limit (integer): The maximum number of results to return
            offset (integer): The initial index from which to return the results.
            person_id (integer): Filter list by person id.
            properties (array): Filter events by event property, person property, cohort, groups and more.
            select (array): (Experimental) JSON-serialized array of HogQL expressions to return
            where (array): (Experimental) JSON-serialized array of HogQL expressions that must pass

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/events/"
        query_params = {k: v for k, v in [('after', after), ('before', before), ('distinct_id', distinct_id), ('event', event), ('format', format), ('limit', limit), ('offset', offset), ('person_id', person_id), ('properties', properties), ('select', select), ('where', where)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_events_retrieve(self, project_id, id, format=None) -> dict[str, Any]:
        """
        Retrieves a specific event by ID for a given project environment using the project ID and event ID.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format for the retrieved event data.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/events/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_events_values_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves event values for a specific project environment with optional formatting.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for retrieving environment event values.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/events/values/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_list(self, project_id) -> list[Any]:
        """
        Retrieves a list of explicit members for a specified project environment using the provided project ID as a path parameter.

        Args:
            project_id (string): project_id

        Returns:
            list[Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_create(self, project_id, id, parent_level, parent_membership_id, joined_at, updated_at, user, user_uuid, effective_level, level=None) -> dict[str, Any]:
        """
        Adds explicit members to an environment in a project using the POST method, where the project ID is specified in the path.

        Args:
            project_id (string): project_id
            id (string): id
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.
            level (string): level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_retrieve(self, project_id, parent_membership__user__uuid) -> dict[str, Any]:
        """
        Retrieves explicit membership details for a user in a specific environment based on project ID and user UUID.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_update(self, project_id, parent_membership__user__uuid, id, parent_level, parent_membership_id, joined_at, updated_at, user, user_uuid, effective_level, level=None) -> dict[str, Any]:
        """
        Updates explicit membership settings for a specific user within a project environment.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid
            id (string): id
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.
            level (string): level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_partial_update(self, project_id, parent_membership__user__uuid, id=None, level=None, parent_level=None, parent_membership_id=None, joined_at=None, updated_at=None, user=None, user_uuid=None, effective_level=None) -> dict[str, Any]:
        """
        Updates the explicit membership information for a specific user in a project using the specified project and user identifiers.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid
            id (string): id
            level (string): level
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_explicit_members_destroy(self, project_id, parent_membership__user__uuid) -> Any:
        """
        Removes an explicit member from an environment using the provided project ID and user UUID, returning a 204 status code upon successful removal.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        url = f"{self.base_url}/api/environments/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_exports_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of exports for a specified project using pagination parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/exports/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_exports_create(self, project_id, id, export_format, created_at, has_content, filename, dashboard=None, insight=None, export_context=None, expires_after=None) -> dict[str, Any]:
        """
        Initiates an export process for a specified project's environments and returns a success status upon creation.

        Args:
            project_id (string): project_id
            id (integer): id
            export_format (string): * `image/png` - image/png
        * `application/pdf` - application/pdf
        * `text/csv` - text/csv
        * `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
            created_at (string): created_at
            has_content (string): has_content
            filename (string): filename
            dashboard (integer): dashboard
            insight (integer): insight
            export_context (string): export_context
            expires_after (string): expires_after

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'export_format': export_format,
            'created_at': created_at,
            'has_content': has_content,
            'export_context': export_context,
            'filename': filename,
            'expires_after': expires_after,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/exports/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_exports_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details of a specific export within a project's environment using the provided project ID and export ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_exports_content_retrieve(self, project_id, id) -> Any:
        """
        Retrieves the content of a specific export for a project environment using the project ID and export ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/exports/{id}/content/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_list(self, project_id, group_type_index, search, cursor=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of environment groups for a project, supporting filtering by type and search queries.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to list
            search (string): Search the group name
            cursor (string): The pagination cursor value.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/"
        query_params = {k: v for k, v in [('cursor', cursor), ('group_type_index', group_type_index), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_activity_retrieve(self, project_id, group_type_index, id) -> Any:
        """
        Retrieves activity data for groups within a specified project using the provided group type index and identifier.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to find
            id (string): Specify the id of the user to find groups for

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/activity/"
        query_params = {k: v for k, v in [('group_type_index', group_type_index), ('id', id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_delete_property_create(self, project_id, group_key, group_type_index, created_at, group_properties=None) -> Any:
        """
        Deletes a property from groups within a specified project's environments using provided group key and type index.

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find
            created_at (string): created_at
            group_properties (string): group_properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type_index': group_type_index,
            'group_key': group_key,
            'group_properties': group_properties,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/groups/delete_property/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_find_retrieve(self, project_id, group_key, group_type_index) -> Any:
        """
        Retrieves groups associated with a specified project based on group key and group type index parameters.

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/find/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_property_definitions_retrieve(self, project_id) -> Any:
        """
        Retrieves a list of property definitions for a specific group in a project using the provided project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/property_definitions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_property_values_retrieve(self, project_id) -> Any:
        """
        Retrieves property values for groups within a specified project environment using the provided project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/property_values/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_related_retrieve(self, project_id, group_type_index, id) -> Any:
        """
        Retrieves related groups for a specified project based on group type index and ID parameters.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to find
            id (string): Specify the id of the user to find groups for

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/groups/related/"
        query_params = {k: v for k, v in [('group_type_index', group_type_index), ('id', id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_groups_update_property_create(self, project_id, group_key, group_type_index, created_at, group_properties=None) -> Any:
        """
        Updates properties for environment groups associated with a specified project based on query parameters.

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find
            created_at (string): created_at
            group_properties (string): group_properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type_index': group_type_index,
            'group_key': group_key,
            'group_properties': group_properties,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/groups/update_property/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_list(self, project_id, created_at=None, created_by=None, enabled=None, exclude_kind=None, id=None, kind=None, limit=None, offset=None, type=None, updated_at=None) -> dict[str, Any]:
        """
        Retrieves a list of Hog functions for a specific project, filtered by parameters such as creation date, creator, status, and more.

        Args:
            project_id (string): project_id
            created_at (string): Filters hog functions by their creation timestamp.
            created_by (integer): Filters hog functions by the user ID of the creator.
            enabled (boolean): Filter results to include only hog functions that are enabled or disabled, based on the boolean value provided.
            exclude_kind (array): Multiple values may be separated by commas.
            id (string): Unique identifier to filter specific hog functions within the project environment.
            kind (array): Multiple values may be separated by commas.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            type (array): Multiple values may be separated by commas.
            updated_at (string): The "updated_at" query parameter filters the results by the last update date of hog functions, allowing users to retrieve functions updated at a specific time.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/"
        query_params = {k: v for k, v in [('created_at', created_at), ('created_by', created_by), ('enabled', enabled), ('exclude_kind', exclude_kind), ('id', id), ('kind', kind), ('limit', limit), ('offset', offset), ('type', type), ('updated_at', updated_at)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates and configures HOG functions for a specified project, returning a success status upon creation.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific hog function by ID from a PostHog project's environment using the GET method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_update(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a specific HOG function in a project using the provided project ID and HOG function ID.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_hog_functions_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific hog function within a designated project environment.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_broadcast_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Broadcasts a specific Hog function within a project's environment using its ID.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/broadcast/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_invocations_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Invokes a HOG function for a specific project and function ID, using a POST request to execute and manage the function's operation within the specified environment.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/invocations/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_logs_retrieve(self, project_id, id) -> Any:
        """
        Retrieves logs for a specific Hog function within a project environment using the provided project ID and Hog function ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_metrics_retrieve(self, project_id, id) -> Any:
        """
        Retrieves metrics for a specific hog function within a project environment using the provided project ID and hog function UUID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/metrics/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_metrics_totals_retrieve(self, project_id, id) -> Any:
        """
        Retrieves total metrics for a specific hog function identified by its ID within a project environment using the PostHog API.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/{id}/metrics/totals/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_icon_retrieve(self, project_id) -> Any:
        """
        Retrieves the icon for Hog functions in a specified project environment.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/icon/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_icons_retrieve(self, project_id) -> Any:
        """
        Retrieves icons associated with hog functions in the specified project's environment.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/icons/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_hog_functions_rearrange_partial_update(self, project_id, id=None, type=None, kind=None, name=None, description=None, created_at=None, created_by=None, updated_at=None, enabled=None, deleted=None, hog=None, bytecode=None, transpiled=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template=None, template_id=None, status=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Rearranges HoG functions for a specified project using the PATCH method and returns a status message.

        Args:
            project_id (string): project_id
            id (string): id
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            bytecode (string): bytecode
            transpiled (string): transpiled
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template (string): template
            template_id (string): template_id
            status (string): status
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/hog_functions/rearrange/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_list(self, project_id, created_by=None, format=None, limit=None, offset=None, refresh=None, short_id=None) -> dict[str, Any]:
        """
        Retrieves environment insights for a specified project, supporting filtering, pagination, and optional data formatting.

        Args:
            project_id (string): project_id
            created_by (integer): Filters insights by the user who created them.
            format (string): Specifies the response format (e.g., JSON, XML) for the insights data.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            refresh (string): Whether to refresh the retrieved insights, how aggresively, and if sync or async:
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        Background calculation can be tracked using the `query_status` response field.
            short_id (string): Filter insights by environment short ID.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/"
        query_params = {k: v for k, v in [('created_by', created_by), ('format', format), ('limit', limit), ('offset', offset), ('refresh', refresh), ('short_id', short_id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Generates insights for a project using the specified project ID and returns a success message.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format for the response data, such as JSON or XML.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_sharing_list(self, project_id, insight_id) -> list[Any]:
        """
        Retrieves insight sharing information for a specific insight within a project environment using the project ID and insight ID.

        Args:
            project_id (string): project_id
            insight_id (string): insight_id

        Returns:
            list[Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if insight_id is None:
            raise ValueError("Missing required parameter 'insight_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/{insight_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_retrieve(self, project_id, id, format=None, from_dashboard=None, refresh=None) -> dict[str, Any]:
        """
        Retrieves environment insights for a specified project and insight ID, with optional format, refresh, and dashboard parameters.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format for the insights data.
            from_dashboard (integer): Only if loading an insight in the context of a dashboard: The relevant dashboard's ID.
        When set, the specified dashboard's filters and date range override will be applied.
            refresh (string): Whether to refresh the insight, how aggresively, and if sync or async:
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        Background calculation can be tracked using the `query_status` response field.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format), ('from_dashboard', from_dashboard), ('refresh', refresh)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_update(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates insights for a specific project and insight ID using the provided format.

        Args:
            project_id (string): project_id
            id (string): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format of the response, specified as a query parameter.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_insights_destroy(self, project_id, id, format=None) -> Any:
        """
        Deletes a specific insight from a project environment, identified by its ID.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): The "format" parameter specifies the output format for the response data to the DELETE operation.

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_activity_retrieve_2(self, project_id, id, format=None) -> Any:
        """
        Retrieves activity data for a specific insight within a project environment, optionally formatting the response.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format (e.g., JSON, XML) for the activity data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/{id}/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_viewed_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Marks an environment insight as viewed for the specified project and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format of the response, specified as a query parameter, determines how the data is returned.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/{id}/viewed/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_activity_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves project environment activity insights in the specified format.

        Args:
            project_id (string): project_id
            format (string): The format parameter specifies the response format for the activity insights data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_cancel_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Cancels environment insights for a specified project using the provided project ID.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): Optional parameter to specify the output format of the response when canceling an insight for the given project.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/cancel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_funnel_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves funnel insights for a specific project's environment, optionally formatted based on query parameters.

        Args:
            project_id (string): project_id
            format (string): The format in which the response data should be returned (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_funnel_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Tracks and analyzes user funnel data for a specific project and returns the formatted results.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): Specifies the response format for the funnel insights data.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_funnel_correlation_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves correlation insights for a funnel in a specified project environment using the GET method, with optional formatting specified via query parameters.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the correlation insights data received from the API.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_funnel_correlation_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Generates insights on correlation in a funnel for a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format of the response, specified as a query parameter to customize output for the correlation insights endpoint.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_my_last_viewed_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of insights for the last viewed environment in a specified project, formatted according to the provided format parameter.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format (e.g., JSON, XML) for the returned insight data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/my_last_viewed/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_timing_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Captures timing insights for a specified project environment using the POST method and returns the result, optionally formatted according to the specified format.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The output format (e.g., JSON, CSV) for the timing insights data.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/timing/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_trend_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves trend insights for a specified project environment with optional response formatting.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format (e.g., json, xml) for the trend insights data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/insights/trend/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_insights_trend_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Tracks and analyzes trends for environment insights within a specified project, returning formatted results.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): Specifies the response format (e.g., JSON, XML) for the insights trend data.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/insights/trend/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_max_tools_create_and_query_insight_create(self, project_id, format=None) -> Any:
        """
        Creates and queries an insight for maximum tools in a specified project environment, returning the result in the requested format.

        Args:
            project_id (string): project_id
            format (string): Specifies the data format for the API response (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/max_tools/create_and_query_insight/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_list(self, project_id, distinct_id=None, email=None, format=None, limit=None, offset=None, properties=None, search=None) -> dict[str, Any]:
        """
        Retrieves a list of persons associated with a specified project environment, allowing optional filtering by distinct ID, email, properties, and search query, with support for pagination and data formatting.

        Args:
            project_id (string): project_id
            distinct_id (string): Filter list by distinct id.
            email (string): Filter persons by email (exact match)
            format (string): Specifies the output format for the response data.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            properties (array): Filter Persons by person properties.
            search (string): Search persons, either by email (full text search) or distinct_id (exact match).

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/"
        query_params = {k: v for k, v in [('distinct_id', distinct_id), ('email', email), ('format', format), ('limit', limit), ('offset', offset), ('properties', properties), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_retrieve(self, project_id, id, format=None) -> dict[str, Any]:
        """
        Retrieves a specific person's details from a project environment using their unique identifier and optional response format.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format of the response for the person data.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_update(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> dict[str, Any]:
        """
        Updates a person's details in the specified environment project and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the data format for the response (e.g., JSON, XML) when updating a person in the specified project and environment.
            properties (string): properties

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_destroy(self, project_id, id, delete_events=None, format=None) -> Any:
        """
        Deletes a person from a specific project environment, optionally removing associated events based on query parameters.

        Args:
            project_id (string): project_id
            id (string): id
            delete_events (boolean): If true, a task to delete all events associated with this person will be created and queued. The task does not run immediately and instead is batched together and at 5AM UTC every Sunday
            format (string): Specifies the response format for the operation.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('delete_events', delete_events), ('format', format)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_activity_retrieve_2(self, project_id, id, format=None) -> Any:
        """
        Retrieves activity information for a specific person within a project environment using the provided project and person IDs.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): The format parameter, specified as a query string, allows you to specify the output format for the activity data retrieved from the API.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_delete_events_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Deletes events associated with a specific person in a project environment and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the output format for the response to the POST operation.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/delete_events/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_delete_property_create(self, project_id, id, _unset, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Deletes a specified property from a person in a project using a POST request to the API endpoint.

        Args:
            project_id (string): project_id
            id (string): id
            _unset (string): Specify the property key to delete
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the response format for the API operation (e.g., JSON, XML).
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/delete_property/"
        query_params = {k: v for k, v in [('$unset', _unset), ('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_properties_timeline_retrieve(self, project_id, id, format=None) -> Any:
        """
        Retrieves the properties timeline for a specified person within a given project.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the response format for the timeline data (e.g., json, xml).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/properties_timeline/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_split_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Splits a person record within a specific project environment and returns the operation result.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format parameter specifies the output format for the response, passed as a query parameter.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/split/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_update_property_create(self, project_id, id, key, value, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Updates a property for a specific person in a project using the provided key and value.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): Specify the property key
            value (string): Specify the property value
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the response format for the API request (e.g., JSON, XML).
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/{id}/update_property/"
        query_params = {k: v for k, v in [('format', format), ('key', key), ('value', value)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_activity_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves activity data for persons in a specific environment based on project ID, with optional response formatting.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the activity data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_persons_cohorts_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves cohort data for persons associated with a specified project in the environments API.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the cohort data (e.g., JSON, CSV, XML).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/cohorts/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_funnel_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of individuals within a specified project's environment funnel, formatted according to the requested parameters.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format (e.g., JSON, XML) for the funnel data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_funnel_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Generates a funnel report for persons in a project using the POST method, accepting a project ID and optional format parameters.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format parameter specifies the response format for the API endpoint.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_funnel_correlation_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves funnel correlation data for persons in a specified project, allowing for the analysis of user behavior patterns, with optional output formats of CSV or JSON.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the correlation funnel analysis data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_funnel_correlation_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Calculates and returns correlation data for user funnel analysis based on specified project ID and output format.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The response format for the correlation analysis results (e.g., "json" or "csv").
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_lifecycle_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves the lifecycle details of persons for a specific project identified by its `project_id`, optionally returning the data in a specified format.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the data returned by the endpoint (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/lifecycle/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_reset_person_distinct_id_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Resets a person's distinct identifier in the specified project environment, clearing or reassociating user tracking data.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format of the response, specified as a query parameter.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/persons/reset_person_distinct_id/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_stickiness_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves stickiness data for persons in a specified project environment.

        Args:
            project_id (string): project_id
            format (string): The format query parameter specifies the output format for the response.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/stickiness/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_trends_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves trends for persons within a specified project environment using the provided project ID and supports optional formatting.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the trend data (e.g., JSON, CSV).

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/trends/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_persons_values_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of person values associated with a project environment, filtered by the specified project ID, and optionally formatted according to the requested format.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format of the retrieved data.

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/persons/values/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_plugin_configs_logs_list(self, project_id, plugin_config_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves logs for a specific plugin configuration within a project environment, supporting pagination via limit and offset parameters.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        url = f"{self.base_url}/api/environments/{project_id}/plugin_configs/{plugin_config_id}/logs/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_query_create(self, project_id, query, async_=None, client_query_id=None, filters_override=None, refresh="blocking", variables_override=None) -> Any:
        """
        Queries and manages environment-related data for a specified project using the POST method on the "/api/environments/{project_id}/query/" endpoint.

        Args:
            project_id (string): project_id
            query (string): Submit a JSON string representing a query for PostHog data analysis, for example a HogQL query.

        Example payload:

        ```

        {"query": {"kind": "HogQLQuery", "query": "select * from events limit 100"}}

        ```

        For more details on HogQL queries, see the [PostHog HogQL documentation](/docs/hogql#api-access).
            async_ (string): async
            client_query_id (string): Client provided query ID. Can be used to retrieve the status or cancel the query.
            filters_override (string): filters_override
            refresh (string): Whether results should be calculated sync or async, and how much to rely on the cache:
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates Background calculation can be tracked using the `query_status` response field.
            variables_override (string): variables_override

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'async_': async_,
            'client_query_id': client_query_id,
            'filters_override': filters_override,
            'query': query,
            'refresh': refresh,
            'variables_override': variables_override,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/query/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_query_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves environment-specific data for a specified project and query identifier.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/query/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_query_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific query environment associated with a project using the given ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: Query cancelled

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/query/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_query_check_auth_for_async_create(self, project_id) -> Any:
        """
        Verifies authorization for asynchronous operations in a specified project environment and returns the result.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/query/check_auth_for_async/"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_query_draft_sql_retrieve(self, project_id) -> Any:
        """
        Retrieves draft SQL query data for a specific project environment.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/query/draft_sql/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_list(self, project_id, created_by=None, limit=None, offset=None, short_id=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of session recording playlists for a specified project using query parameters like creator, offset, and limit.

        Args:
            project_id (string): project_id
            created_by (integer): Filters session recording playlists to those created by the specified user ID.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            short_id (string): Identifier for a shortened ID, used to filter session recording playlists.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/"
        query_params = {k: v for k, v in [('created_by', created_by), ('limit', limit), ('offset', offset), ('short_id', short_id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_create(self, project_id, id, short_id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a session recording playlist for a specified project, allowing for organization and management of session recordings.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_retrieve(self, project_id, short_id) -> dict[str, Any]:
        """
        Retrieves session recording playlists for a specified project and playlist short ID.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_update(self, project_id, short_id, id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a session recording playlist configuration for a specific environment and playlist using the provided parameters.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_session_recording_playlists_destroy(self, project_id, short_id) -> Any:
        """
        Deletes a session recording playlist using the provided project ID and short ID, although a hard delete is not supported and a patch call is recommended instead.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_recordings_retrieve(self, project_id, short_id) -> Any:
        """
        Retrieves session recording playlists for a specific project's session recordings using the provided project ID and playlist short ID.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/recordings/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_recordings_create(self, project_id, short_id, session_recording_id, id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> Any:
        """
        Adds a session recording to a specific playlist for a given project.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            session_recording_id (string): session_recording_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        if session_recording_id is None:
            raise ValueError("Missing required parameter 'session_recording_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recording_playlists_recordings_destroy(self, project_id, short_id, session_recording_id) -> Any:
        """
        Deletes a specific session recording associated with a session recording playlist using its project ID, short ID, and session recording ID.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            session_recording_id (string): session_recording_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        if session_recording_id is None:
            raise ValueError("Missing required parameter 'session_recording_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves paginated session recordings for a specified project using query parameters for limit and offset.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific session recording from a project's environment by its ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_update(self, project_id, id, distinct_id, viewed, viewers, recording_duration, active_seconds, inactive_seconds, start_time, end_time, click_count, keypress_count, mouse_activity_count, console_log_count, console_warn_count, console_error_count, start_url, storage, snapshot_source, ongoing, activity_score, person=None) -> dict[str, Any]:
        """
        Updates a specific session recording's configuration or metadata for a given project in the environment.

        Args:
            project_id (string): project_id
            id (string): id
            distinct_id (string): distinct_id
            viewed (boolean): viewed
            viewers (array): viewers
            recording_duration (integer): recording_duration
            active_seconds (integer): active_seconds
            inactive_seconds (integer): inactive_seconds
            start_time (string): start_time
            end_time (string): end_time
            click_count (integer): click_count
            keypress_count (integer): keypress_count
            mouse_activity_count (integer): mouse_activity_count
            console_log_count (integer): console_log_count
            console_warn_count (integer): console_warn_count
            console_error_count (integer): console_error_count
            start_url (string): start_url
            storage (string): storage
            snapshot_source (string): snapshot_source
            ongoing (boolean): ongoing
            activity_score (number): activity_score
            person (object): person

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'distinct_id': distinct_id,
            'viewed': viewed,
            'viewers': viewers,
            'recording_duration': recording_duration,
            'active_seconds': active_seconds,
            'inactive_seconds': inactive_seconds,
            'start_time': start_time,
            'end_time': end_time,
            'click_count': click_count,
            'keypress_count': keypress_count,
            'mouse_activity_count': mouse_activity_count,
            'console_log_count': console_log_count,
            'console_warn_count': console_warn_count,
            'console_error_count': console_error_count,
            'start_url': start_url,
            'person': person,
            'storage': storage,
            'snapshot_source': snapshot_source,
            'ongoing': ongoing,
            'activity_score': activity_score,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_session_recordings_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific session recording within a project environment.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_analyze_similar_retrieve(self, project_id, id) -> Any:
        """
        Analyzes and retrieves similar session recordings for a specified session ID within a project using the GET method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/{id}/analyze/similar/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_sharing_list(self, project_id, recording_id) -> list[Any]:
        """
        Retrieves sharing details for a specific session recording within a project.

        Args:
            project_id (string): project_id
            recording_id (string): recording_id

        Returns:
            list[Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if recording_id is None:
            raise ValueError("Missing required parameter 'recording_id'")
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/{recording_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_session_recordings_ai_regex_create(self, project_id, id, distinct_id, viewed, viewers, recording_duration, active_seconds, inactive_seconds, start_time, end_time, click_count, keypress_count, mouse_activity_count, console_log_count, console_warn_count, console_error_count, start_url, storage, snapshot_source, ongoing, activity_score, person=None) -> Any:
        """
        Applies AI-driven regex analysis to session recordings for a specified project using the provided details.

        Args:
            project_id (string): project_id
            id (string): id
            distinct_id (string): distinct_id
            viewed (boolean): viewed
            viewers (array): viewers
            recording_duration (integer): recording_duration
            active_seconds (integer): active_seconds
            inactive_seconds (integer): inactive_seconds
            start_time (string): start_time
            end_time (string): end_time
            click_count (integer): click_count
            keypress_count (integer): keypress_count
            mouse_activity_count (integer): mouse_activity_count
            console_log_count (integer): console_log_count
            console_warn_count (integer): console_warn_count
            console_error_count (integer): console_error_count
            start_url (string): start_url
            storage (string): storage
            snapshot_source (string): snapshot_source
            ongoing (boolean): ongoing
            activity_score (number): activity_score
            person (object): person

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'distinct_id': distinct_id,
            'viewed': viewed,
            'viewers': viewers,
            'recording_duration': recording_duration,
            'active_seconds': active_seconds,
            'inactive_seconds': inactive_seconds,
            'start_time': start_time,
            'end_time': end_time,
            'click_count': click_count,
            'keypress_count': keypress_count,
            'mouse_activity_count': mouse_activity_count,
            'console_log_count': console_log_count,
            'console_warn_count': console_warn_count,
            'console_error_count': console_error_count,
            'start_url': start_url,
            'person': person,
            'storage': storage,
            'snapshot_source': snapshot_source,
            'ongoing': ongoing,
            'activity_score': activity_score,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/session_recordings/ai/regex/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_sessions_property_definitions_retrieve(self, project_id) -> Any:
        """
        Retrieves property definitions for sessions within a specified project environment.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/sessions/property_definitions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_sessions_values_retrieve(self, project_id) -> Any:
        """
        Retrieves session values for a specified project from the environments API endpoint.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/sessions/values/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_subscriptions_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of subscriptions for a specified project ID, allowing pagination through optional limit and offset query parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/subscriptions/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_subscriptions_create(self, project_id, id, target_type, target_value, frequency, start_date, created_at, created_by, summary, next_delivery_date, dashboard=None, insight=None, interval=None, byweekday=None, bysetpos=None, count=None, until_date=None, deleted=None, title=None, invite_message=None) -> dict[str, Any]:
        """
        Creates a new subscription for a specified project environment and returns a confirmation status.

        Args:
            project_id (string): project_id
            id (integer): id
            target_type (string): * `email` - Email
        * `slack` - Slack
        * `webhook` - Webhook
            target_value (string): target_value
            frequency (string): * `daily` - Daily
        * `weekly` - Weekly
        * `monthly` - Monthly
        * `yearly` - Yearly
            start_date (string): start_date
            created_at (string): created_at
            created_by (string): created_by
            summary (string): summary
            next_delivery_date (string): next_delivery_date
            dashboard (integer): dashboard
            insight (integer): insight
            interval (integer): interval
            byweekday (array): byweekday
            bysetpos (integer): bysetpos
            count (integer): count
            until_date (string): until_date
            deleted (boolean): deleted
            title (string): title
            invite_message (string): invite_message

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'target_type': target_type,
            'target_value': target_value,
            'frequency': frequency,
            'interval': interval,
            'byweekday': byweekday,
            'bysetpos': bysetpos,
            'count': count,
            'start_date': start_date,
            'until_date': until_date,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'title': title,
            'summary': summary,
            'next_delivery_date': next_delivery_date,
            'invite_message': invite_message,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/subscriptions/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_subscriptions_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a subscription for a specific environment within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_subscriptions_update(self, project_id, id, target_type, target_value, frequency, start_date, created_at, created_by, summary, next_delivery_date, dashboard=None, insight=None, interval=None, byweekday=None, bysetpos=None, count=None, until_date=None, deleted=None, title=None, invite_message=None) -> dict[str, Any]:
        """
        Updates an existing subscription with the specified ID within a project environment, allowing modifications to be applied using the PUT method.

        Args:
            project_id (string): project_id
            id (string): id
            target_type (string): * `email` - Email
        * `slack` - Slack
        * `webhook` - Webhook
            target_value (string): target_value
            frequency (string): * `daily` - Daily
        * `weekly` - Weekly
        * `monthly` - Monthly
        * `yearly` - Yearly
            start_date (string): start_date
            created_at (string): created_at
            created_by (string): created_by
            summary (string): summary
            next_delivery_date (string): next_delivery_date
            dashboard (integer): dashboard
            insight (integer): insight
            interval (integer): interval
            byweekday (array): byweekday
            bysetpos (integer): bysetpos
            count (integer): count
            until_date (string): until_date
            deleted (boolean): deleted
            title (string): title
            invite_message (string): invite_message

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'target_type': target_type,
            'target_value': target_value,
            'frequency': frequency,
            'interval': interval,
            'byweekday': byweekday,
            'bysetpos': bysetpos,
            'count': count,
            'start_date': start_date,
            'until_date': until_date,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'title': title,
            'summary': summary,
            'next_delivery_date': next_delivery_date,
            'invite_message': invite_message,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/environments/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_subscriptions_destroy(self, project_id, id) -> Any:
        """
        Deletes a subscription identified by `{id}` within a specified project environment `{project_id}` using the DELETE method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/environments/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_web_vitals_retrieve(self, project_id, pathname) -> Any:
        """
        Retrieves and formats Web Vitals metrics for a specified project ID, optionally filtered by pathname.

        Args:
            project_id (string): project_id
            pathname (string): Filter web vitals by pathname

        Returns:
            Any: No response body

        Tags:
            environments, environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/environments/{project_id}/web_vitals/"
        query_params = {k: v for k, v in [('pathname', pathname)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def list(self, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of organizations using the GET method, allowing pagination with optional `limit` and `offset` parameters.

        Args:
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, organizations, important
        """
        url = f"{self.base_url}/api/organizations/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def create(self, id, name, slug, created_at, updated_at, membership_level, plugins_access_level, teams, projects, available_product_features, metadata, customer_id, member_count, logo_media_id=None, is_member_join_email_enabled=None, enforce_2fa=None, is_ai_data_processing_approved=None) -> dict[str, Any]:
        """
        Creates a new organization and returns its ID and a success message upon successful creation.

        Args:
            id (string): id
            name (string): name
            slug (string): slug
            created_at (string): created_at
            updated_at (string): updated_at
            membership_level (string): membership_level
            plugins_access_level (string): plugins_access_level
            teams (array): teams
            projects (array): projects
            available_product_features (array): available_product_features
            metadata (string): metadata
            customer_id (string): customer_id
            member_count (string): member_count
            logo_media_id (string): logo_media_id
            is_member_join_email_enabled (boolean): is_member_join_email_enabled
            enforce_2fa (boolean): enforce_2fa
            is_ai_data_processing_approved (boolean): is_ai_data_processing_approved

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, organizations
        """
        request_body = {
            'id': id,
            'name': name,
            'slug': slug,
            'logo_media_id': logo_media_id,
            'created_at': created_at,
            'updated_at': updated_at,
            'membership_level': membership_level,
            'plugins_access_level': plugins_access_level,
            'teams': teams,
            'projects': projects,
            'available_product_features': available_product_features,
            'is_member_join_email_enabled': is_member_join_email_enabled,
            'metadata': metadata,
            'customer_id': customer_id,
            'enforce_2fa': enforce_2fa,
            'member_count': member_count,
            'is_ai_data_processing_approved': is_ai_data_processing_approved,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def retrieve(self, id) -> dict[str, Any]:
        """
        Retrieves details about a specific organization by ID.

        Args:
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, organizations, important
        """
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def update(self, id, name, slug, created_at, updated_at, membership_level, plugins_access_level, teams, projects, available_product_features, metadata, customer_id, member_count, logo_media_id=None, is_member_join_email_enabled=None, enforce_2fa=None, is_ai_data_processing_approved=None) -> dict[str, Any]:
        """
        Updates an organization with the specified ID using the provided data.

        Args:
            id (string): id
            name (string): name
            slug (string): slug
            created_at (string): created_at
            updated_at (string): updated_at
            membership_level (string): membership_level
            plugins_access_level (string): plugins_access_level
            teams (array): teams
            projects (array): projects
            available_product_features (array): available_product_features
            metadata (string): metadata
            customer_id (string): customer_id
            member_count (string): member_count
            logo_media_id (string): logo_media_id
            is_member_join_email_enabled (boolean): is_member_join_email_enabled
            enforce_2fa (boolean): enforce_2fa
            is_ai_data_processing_approved (boolean): is_ai_data_processing_approved

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, organizations, important
        """
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'slug': slug,
            'logo_media_id': logo_media_id,
            'created_at': created_at,
            'updated_at': updated_at,
            'membership_level': membership_level,
            'plugins_access_level': plugins_access_level,
            'teams': teams,
            'projects': projects,
            'available_product_features': available_product_features,
            'is_member_join_email_enabled': is_member_join_email_enabled,
            'metadata': metadata,
            'customer_id': customer_id,
            'enforce_2fa': enforce_2fa,
            'member_count': member_count,
            'is_ai_data_processing_approved': is_ai_data_processing_approved,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def destroy(self, id) -> Any:
        """
        Deletes an organization with the specified ID using the "DELETE" method.

        Args:
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, organizations
        """
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of batch exports for a specified organization using query parameters for limit and offset.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Creates a new batch export for a specified organization using the "POST" method at the "/api/organizations/{organization_id}/batch_exports/" endpoint.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves a batch export by ID for a specific organization, returning details associated with that export.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_update(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Updates or configures a specific batch export within an organization using the PostHog API and returns a status message.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_destroy(self, organization_id, id) -> Any:
        """
        Deletes a specific batch export in an organization using the provided ID and returns no content upon successful deletion.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfill_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Creates a new backfill for a batch export, allowing users to export historical data to a specified destination, using the POST method on the API endpoint "/api/organizations/{organization_id}/batch_exports/{id}/backfill/".

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/backfill/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_logs_retrieve(self, organization_id, id) -> Any:
        """
        Retrieves logs for a specified batch export within an organization using path parameters for identification.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_pause_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Pauses a PostHog Batch Export for the specified organization and batch export ID.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/pause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_run_test_step_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Runs a test step for a batch export identified by the specified ID within an organization using the provided organization ID.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/run_test_step/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_unpause_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Unpauses a batch export identified by its `id` within an organization specified by `organization_id`, allowing it to resume exporting data as configured.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/{id}/unpause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_run_test_step_new_create(self, organization_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Triggers a test step execution for a batch export within the specified organization.

        Args:
            organization_id (string): organization_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/run_test_step_new/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_test_retrieve(self, organization_id) -> Any:
        """
        Tests batch exports for an organization by organization ID using the GET method.

        Args:
            organization_id (string): organization_id

        Returns:
            Any: No response body

        Tags:
            organizations, batch_exports
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/batch_exports/test/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def domains_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of domains associated with a specific organization, identified by its organization ID, with optional pagination through limit and offset parameters.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def domains_create(self, organization_id, id, domain, is_verified, verified_at, verification_challenge, has_saml, jit_provisioning_enabled=None, sso_enforcement=None, saml_entity_id=None, saml_acs_url=None, saml_x509_cert=None) -> dict[str, Any]:
        """
        Creates a new domain entry for the specified organization and returns a status message upon successful creation.

        Args:
            organization_id (string): organization_id
            id (string): id
            domain (string): domain
            is_verified (boolean): Determines whether a domain is verified or not.
            verified_at (string): verified_at
            verification_challenge (string): verification_challenge
            has_saml (boolean): Returns whether SAML is configured for the instance. Does not validate the user has the required license (that check is performed in other places).
            jit_provisioning_enabled (boolean): jit_provisioning_enabled
            sso_enforcement (string): sso_enforcement
            saml_entity_id (string): saml_entity_id
            saml_acs_url (string): saml_acs_url
            saml_x509_cert (string): saml_x509_cert

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'domain': domain,
            'is_verified': is_verified,
            'verified_at': verified_at,
            'verification_challenge': verification_challenge,
            'jit_provisioning_enabled': jit_provisioning_enabled,
            'sso_enforcement': sso_enforcement,
            'has_saml': has_saml,
            'saml_entity_id': saml_entity_id,
            'saml_acs_url': saml_acs_url,
            'saml_x509_cert': saml_x509_cert,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def domains_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves a specific domain by ID associated with an organization using the provided path parameters.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def domains_update(self, organization_id, id, domain, is_verified, verified_at, verification_challenge, has_saml, jit_provisioning_enabled=None, sso_enforcement=None, saml_entity_id=None, saml_acs_url=None, saml_x509_cert=None) -> dict[str, Any]:
        """
        Updates the domain associated with a specified organization by sending a PUT request to the API endpoint "/api/organizations/{organization_id}/domains/{id}/".

        Args:
            organization_id (string): organization_id
            id (string): id
            domain (string): domain
            is_verified (boolean): Determines whether a domain is verified or not.
            verified_at (string): verified_at
            verification_challenge (string): verification_challenge
            has_saml (boolean): Returns whether SAML is configured for the instance. Does not validate the user has the required license (that check is performed in other places).
            jit_provisioning_enabled (boolean): jit_provisioning_enabled
            sso_enforcement (string): sso_enforcement
            saml_entity_id (string): saml_entity_id
            saml_acs_url (string): saml_acs_url
            saml_x509_cert (string): saml_x509_cert

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'domain': domain,
            'is_verified': is_verified,
            'verified_at': verified_at,
            'verification_challenge': verification_challenge,
            'jit_provisioning_enabled': jit_provisioning_enabled,
            'sso_enforcement': sso_enforcement,
            'has_saml': has_saml,
            'saml_entity_id': saml_entity_id,
            'saml_acs_url': saml_acs_url,
            'saml_x509_cert': saml_x509_cert,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def domains_destroy(self, organization_id, id) -> Any:
        """
        Deletes a domain from the specified organization and returns a success status upon removal.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def domains_verify_create(self, organization_id, id, domain, is_verified, verified_at, verification_challenge, has_saml, jit_provisioning_enabled=None, sso_enforcement=None, saml_entity_id=None, saml_acs_url=None, saml_x509_cert=None) -> Any:
        """
        Verifies domain ownership for a specified organization domain, enabling associated features, using the POST method at "/api/organizations/{organization_id}/domains/{id}/verify/".

        Args:
            organization_id (string): organization_id
            id (string): id
            domain (string): domain
            is_verified (boolean): Determines whether a domain is verified or not.
            verified_at (string): verified_at
            verification_challenge (string): verification_challenge
            has_saml (boolean): Returns whether SAML is configured for the instance. Does not validate the user has the required license (that check is performed in other places).
            jit_provisioning_enabled (boolean): jit_provisioning_enabled
            sso_enforcement (string): sso_enforcement
            saml_entity_id (string): saml_entity_id
            saml_acs_url (string): saml_acs_url
            saml_x509_cert (string): saml_x509_cert

        Returns:
            Any: No response body

        Tags:
            organizations, domains
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'domain': domain,
            'is_verified': is_verified,
            'verified_at': verified_at,
            'verification_challenge': verification_challenge,
            'jit_provisioning_enabled': jit_provisioning_enabled,
            'sso_enforcement': sso_enforcement,
            'has_saml': has_saml,
            'saml_entity_id': saml_entity_id,
            'saml_acs_url': saml_acs_url,
            'saml_x509_cert': saml_x509_cert,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/domains/{id}/verify/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def invites_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of pending invitations for an organization, allowing customization of the response with optional query parameters to limit and offset the results.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, invites
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/invites/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def invites_create(self, organization_id, id, target_email, emailing_attempt_made, is_expired, created_by, created_at, updated_at, first_name=None, level=None, message=None, private_project_access=None, send_email=True, combine_pending_invites=False) -> dict[str, Any]:
        """
        Creates and sends an invitation to join the specified organization, returning a success status upon creation.

        Args:
            organization_id (string): organization_id
            id (string): id
            target_email (string): target_email
            emailing_attempt_made (boolean): emailing_attempt_made
            is_expired (boolean): Check if invite is older than INVITE_DAYS_VALIDITY days.
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            first_name (string): first_name
            level (string): level
            message (string): message
            private_project_access (string): List of team IDs and corresponding access levels to private projects.
            send_email (boolean): send_email
            combine_pending_invites (boolean): combine_pending_invites

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, invites
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'target_email': target_email,
            'first_name': first_name,
            'emailing_attempt_made': emailing_attempt_made,
            'level': level,
            'is_expired': is_expired,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'message': message,
            'private_project_access': private_project_access,
            'send_email': send_email,
            'combine_pending_invites': combine_pending_invites,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/invites/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def invites_destroy(self, organization_id, id) -> Any:
        """
        Deletes an invitation with the specified ID for an organization using the organization ID.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, invites
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/invites/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def invites_bulk_create(self, organization_id, id, target_email, emailing_attempt_made, is_expired, created_by, created_at, updated_at, first_name=None, level=None, message=None, private_project_access=None, send_email=True, combine_pending_invites=False) -> Any:
        """
        Creates multiple organization invitations in bulk using the provided organization ID, allowing for customized invite parameters such as target email, first name, and private project access levels.

        Args:
            organization_id (string): organization_id
            id (string): id
            target_email (string): target_email
            emailing_attempt_made (boolean): emailing_attempt_made
            is_expired (boolean): Check if invite is older than INVITE_DAYS_VALIDITY days.
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            first_name (string): first_name
            level (string): level
            message (string): message
            private_project_access (string): List of team IDs and corresponding access levels to private projects.
            send_email (boolean): send_email
            combine_pending_invites (boolean): combine_pending_invites

        Returns:
            Any: No response body

        Tags:
            organizations, invites
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'target_email': target_email,
            'first_name': first_name,
            'emailing_attempt_made': emailing_attempt_made,
            'level': level,
            'is_expired': is_expired,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'message': message,
            'private_project_access': private_project_access,
            'send_email': send_email,
            'combine_pending_invites': combine_pending_invites,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/invites/bulk/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def members_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of members for the specified organization using query parameters for limit and offset.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, members
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/members/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def members_update(self, organization_id, user__uuid, id, user, joined_at, updated_at, is_2fa_enabled, has_social_auth, last_login, level=None) -> dict[str, Any]:
        """
        Updates organization member details for the specified user UUID and organization ID.

        Args:
            organization_id (string): organization_id
            user__uuid (string): user__uuid
            id (string): id
            user (string): user
            joined_at (string): joined_at
            updated_at (string): updated_at
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            last_login (string): last_login
            level (string): level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, members
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if user__uuid is None:
            raise ValueError("Missing required parameter 'user__uuid'")
        request_body = {
            'id': id,
            'user': user,
            'level': level,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'last_login': last_login,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/members/{user__uuid}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def members_partial_update(self, organization_id, user__uuid, id=None, user=None, level=None, joined_at=None, updated_at=None, is_2fa_enabled=None, has_social_auth=None, last_login=None) -> dict[str, Any]:
        """
        Updates a member's details within an organization using the PATCH method, requiring an organization ID and user UUID as path parameters, and returns a successful response upon modification.

        Args:
            organization_id (string): organization_id
            user__uuid (string): user__uuid
            id (string): id
            user (string): user
            level (string): level
            joined_at (string): joined_at
            updated_at (string): updated_at
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            last_login (string): last_login

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, members
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if user__uuid is None:
            raise ValueError("Missing required parameter 'user__uuid'")
        request_body = {
            'id': id,
            'user': user,
            'level': level,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'last_login': last_login,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/members/{user__uuid}/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def members_destroy(self, organization_id, user__uuid) -> Any:
        """
        Removes a member from an organization using their UUID, identified by the organization ID, and returns a no content status upon successful removal.

        Args:
            organization_id (string): organization_id
            user__uuid (string): user__uuid

        Returns:
            Any: No response body

        Tags:
            organizations, members
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if user__uuid is None:
            raise ValueError("Missing required parameter 'user__uuid'")
        url = f"{self.base_url}/api/organizations/{organization_id}/members/{user__uuid}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def list_2(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of projects for a specified organization using the provided organization ID, with optional limit and offset parameters for pagination.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def create_2(self, organization_id, id, organization, created_at, effective_membership_level, has_group_types, group_types, live_events_token, updated_at, uuid, api_token, ingested_event, person_on_events_querying_enabled, default_modifiers, product_intents, name=None, product_description=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_replay_config=None, survey_config=None, access_control=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None) -> dict[str, Any]:
        """
        Creates a new project within the specified organization using the API endpoint "/api/organizations/{organization_id}/projects/" and returns a status message upon successful creation.

        Args:
            organization_id (string): organization_id
            id (integer): id
            organization (string): organization
            created_at (string): created_at
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            updated_at (string): updated_at
            uuid (string): uuid
            api_token (string): api_token
            ingested_event (boolean): ingested_event
            person_on_events_querying_enabled (string): person_on_events_querying_enabled
            default_modifiers (string): default_modifiers
            product_intents (string): product_intents
            name (string): name
            product_description (string): product_description
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            access_control (boolean): access_control
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'organization': organization,
            'name': name,
            'product_description': product_description,
            'created_at': created_at,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'updated_at': updated_at,
            'uuid': uuid,
            'api_token': api_token,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'ingested_event': ingested_event,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'access_control': access_control,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'default_modifiers': default_modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'product_intents': product_intents,
            'flags_persistence_default': flags_persistence_default,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def retrieve_2(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves details for a specific project within an organization using the organization ID and project ID as identifiers.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def update_2(self, organization_id, id, organization, created_at, effective_membership_level, has_group_types, group_types, live_events_token, updated_at, uuid, api_token, ingested_event, person_on_events_querying_enabled, default_modifiers, product_intents, name=None, product_description=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_replay_config=None, survey_config=None, access_control=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None) -> dict[str, Any]:
        """
        Updates an existing project within a specified organization and returns the updated data.

        Args:
            organization_id (string): organization_id
            id (string): id
            organization (string): organization
            created_at (string): created_at
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            updated_at (string): updated_at
            uuid (string): uuid
            api_token (string): api_token
            ingested_event (boolean): ingested_event
            person_on_events_querying_enabled (string): person_on_events_querying_enabled
            default_modifiers (string): default_modifiers
            product_intents (string): product_intents
            name (string): name
            product_description (string): product_description
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            access_control (boolean): access_control
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'organization': organization,
            'name': name,
            'product_description': product_description,
            'created_at': created_at,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'updated_at': updated_at,
            'uuid': uuid,
            'api_token': api_token,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'ingested_event': ingested_event,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'access_control': access_control,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'default_modifiers': default_modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'product_intents': product_intents,
            'flags_persistence_default': flags_persistence_default,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def destroy_2(self, organization_id, id) -> Any:
        """
        Deletes a specific project within an organization and returns no content upon success.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def activity_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves activity log data for a project within an organization.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()



    def change_organization_create(self, organization_id, id, organization, created_at, effective_membership_level, has_group_types, group_types, live_events_token, updated_at, uuid, api_token, ingested_event, person_on_events_querying_enabled, default_modifiers, product_intents, name=None, product_description=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_replay_config=None, survey_config=None, access_control=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None) -> dict[str, Any]:
        """
        Changes the organization of a project using the provided organization and project IDs.

        Args:
            organization_id (string): organization_id
            id (string): id
            organization (string): organization
            created_at (string): created_at
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            updated_at (string): updated_at
            uuid (string): uuid
            api_token (string): api_token
            ingested_event (boolean): ingested_event
            person_on_events_querying_enabled (string): person_on_events_querying_enabled
            default_modifiers (string): default_modifiers
            product_intents (string): product_intents
            name (string): name
            product_description (string): product_description
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            access_control (boolean): access_control
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'organization': organization,
            'name': name,
            'product_description': product_description,
            'created_at': created_at,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'updated_at': updated_at,
            'uuid': uuid,
            'api_token': api_token,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'ingested_event': ingested_event,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'access_control': access_control,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'default_modifiers': default_modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'product_intents': product_intents,
            'flags_persistence_default': flags_persistence_default,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/change_organization/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def is_generating_demo_data_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Checks if demo data is being generated for a specific project within an organization.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, projects
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/projects/{id}/is_generating_demo_data/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def proxy_records_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of proxy records for a specified organization using query parameters for limit and offset.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, proxy_records
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/proxy_records/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def proxy_records_create(self, organization_id, id, domain, target_cname, status, message, created_at, updated_at, created_by) -> dict[str, Any]:
        """
        Creates a proxy record for the specified organization using the provided organization ID.

        Args:
            organization_id (string): organization_id
            id (string): id
            domain (string): domain
            target_cname (string): target_cname
            status (string): status
            message (string): message
            created_at (string): created_at
            updated_at (string): updated_at
            created_by (integer): created_by

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, proxy_records
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'domain': domain,
            'target_cname': target_cname,
            'status': status,
            'message': message,
            'created_at': created_at,
            'updated_at': updated_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/proxy_records/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def proxy_records_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves a specific proxy record by its ID for a given organization using the PostHog API.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, proxy_records
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/proxy_records/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def proxy_records_update(self, organization_id, id, domain, target_cname, status, message, created_at, updated_at, created_by) -> dict[str, Any]:
        """
        Updates a specific proxy record within an organization using the provided identifier and returns a status upon success.

        Args:
            organization_id (string): organization_id
            id (string): id
            domain (string): domain
            target_cname (string): target_cname
            status (string): status
            message (string): message
            created_at (string): created_at
            updated_at (string): updated_at
            created_by (integer): created_by

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, proxy_records
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'domain': domain,
            'target_cname': target_cname,
            'status': status,
            'message': message,
            'created_at': created_at,
            'updated_at': updated_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/proxy_records/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def proxy_records_destroy(self, organization_id, id) -> Any:
        """
        Deletes a specific proxy record identified by `{id}` within an organization specified by `{organization_id}` using the `DELETE` method.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, proxy_records
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/proxy_records/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_list(self, organization_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of roles for a specified organization using the provided organization ID, with optional parameters to limit and offset the results.

        Args:
            organization_id (string): organization_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_create(self, organization_id, id, name, created_at, created_by, members, feature_flags_access_level=None) -> dict[str, Any]:
        """
        Creates a new role within the specified organization and returns the created resource upon success.

        Args:
            organization_id (string): organization_id
            id (string): id
            name (string): name
            created_at (string): created_at
            created_by (string): created_by
            members (string): members
            feature_flags_access_level (string): feature_flags_access_level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        request_body = {
            'id': id,
            'name': name,
            'feature_flags_access_level': feature_flags_access_level,
            'created_at': created_at,
            'created_by': created_by,
            'members': members,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_retrieve(self, organization_id, id) -> dict[str, Any]:
        """
        Retrieves a specific role within an organization based on the role and organization identifiers.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_update(self, organization_id, id, name, created_at, created_by, members, feature_flags_access_level=None) -> dict[str, Any]:
        """
        Updates a specific role in an organization using the provided role ID and organization ID.

        Args:
            organization_id (string): organization_id
            id (string): id
            name (string): name
            created_at (string): created_at
            created_by (string): created_by
            members (string): members
            feature_flags_access_level (string): feature_flags_access_level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'feature_flags_access_level': feature_flags_access_level,
            'created_at': created_at,
            'created_by': created_by,
            'members': members,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def roles_destroy(self, organization_id, id) -> Any:
        """
        Removes a specific role from an organization by its ID using a DELETE request and returns a 204 No Content response upon success.

        Args:
            organization_id (string): organization_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_role_memberships_list(self, organization_id, role_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of role memberships for a specific role within an organization using query parameters for limit and offset.

        Args:
            organization_id (string): organization_id
            role_id (string): role_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if role_id is None:
            raise ValueError("Missing required parameter 'role_id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{role_id}/role_memberships/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_role_memberships_create(self, organization_id, role_id, id, organization_member, user, joined_at, updated_at, user_uuid) -> dict[str, Any]:
        """
        Assigns a role to an organization member by associating the role ID with the membership via a POST request.

        Args:
            organization_id (string): organization_id
            role_id (string): role_id
            id (string): id
            organization_member (string): organization_member
            user (string): user
            joined_at (string): joined_at
            updated_at (string): updated_at
            user_uuid (string): user_uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if role_id is None:
            raise ValueError("Missing required parameter 'role_id'")
        request_body = {
            'id': id,
            'role_id': role_id,
            'organization_member': organization_member,
            'user': user,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user_uuid': user_uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{role_id}/role_memberships/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def roles_role_memberships_destroy(self, organization_id, role_id, id) -> Any:
        """
        Removes a specific role membership from an organization role using the provided organization ID, role ID, and membership ID.

        Args:
            organization_id (string): organization_id
            role_id (string): role_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            organizations, roles
        """
        if organization_id is None:
            raise ValueError("Missing required parameter 'organization_id'")
        if role_id is None:
            raise ValueError("Missing required parameter 'role_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/organizations/{organization_id}/roles/{role_id}/role_memberships/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def actions_list(self, project_id, format=None, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of actions for a specified project using the "GET" method, allowing optional filtering by format, limit, and offset.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the action results.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            actions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/actions/"
        query_params = {k: v for k, v in [('format', format), ('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def actions_create(self, project_id, id, created_at, created_by, is_calculating, team_id, is_action, bytecode_error, creation_context, format=None, name=None, description=None, tags=None, post_to_slack=None, slack_message_format=None, steps=None, deleted=None, last_calculated_at=None, pinned_at=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates an action for a specified project using the POST method and returns a status message upon success.

        Args:
            project_id (string): project_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            is_calculating (boolean): is_calculating
            team_id (integer): team_id
            is_action (boolean): is_action
            bytecode_error (string): bytecode_error
            creation_context (string): creation_context
            format (string): The format of the response data (e.g., JSON, XML).
            name (string): name
            description (string): description
            tags (array): tags
            post_to_slack (boolean): post_to_slack
            slack_message_format (string): slack_message_format
            steps (array): steps
            deleted (boolean): deleted
            last_calculated_at (string): last_calculated_at
            pinned_at (string): pinned_at
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            actions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'tags': tags,
            'post_to_slack': post_to_slack,
            'slack_message_format': slack_message_format,
            'steps': steps,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'is_calculating': is_calculating,
            'last_calculated_at': last_calculated_at,
            'team_id': team_id,
            'is_action': is_action,
            'bytecode_error': bytecode_error,
            'pinned_at': pinned_at,
            'creation_context': creation_context,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/actions/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def actions_retrieve(self, project_id, id, format=None) -> dict[str, Any]:
        """
        Retrieves a specific action for a project, formatted as specified by the query parameter, using the provided project and action identifiers.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format of the response for the action details.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            actions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/actions/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def actions_update(self, project_id, id, created_at, created_by, is_calculating, team_id, is_action, bytecode_error, creation_context, format=None, name=None, description=None, tags=None, post_to_slack=None, slack_message_format=None, steps=None, deleted=None, last_calculated_at=None, pinned_at=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a specific action within a project using the provided ID and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            is_calculating (boolean): is_calculating
            team_id (integer): team_id
            is_action (boolean): is_action
            bytecode_error (string): bytecode_error
            creation_context (string): creation_context
            format (string): Specifies the data format for the action's output (e.g., JSON, XML).
            name (string): name
            description (string): description
            tags (array): tags
            post_to_slack (boolean): post_to_slack
            slack_message_format (string): slack_message_format
            steps (array): steps
            deleted (boolean): deleted
            last_calculated_at (string): last_calculated_at
            pinned_at (string): pinned_at
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            actions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'tags': tags,
            'post_to_slack': post_to_slack,
            'slack_message_format': slack_message_format,
            'steps': steps,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'is_calculating': is_calculating,
            'last_calculated_at': last_calculated_at,
            'team_id': team_id,
            'is_action': is_action,
            'bytecode_error': bytecode_error,
            'pinned_at': pinned_at,
            'creation_context': creation_context,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/actions/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def actions_destroy(self, project_id, id, format=None) -> Any:
        """
        Deletes an action associated with a specific project using the project ID and action ID.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the response format (e.g., JSON, XML) for the DELETE operation's output.

        Returns:
            Any: API response data.

        Tags:
            actions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/actions/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def activity_log_list(self, project_id) -> list[Any]:
        """
        Retrieves the activity log for a specified project, providing a record of changes and actions taken within the project.

        Args:
            project_id (string): project_id

        Returns:
            list[Any]: API response data.

        Tags:
            activity_log
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/activity_log/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def activity_log_bookmark_activity_notification_create(self, project_id, id, user, unread, activity, scope, organization_id=None, was_impersonated=None, is_system=None, item_id=None, detail=None, created_at=None) -> Any:
        """
        Sends a notification for bookmarking an activity log event within a specified project using the PostHog API.

        Args:
            project_id (string): project_id
            id (string): id
            user (object): user
            unread (boolean): is the date of this log item newer than the user's bookmark
            activity (string): activity
            scope (string): scope
            organization_id (string): organization_id
            was_impersonated (boolean): was_impersonated
            is_system (boolean): is_system
            item_id (string): item_id
            detail (string): detail
            created_at (string): created_at

        Returns:
            Any: No response body

        Tags:
            activity_log
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'user': user,
            'unread': unread,
            'organization_id': organization_id,
            'was_impersonated': was_impersonated,
            'is_system': is_system,
            'activity': activity,
            'item_id': item_id,
            'scope': scope,
            'detail': detail,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/activity_log/bookmark_activity_notification/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def activity_log_important_changes_retrieve(self, project_id) -> Any:
        """
        Retrieves a list of important changes from the activity log for a specific project identified by its project ID using the GET method.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            activity_log
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/activity_log/important_changes/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def annotations_list(self, project_id, limit=None, offset=None, search=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of annotations for a specific project with optional search filtering.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            search (string): A search term.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            annotations
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/annotations/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def annotations_create(self, project_id, id, dashboard_id, dashboard_name, insight_short_id, insight_name, insight_derived_name, created_by, created_at, updated_at, content=None, date_marker=None, creation_type=None, dashboard_item=None, deleted=None, scope=None) -> dict[str, Any]:
        """
        Creates annotations for a specific project using the provided project ID and returns a success status upon creation.

        Args:
            project_id (string): project_id
            id (integer): id
            dashboard_id (integer): dashboard_id
            dashboard_name (string): dashboard_name
            insight_short_id (string): insight_short_id
            insight_name (string): insight_name
            insight_derived_name (string): insight_derived_name
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            content (string): content
            date_marker (string): date_marker
            creation_type (string): * `USR` - user
        * `GIT` - GitHub
            dashboard_item (integer): dashboard_item
            deleted (boolean): deleted
            scope (string): * `dashboard_item` - insight
        * `dashboard` - dashboard
        * `project` - project
        * `organization` - organization

        Returns:
            dict[str, Any]: API response data.

        Tags:
            annotations
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'content': content,
            'date_marker': date_marker,
            'creation_type': creation_type,
            'dashboard_item': dashboard_item,
            'dashboard_id': dashboard_id,
            'dashboard_name': dashboard_name,
            'insight_short_id': insight_short_id,
            'insight_name': insight_name,
            'insight_derived_name': insight_derived_name,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'deleted': deleted,
            'scope': scope,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/annotations/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def annotations_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves an annotation by its ID within a specific project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            annotations
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/annotations/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def annotations_update(self, project_id, id, dashboard_id, dashboard_name, insight_short_id, insight_name, insight_derived_name, created_by, created_at, updated_at, content=None, date_marker=None, creation_type=None, dashboard_item=None, deleted=None, scope=None) -> dict[str, Any]:
        """
        Updates an annotation for a specific project by ID using the PUT method.

        Args:
            project_id (string): project_id
            id (string): id
            dashboard_id (integer): dashboard_id
            dashboard_name (string): dashboard_name
            insight_short_id (string): insight_short_id
            insight_name (string): insight_name
            insight_derived_name (string): insight_derived_name
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            content (string): content
            date_marker (string): date_marker
            creation_type (string): * `USR` - user
        * `GIT` - GitHub
            dashboard_item (integer): dashboard_item
            deleted (boolean): deleted
            scope (string): * `dashboard_item` - insight
        * `dashboard` - dashboard
        * `project` - project
        * `organization` - organization

        Returns:
            dict[str, Any]: API response data.

        Tags:
            annotations
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'content': content,
            'date_marker': date_marker,
            'creation_type': creation_type,
            'dashboard_item': dashboard_item,
            'dashboard_id': dashboard_id,
            'dashboard_name': dashboard_name,
            'insight_short_id': insight_short_id,
            'insight_name': insight_name,
            'insight_derived_name': insight_derived_name,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'deleted': deleted,
            'scope': scope,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/annotations/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def annotations_destroy(self, project_id, id) -> Any:
        """
        Deletes an annotation from a project by its ID, using the specified project ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            annotations
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/annotations/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def app_metrics_retrieve(self, project_id, id) -> Any:
        """
        Retrieves specific application metrics for a project using the provided project_id and metric ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            app_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/app_metrics/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def app_metrics_error_details_retrieve(self, project_id, id) -> Any:
        """
        Retrieves error details for a specific metric by project ID using the GET method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            app_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/app_metrics/{id}/error_details/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def app_metrics_historical_exports_retrieve(self, project_id, plugin_config_id) -> Any:
        """
        Retrieves historical export data for a specific plugin configuration within a project using the GET method.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id

        Returns:
            Any: No response body

        Tags:
            app_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        url = f"{self.base_url}/api/projects/{project_id}/app_metrics/{plugin_config_id}/historical_exports/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def app_metrics_historical_exports_retrieve_2(self, project_id, plugin_config_id, id) -> Any:
        """
        Retrieves historical export data for a specific plugin configuration in a project.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            app_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/app_metrics/{plugin_config_id}/historical_exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_list_2(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of batch exports for a specified project with optional pagination controls.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Creates and configures a batch export operation for a specified project, enabling scheduled data transfers to external destinations.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfills_list(self, project_id, batch_export_id, cursor=None, ordering=None) -> dict[str, Any]:
        """
        Retrieves a list of backfills for a specific batch export associated with a project, supporting cursor pagination and ordering.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            cursor (string): The pagination cursor value.
            ordering (string): Which field to use when ordering the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/backfills/"
        query_params = {k: v for k, v in [('cursor', cursor), ('ordering', ordering)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfills_create(self, project_id, batch_export_id, id, progress, status, created_at, last_updated_at, team, batch_export, start_at=None, end_at=None, finished_at=None) -> dict[str, Any]:
        """
        Creates a new backfill for a batch export, allowing users to export historical data from PostHog to a specified destination, using parameters such as `batch_export_id` and `project_id`.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            progress (string): progress
            status (string): The status of this backfill.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            created_at (string): The timestamp at which this BatchExportBackfill was created.
            last_updated_at (string): The timestamp at which this BatchExportBackfill was last updated.
            team (integer): The team this belongs to.
            batch_export (string): The BatchExport this backfill belongs to.
            start_at (string): The start of the data interval.
            end_at (string): The end of the data interval.
            finished_at (string): The timestamp at which this BatchExportBackfill finished, successfully or not.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        request_body = {
            'id': id,
            'progress': progress,
            'start_at': start_at,
            'end_at': end_at,
            'status': status,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'team': team,
            'batch_export': batch_export,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/backfills/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfills_retrieve(self, project_id, batch_export_id, id) -> dict[str, Any]:
        """
        Retrieves details of a specific backfill operation for a batch export within a PostHog project.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/backfills/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfills_cancel_create(self, project_id, batch_export_id, id, progress, status, created_at, last_updated_at, team, batch_export, start_at=None, end_at=None, finished_at=None) -> Any:
        """
        Cancels a specified batch export backfill for a project using the provided batch export and backfill IDs.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            progress (string): progress
            status (string): The status of this backfill.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            created_at (string): The timestamp at which this BatchExportBackfill was created.
            last_updated_at (string): The timestamp at which this BatchExportBackfill was last updated.
            team (integer): The team this belongs to.
            batch_export (string): The BatchExport this backfill belongs to.
            start_at (string): The start of the data interval.
            end_at (string): The end of the data interval.
            finished_at (string): The timestamp at which this BatchExportBackfill finished, successfully or not.

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'progress': progress,
            'start_at': start_at,
            'end_at': end_at,
            'status': status,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'team': team,
            'batch_export': batch_export,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/backfills/{id}/cancel/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_runs_list(self, project_id, batch_export_id, cursor=None, ordering=None) -> dict[str, Any]:
        """
        Retrieves a list of batch export runs for a specific project and batch export, with optional cursor-based pagination and ordering.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            cursor (string): The pagination cursor value.
            ordering (string): Which field to use when ordering the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/"
        query_params = {k: v for k, v in [('cursor', cursor), ('ordering', ordering)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_runs_retrieve(self, project_id, batch_export_id, id) -> dict[str, Any]:
        """
        Retrieves a specific batch export run's details for a given project and batch export using the provided identifiers.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_runs_cancel_create(self, project_id, batch_export_id, id, status, data_interval_end, created_at, last_updated_at, batch_export, records_completed=None, latest_error=None, data_interval_start=None, cursor=None, finished_at=None, records_total_count=None, backfill=None) -> Any:
        """
        Cancels a batch export run using the PostHog API by sending a POST request to the specified path, requiring parameters such as `batch_export_id`, `id`, and `project_id` to identify and terminate the export process.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            status (string): The status of this run.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            data_interval_end (string): The end of the data interval.
            created_at (string): The timestamp at which this BatchExportRun was created.
            last_updated_at (string): The timestamp at which this BatchExportRun was last updated.
            batch_export (string): The BatchExport this run belongs to.
            records_completed (integer): The number of records that have been exported.
            latest_error (string): The latest error that occurred during this run.
            data_interval_start (string): The start of the data interval.
            cursor (string): An opaque cursor that may be used to resume.
            finished_at (string): The timestamp at which this BatchExportRun finished, successfully or not.
            records_total_count (integer): The total count of records that should be exported in this BatchExportRun.
            backfill (string): The backfill this run belongs to.

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'status': status,
            'records_completed': records_completed,
            'latest_error': latest_error,
            'data_interval_start': data_interval_start,
            'data_interval_end': data_interval_end,
            'cursor': cursor,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'records_total_count': records_total_count,
            'batch_export': batch_export,
            'backfill': backfill,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{id}/cancel/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_runs_logs_retrieve(self, project_id, batch_export_id, id) -> Any:
        """
        Retrieves logs for a specific run of a batch export in a project using the provided project ID, batch export ID, and run ID.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_runs_retry_create(self, project_id, batch_export_id, id, status, data_interval_end, created_at, last_updated_at, batch_export, records_completed=None, latest_error=None, data_interval_start=None, cursor=None, finished_at=None, records_total_count=None, backfill=None) -> Any:
        """
        Initiates a retry operation for a specific batch export run within a project using a POST request.

        Args:
            project_id (string): project_id
            batch_export_id (string): batch_export_id
            id (string): id
            status (string): The status of this run.

        * `Cancelled` - Cancelled
        * `Completed` - Completed
        * `ContinuedAsNew` - Continued As New
        * `Failed` - Failed
        * `FailedRetryable` - Failed Retryable
        * `Terminated` - Terminated
        * `TimedOut` - Timedout
        * `Running` - Running
        * `Starting` - Starting
            data_interval_end (string): The end of the data interval.
            created_at (string): The timestamp at which this BatchExportRun was created.
            last_updated_at (string): The timestamp at which this BatchExportRun was last updated.
            batch_export (string): The BatchExport this run belongs to.
            records_completed (integer): The number of records that have been exported.
            latest_error (string): The latest error that occurred during this run.
            data_interval_start (string): The start of the data interval.
            cursor (string): An opaque cursor that may be used to resume.
            finished_at (string): The timestamp at which this BatchExportRun finished, successfully or not.
            records_total_count (integer): The total count of records that should be exported in this BatchExportRun.
            backfill (string): The backfill this run belongs to.

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if batch_export_id is None:
            raise ValueError("Missing required parameter 'batch_export_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'status': status,
            'records_completed': records_completed,
            'latest_error': latest_error,
            'data_interval_start': data_interval_start,
            'data_interval_end': data_interval_end,
            'cursor': cursor,
            'created_at': created_at,
            'finished_at': finished_at,
            'last_updated_at': last_updated_at,
            'records_total_count': records_total_count,
            'batch_export': batch_export,
            'backfill': backfill,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{batch_export_id}/runs/{id}/retry/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_retrieve_2(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific batch export by its ID within a project, returning details about the export using the project ID and batch export ID as parameters.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_update_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> dict[str, Any]:
        """
        Updates a batch export configuration for a specified project and export ID.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def batch_exports_destroy_2(self, project_id, id) -> Any:
        """
        Deletes a specific batch export configuration for a project using the provided project and export identifiers.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_backfill_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Creates a backfill for batch exports, enabling historical data export between specified start and end times.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/backfill/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_logs_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves logs for a specific batch export within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_pause_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Pauses a specific batch export in a PostHog project via the API.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/pause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_run_test_step_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Executes a test step for a batch export operation in PostHog, identified by project ID and export ID, returning a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/run_test_step/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_unpause_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Unpauses a batch export with the specified ID within a project, using the POST method, to resume its operation.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/{id}/unpause/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_run_test_step_new_create_2(self, project_id, id, team_id, name, destination, interval, created_at, last_updated_at, latest_runs, schema, model=None, paused=None, last_paused_at=None, start_at=None, end_at=None, hogql_query=None, filters=None) -> Any:
        """
        Runs a test step for batch exports in a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (string): id
            team_id (integer): The team this belongs to.
            name (string): A human-readable name for this BatchExport.
            destination (object): Serializer for an BatchExportDestination model.
            interval (string): * `hour` - hour
        * `day` - day
        * `week` - week
        * `every 5 minutes` - every 5 minutes
            created_at (string): The timestamp at which this BatchExport was created.
            last_updated_at (string): The timestamp at which this BatchExport was last updated.
            latest_runs (array): latest_runs
            schema (string): A schema of custom fields to select when exporting data.
            model (string): Which model this BatchExport is exporting.

        * `events` - Events
        * `persons` - Persons
        * `sessions` - Sessions
            paused (boolean): Whether this BatchExport is paused or not.
            last_paused_at (string): The timestamp at which this BatchExport was last paused.
            start_at (string): Time before which any Batch Export runs won't be triggered.
            end_at (string): Time after which any Batch Export runs won't be triggered.
            hogql_query (string): hogql_query
            filters (string): filters

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'team_id': team_id,
            'name': name,
            'model': model,
            'destination': destination,
            'interval': interval,
            'paused': paused,
            'created_at': created_at,
            'last_updated_at': last_updated_at,
            'last_paused_at': last_paused_at,
            'start_at': start_at,
            'end_at': end_at,
            'latest_runs': latest_runs,
            'hogql_query': hogql_query,
            'schema': schema,
            'filters': filters,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/run_test_step_new/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def batch_exports_test_retrieve_2(self, project_id) -> Any:
        """
        Retrieves test configuration or status for batch exports in a specified PostHog project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            batch_exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/batch_exports/test/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of cohorts for a specified project, allowing for pagination with optional limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_create(self, project_id, id, is_calculating, created_by, created_at, last_calculation, errors_calculating, count, experiment_set, name=None, description=None, groups=None, deleted=None, filters=None, query=None, is_static=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new cohort within the specified project and returns a success status upon creation.

        Args:
            project_id (string): project_id
            id (integer): id
            is_calculating (boolean): is_calculating
            created_by (string): created_by
            created_at (string): created_at
            last_calculation (string): last_calculation
            errors_calculating (integer): errors_calculating
            count (integer): count
            experiment_set (array): experiment_set
            name (string): name
            description (string): description
            groups (string): groups
            deleted (boolean): deleted
            filters (string): filters
            query (string): query
            is_static (boolean): is_static
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'groups': groups,
            'deleted': deleted,
            'filters': filters,
            'query': query,
            'is_calculating': is_calculating,
            'created_by': created_by,
            'created_at': created_at,
            'last_calculation': last_calculation,
            'errors_calculating': errors_calculating,
            'count': count,
            'is_static': is_static,
            'experiment_set': experiment_set,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves information about a specific cohort identified by `{id}` within a project identified by `{project_id}` using the API.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_update(self, project_id, id, is_calculating, created_by, created_at, last_calculation, errors_calculating, count, experiment_set, name=None, description=None, groups=None, deleted=None, filters=None, query=None, is_static=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a specific cohort within a project by replacing or creating it, using the PUT method with the specified project ID and cohort ID.

        Args:
            project_id (string): project_id
            id (string): id
            is_calculating (boolean): is_calculating
            created_by (string): created_by
            created_at (string): created_at
            last_calculation (string): last_calculation
            errors_calculating (integer): errors_calculating
            count (integer): count
            experiment_set (array): experiment_set
            name (string): name
            description (string): description
            groups (string): groups
            deleted (boolean): deleted
            filters (string): filters
            query (string): query
            is_static (boolean): is_static
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'groups': groups,
            'deleted': deleted,
            'filters': filters,
            'query': query,
            'is_calculating': is_calculating,
            'created_by': created_by,
            'created_at': created_at,
            'last_calculation': last_calculation,
            'errors_calculating': errors_calculating,
            'count': count,
            'is_static': is_static,
            'experiment_set': experiment_set,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def cohorts_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific cohort associated with a project using the provided project ID and cohort ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_activity_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves activity data for a specific cohort within a project using the provided project and cohort IDs.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_duplicate_as_static_cohort_retrieve(self, project_id, id) -> Any:
        """
        Duplicates an existing cohort as a static cohort using the GET method at the specified path "/api/projects/{project_id}/cohorts/{id}/duplicate_as_static_cohort/".

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/duplicate_as_static_cohort/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_persons_retrieve(self, project_id, id, format=None) -> Any:
        """
        Retrieves a list of persons associated with a specific cohort in a project using the GET method.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the desired response format (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/{id}/persons/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def cohorts_activity_retrieve(self, project_id) -> Any:
        """
        Retrieves the activity data for cohorts within a specified project using the "GET" method.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            cohorts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/cohorts/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboard_templates_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of dashboard templates associated with a specified project using path and query parameters for project ID and pagination.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboard_templates_create(self, project_id, id, created_at, team_id, template_name=None, dashboard_description=None, dashboard_filters=None, tags=None, tiles=None, variables=None, deleted=None, created_by=None, image_url=None, scope=None, availability_contexts=None) -> dict[str, Any]:
        """
        Creates a new dashboard template for a specified project using the project ID in the path.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            team_id (integer): team_id
            template_name (string): template_name
            dashboard_description (string): dashboard_description
            dashboard_filters (string): dashboard_filters
            tags (array): tags
            tiles (string): tiles
            variables (string): variables
            deleted (boolean): deleted
            created_by (integer): created_by
            image_url (string): image_url
            scope (string): scope
            availability_contexts (array): availability_contexts

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'template_name': template_name,
            'dashboard_description': dashboard_description,
            'dashboard_filters': dashboard_filters,
            'tags': tags,
            'tiles': tiles,
            'variables': variables,
            'deleted': deleted,
            'created_at': created_at,
            'created_by': created_by,
            'image_url': image_url,
            'team_id': team_id,
            'scope': scope,
            'availability_contexts': availability_contexts,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboard_templates_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific dashboard template associated with a project using the provided project and template identifiers.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboard_templates_update(self, project_id, id, created_at, team_id, template_name=None, dashboard_description=None, dashboard_filters=None, tags=None, tiles=None, variables=None, deleted=None, created_by=None, image_url=None, scope=None, availability_contexts=None) -> dict[str, Any]:
        """
        Updates an existing dashboard template in a specified project using the provided ID and project identifier.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            team_id (integer): team_id
            template_name (string): template_name
            dashboard_description (string): dashboard_description
            dashboard_filters (string): dashboard_filters
            tags (array): tags
            tiles (string): tiles
            variables (string): variables
            deleted (boolean): deleted
            created_by (integer): created_by
            image_url (string): image_url
            scope (string): scope
            availability_contexts (array): availability_contexts

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'template_name': template_name,
            'dashboard_description': dashboard_description,
            'dashboard_filters': dashboard_filters,
            'tags': tags,
            'tiles': tiles,
            'variables': variables,
            'deleted': deleted,
            'created_at': created_at,
            'created_by': created_by,
            'image_url': image_url,
            'team_id': team_id,
            'scope': scope,
            'availability_contexts': availability_contexts,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def dashboard_templates_destroy(self, project_id, id) -> Any:
        """
        Deletes the specified dashboard template associated with a project and returns a status code.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboard_templates_json_schema_retrieve(self, project_id) -> Any:
        """
        Retrieves the JSON schema for dashboard templates for a specified project using the "GET" method.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            dashboard_templates
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboard_templates/json_schema/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of dashboards associated with the specified project, using limit and offset parameters for result pagination.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_create(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new dashboard for the specified project and returns a success status on creation.

        Args:
            project_id (string): project_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_collaborators_list(self, project_id, dashboard_id) -> list[Any]:
        """
        Retrieves a list of collaborators for a specific dashboard within a project.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id

        Returns:
            list[Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{dashboard_id}/collaborators/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_collaborators_create(self, project_id, dashboard_id, id, user, level, added_at, updated_at, user_uuid) -> dict[str, Any]:
        """
        Adds a collaborator to the specified dashboard within a given project and returns a success status upon creation.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id
            id (string): id
            user (string): user
            level (string): level
            added_at (string): added_at
            updated_at (string): updated_at
            user_uuid (string): user_uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        request_body = {
            'id': id,
            'dashboard_id': dashboard_id,
            'user': user,
            'level': level,
            'added_at': added_at,
            'updated_at': updated_at,
            'user_uuid': user_uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{dashboard_id}/collaborators/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_collaborators_destroy(self, project_id, dashboard_id, user__uuid) -> Any:
        """
        Removes a collaborator from the specified dashboard within a project.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id
            user__uuid (string): user__uuid

        Returns:
            Any: No response body

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        if user__uuid is None:
            raise ValueError("Missing required parameter 'user__uuid'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{dashboard_id}/collaborators/{user__uuid}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_sharing_list(self, project_id, dashboard_id) -> list[Any]:
        """
        Retrieves the sharing configuration for a specific dashboard within a project.

        Args:
            project_id (string): project_id
            dashboard_id (string): dashboard_id

        Returns:
            list[Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if dashboard_id is None:
            raise ValueError("Missing required parameter 'dashboard_id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{dashboard_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a dashboard for a specific project using the provided project ID and dashboard ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def dashboards_update(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates the specified dashboard within a project, identified by the project ID and dashboard ID, and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def dashboards_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific dashboard identified by its ID within a project, using the DELETE method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def dashboards_create_from_template_json_create(self, project_id, id, created_at, created_by, is_shared, creation_mode, filters, variables, tiles, effective_restriction_level, effective_privilege_level, user_access_level, access_control_version, name=None, description=None, pinned=None, deleted=None, use_template=None, use_dashboard=None, delete_insights=False, breakdown_colors=None, data_color_theme_id=None, tags=None, restriction_level=None, _create_in_folder=None) -> Any:
        """
        Creates a new project dashboard by processing a JSON template through a POST request to the specified project endpoint.

        Args:
            project_id (string): project_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            is_shared (boolean): is_shared
            creation_mode (string): creation_mode
            filters (object): filters
            variables (object): variables
            tiles (array): tiles
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            access_control_version (string): access_control_version
            name (string): name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            use_template (string): use_template
            use_dashboard (integer): use_dashboard
            delete_insights (boolean): delete_insights
            breakdown_colors (string): breakdown_colors
            data_color_theme_id (integer): data_color_theme_id
            tags (array): tags
            restriction_level (string): restriction_level
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            dashboards
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'is_shared': is_shared,
            'deleted': deleted,
            'creation_mode': creation_mode,
            'use_template': use_template,
            'use_dashboard': use_dashboard,
            'delete_insights': delete_insights,
            'filters': filters,
            'variables': variables,
            'breakdown_colors': breakdown_colors,
            'data_color_theme_id': data_color_theme_id,
            'tags': tags,
            'tiles': tiles,
            'restriction_level': restriction_level,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'access_control_version': access_control_version,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/dashboards/create_from_template_json/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def early_access_feature_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves early access feature details for a project specified by the project ID, allowing optional pagination with limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            early_access_feature
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/early_access_feature/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def early_access_feature_create(self, project_id, id, name, stage, created_at, feature_flag, description=None, documentation_url=None, feature_flag_id=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates an early access feature for the specified project and returns the created resource.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            stage (string): * `draft` - draft
        * `concept` - concept
        * `alpha` - alpha
        * `beta` - beta
        * `general-availability` - general availability
        * `archived` - archived
            created_at (string): created_at
            feature_flag (string): feature_flag
            description (string): description
            documentation_url (string): documentation_url
            feature_flag_id (integer): feature_flag_id
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            early_access_feature
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'stage': stage,
            'documentation_url': documentation_url,
            'created_at': created_at,
            'feature_flag_id': feature_flag_id,
            'feature_flag': feature_flag,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/early_access_feature/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def early_access_feature_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific early access feature for a given project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            early_access_feature
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/early_access_feature/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def early_access_feature_update(self, project_id, id, feature_flag, name, stage, created_at, description=None, documentation_url=None) -> dict[str, Any]:
        """
        Updates an early access feature for a specific project and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            feature_flag (string): feature_flag
            name (string): name
            stage (string): * `draft` - draft
        * `concept` - concept
        * `alpha` - alpha
        * `beta` - beta
        * `general-availability` - general availability
        * `archived` - archived
            created_at (string): created_at
            description (string): description
            documentation_url (string): documentation_url

        Returns:
            dict[str, Any]: API response data.

        Tags:
            early_access_feature
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'feature_flag': feature_flag,
            'name': name,
            'description': description,
            'stage': stage,
            'documentation_url': documentation_url,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/early_access_feature/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def early_access_feature_destroy(self, project_id, id) -> Any:
        """
        Deletes an early access feature from a specific project identified by the project ID and feature ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            early_access_feature
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/early_access_feature/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of environments for a specified project, allowing pagination via limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_create(self, project_id, id, uuid, organization, api_token, created_at, updated_at, ingested_event, default_modifiers, person_on_events_querying_enabled, user_access_level, effective_membership_level, has_group_types, group_types, live_events_token, product_intents, access_control_version, name=None, access_control=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_recording_url_trigger_config=None, session_recording_url_blocklist_config=None, session_recording_event_trigger_config=None, session_recording_trigger_match_type_config=None, session_replay_config=None, survey_config=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, cookieless_server_hash_mode=None, human_friendly_comparison_periods=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None, capture_dead_clicks=None, default_data_theme=None, revenue_analytics_config=None, onboarding_tasks=None) -> dict[str, Any]:
        """
        Creates a new environment for a specified project using the project ID.

        Args:
            project_id (string): project_id
            id (integer): id
            uuid (string): uuid
            organization (string): organization
            api_token (string): api_token
            created_at (string): created_at
            updated_at (string): updated_at
            ingested_event (boolean): ingested_event
            default_modifiers (object): default_modifiers
            person_on_events_querying_enabled (boolean): person_on_events_querying_enabled
            user_access_level (string): The effective access level the user has for this object
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            product_intents (string): product_intents
            access_control_version (string): access_control_version
            name (string): name
            access_control (boolean): access_control
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_recording_url_trigger_config (array): session_recording_url_trigger_config
            session_recording_url_blocklist_config (array): session_recording_url_blocklist_config
            session_recording_event_trigger_config (array): session_recording_event_trigger_config
            session_recording_trigger_match_type_config (string): session_recording_trigger_match_type_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            cookieless_server_hash_mode (string): cookieless_server_hash_mode
            human_friendly_comparison_periods (boolean): human_friendly_comparison_periods
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default
            capture_dead_clicks (boolean): capture_dead_clicks
            default_data_theme (integer): default_data_theme
            revenue_analytics_config (object): revenue_analytics_config
            onboarding_tasks (string): onboarding_tasks

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'uuid': uuid,
            'name': name,
            'access_control': access_control,
            'organization': organization,
            'project_id': project_id,
            'api_token': api_token,
            'created_at': created_at,
            'updated_at': updated_at,
            'ingested_event': ingested_event,
            'default_modifiers': default_modifiers,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'user_access_level': user_access_level,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_recording_url_trigger_config': session_recording_url_trigger_config,
            'session_recording_url_blocklist_config': session_recording_url_blocklist_config,
            'session_recording_event_trigger_config': session_recording_event_trigger_config,
            'session_recording_trigger_match_type_config': session_recording_trigger_match_type_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'cookieless_server_hash_mode': cookieless_server_hash_mode,
            'human_friendly_comparison_periods': human_friendly_comparison_periods,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'flags_persistence_default': flags_persistence_default,
            'capture_dead_clicks': capture_dead_clicks,
            'default_data_theme': default_data_theme,
            'revenue_analytics_config': revenue_analytics_config,
            'onboarding_tasks': onboarding_tasks,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'product_intents': product_intents,
            'access_control_version': access_control_version,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/environments/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details for a specific environment within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_update(self, project_id, id, uuid, organization, api_token, created_at, updated_at, ingested_event, default_modifiers, person_on_events_querying_enabled, user_access_level, effective_membership_level, has_group_types, group_types, live_events_token, product_intents, access_control_version, name=None, access_control=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_recording_url_trigger_config=None, session_recording_url_blocklist_config=None, session_recording_event_trigger_config=None, session_recording_trigger_match_type_config=None, session_replay_config=None, survey_config=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, cookieless_server_hash_mode=None, human_friendly_comparison_periods=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None, capture_dead_clicks=None, default_data_theme=None, revenue_analytics_config=None, onboarding_tasks=None) -> dict[str, Any]:
        """
        Updates an environment within a specified project and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            uuid (string): uuid
            organization (string): organization
            api_token (string): api_token
            created_at (string): created_at
            updated_at (string): updated_at
            ingested_event (boolean): ingested_event
            default_modifiers (object): default_modifiers
            person_on_events_querying_enabled (boolean): person_on_events_querying_enabled
            user_access_level (string): The effective access level the user has for this object
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            product_intents (string): product_intents
            access_control_version (string): access_control_version
            name (string): name
            access_control (boolean): access_control
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_recording_url_trigger_config (array): session_recording_url_trigger_config
            session_recording_url_blocklist_config (array): session_recording_url_blocklist_config
            session_recording_event_trigger_config (array): session_recording_event_trigger_config
            session_recording_trigger_match_type_config (string): session_recording_trigger_match_type_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            cookieless_server_hash_mode (string): cookieless_server_hash_mode
            human_friendly_comparison_periods (boolean): human_friendly_comparison_periods
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default
            capture_dead_clicks (boolean): capture_dead_clicks
            default_data_theme (integer): default_data_theme
            revenue_analytics_config (object): revenue_analytics_config
            onboarding_tasks (string): onboarding_tasks

        Returns:
            dict[str, Any]: API response data.

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'uuid': uuid,
            'name': name,
            'access_control': access_control,
            'organization': organization,
            'project_id': project_id,
            'api_token': api_token,
            'created_at': created_at,
            'updated_at': updated_at,
            'ingested_event': ingested_event,
            'default_modifiers': default_modifiers,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'user_access_level': user_access_level,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_recording_url_trigger_config': session_recording_url_trigger_config,
            'session_recording_url_blocklist_config': session_recording_url_blocklist_config,
            'session_recording_event_trigger_config': session_recording_event_trigger_config,
            'session_recording_trigger_match_type_config': session_recording_trigger_match_type_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'cookieless_server_hash_mode': cookieless_server_hash_mode,
            'human_friendly_comparison_periods': human_friendly_comparison_periods,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'flags_persistence_default': flags_persistence_default,
            'capture_dead_clicks': capture_dead_clicks,
            'default_data_theme': default_data_theme,
            'revenue_analytics_config': revenue_analytics_config,
            'onboarding_tasks': onboarding_tasks,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'product_intents': product_intents,
            'access_control_version': access_control_version,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_destroy(self, project_id, id) -> Any:
        """
        Deletes an environment associated with a specific project identified by the project ID and environment ID, returning a successful status if completed.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_activity_retrieve(self, project_id, id) -> Any:
        """
        Retrieves and returns activity information for a specific environment within a project using the provided project and environment IDs.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_authenticate_wizard_create(self, project_id, id, uuid, organization, api_token, created_at, updated_at, ingested_event, default_modifiers, person_on_events_querying_enabled, user_access_level, effective_membership_level, has_group_types, group_types, live_events_token, product_intents, access_control_version, name=None, access_control=None, app_urls=None, slack_incoming_webhook=None, anonymize_ips=None, completed_snippet_onboarding=None, test_account_filters=None, test_account_filters_default_checked=None, path_cleaning_filters=None, is_demo=None, timezone=None, data_attributes=None, person_display_name_properties=None, correlation_config=None, autocapture_opt_out=None, autocapture_exceptions_opt_in=None, autocapture_web_vitals_opt_in=None, autocapture_web_vitals_allowed_metrics=None, autocapture_exceptions_errors_to_ignore=None, capture_console_log_opt_in=None, capture_performance_opt_in=None, session_recording_opt_in=None, session_recording_sample_rate=None, session_recording_minimum_duration_milliseconds=None, session_recording_linked_flag=None, session_recording_network_payload_capture_config=None, session_recording_masking_config=None, session_recording_url_trigger_config=None, session_recording_url_blocklist_config=None, session_recording_event_trigger_config=None, session_recording_trigger_match_type_config=None, session_replay_config=None, survey_config=None, week_start_day=None, primary_dashboard=None, live_events_columns=None, recording_domains=None, cookieless_server_hash_mode=None, human_friendly_comparison_periods=None, inject_web_apps=None, extra_settings=None, modifiers=None, has_completed_onboarding_for=None, surveys_opt_in=None, heatmaps_opt_in=None, flags_persistence_default=None, capture_dead_clicks=None, default_data_theme=None, revenue_analytics_config=None, onboarding_tasks=None) -> Any:
        """
        Initiates an authentication wizard process for a specified environment within a project using the provided parameters and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            uuid (string): uuid
            organization (string): organization
            api_token (string): api_token
            created_at (string): created_at
            updated_at (string): updated_at
            ingested_event (boolean): ingested_event
            default_modifiers (object): default_modifiers
            person_on_events_querying_enabled (boolean): person_on_events_querying_enabled
            user_access_level (string): The effective access level the user has for this object
            effective_membership_level (string): effective_membership_level
            has_group_types (boolean): has_group_types
            group_types (array): group_types
            live_events_token (string): live_events_token
            product_intents (string): product_intents
            access_control_version (string): access_control_version
            name (string): name
            access_control (boolean): access_control
            app_urls (array): app_urls
            slack_incoming_webhook (string): slack_incoming_webhook
            anonymize_ips (boolean): anonymize_ips
            completed_snippet_onboarding (boolean): completed_snippet_onboarding
            test_account_filters (string): test_account_filters
            test_account_filters_default_checked (boolean): test_account_filters_default_checked
            path_cleaning_filters (string): path_cleaning_filters
            is_demo (boolean): is_demo
            timezone (string): * `Africa/Abidjan` - Africa/Abidjan
        * `Africa/Accra` - Africa/Accra
        * `Africa/Addis_Ababa` - Africa/Addis_Ababa
        * `Africa/Algiers` - Africa/Algiers
        * `Africa/Asmara` - Africa/Asmara
        * `Africa/Asmera` - Africa/Asmera
        * `Africa/Bamako` - Africa/Bamako
        * `Africa/Bangui` - Africa/Bangui
        * `Africa/Banjul` - Africa/Banjul
        * `Africa/Bissau` - Africa/Bissau
        * `Africa/Blantyre` - Africa/Blantyre
        * `Africa/Brazzaville` - Africa/Brazzaville
        * `Africa/Bujumbura` - Africa/Bujumbura
        * `Africa/Cairo` - Africa/Cairo
        * `Africa/Casablanca` - Africa/Casablanca
        * `Africa/Ceuta` - Africa/Ceuta
        * `Africa/Conakry` - Africa/Conakry
        * `Africa/Dakar` - Africa/Dakar
        * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam
        * `Africa/Djibouti` - Africa/Djibouti
        * `Africa/Douala` - Africa/Douala
        * `Africa/El_Aaiun` - Africa/El_Aaiun
        * `Africa/Freetown` - Africa/Freetown
        * `Africa/Gaborone` - Africa/Gaborone
        * `Africa/Harare` - Africa/Harare
        * `Africa/Johannesburg` - Africa/Johannesburg
        * `Africa/Juba` - Africa/Juba
        * `Africa/Kampala` - Africa/Kampala
        * `Africa/Khartoum` - Africa/Khartoum
        * `Africa/Kigali` - Africa/Kigali
        * `Africa/Kinshasa` - Africa/Kinshasa
        * `Africa/Lagos` - Africa/Lagos
        * `Africa/Libreville` - Africa/Libreville
        * `Africa/Lome` - Africa/Lome
        * `Africa/Luanda` - Africa/Luanda
        * `Africa/Lubumbashi` - Africa/Lubumbashi
        * `Africa/Lusaka` - Africa/Lusaka
        * `Africa/Malabo` - Africa/Malabo
        * `Africa/Maputo` - Africa/Maputo
        * `Africa/Maseru` - Africa/Maseru
        * `Africa/Mbabane` - Africa/Mbabane
        * `Africa/Mogadishu` - Africa/Mogadishu
        * `Africa/Monrovia` - Africa/Monrovia
        * `Africa/Nairobi` - Africa/Nairobi
        * `Africa/Ndjamena` - Africa/Ndjamena
        * `Africa/Niamey` - Africa/Niamey
        * `Africa/Nouakchott` - Africa/Nouakchott
        * `Africa/Ouagadougou` - Africa/Ouagadougou
        * `Africa/Porto-Novo` - Africa/Porto-Novo
        * `Africa/Sao_Tome` - Africa/Sao_Tome
        * `Africa/Timbuktu` - Africa/Timbuktu
        * `Africa/Tripoli` - Africa/Tripoli
        * `Africa/Tunis` - Africa/Tunis
        * `Africa/Windhoek` - Africa/Windhoek
        * `America/Adak` - America/Adak
        * `America/Anchorage` - America/Anchorage
        * `America/Anguilla` - America/Anguilla
        * `America/Antigua` - America/Antigua
        * `America/Araguaina` - America/Araguaina
        * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires
        * `America/Argentina/Catamarca` - America/Argentina/Catamarca
        * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia
        * `America/Argentina/Cordoba` - America/Argentina/Cordoba
        * `America/Argentina/Jujuy` - America/Argentina/Jujuy
        * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja
        * `America/Argentina/Mendoza` - America/Argentina/Mendoza
        * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos
        * `America/Argentina/Salta` - America/Argentina/Salta
        * `America/Argentina/San_Juan` - America/Argentina/San_Juan
        * `America/Argentina/San_Luis` - America/Argentina/San_Luis
        * `America/Argentina/Tucuman` - America/Argentina/Tucuman
        * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia
        * `America/Aruba` - America/Aruba
        * `America/Asuncion` - America/Asuncion
        * `America/Atikokan` - America/Atikokan
        * `America/Atka` - America/Atka
        * `America/Bahia` - America/Bahia
        * `America/Bahia_Banderas` - America/Bahia_Banderas
        * `America/Barbados` - America/Barbados
        * `America/Belem` - America/Belem
        * `America/Belize` - America/Belize
        * `America/Blanc-Sablon` - America/Blanc-Sablon
        * `America/Boa_Vista` - America/Boa_Vista
        * `America/Bogota` - America/Bogota
        * `America/Boise` - America/Boise
        * `America/Buenos_Aires` - America/Buenos_Aires
        * `America/Cambridge_Bay` - America/Cambridge_Bay
        * `America/Campo_Grande` - America/Campo_Grande
        * `America/Cancun` - America/Cancun
        * `America/Caracas` - America/Caracas
        * `America/Catamarca` - America/Catamarca
        * `America/Cayenne` - America/Cayenne
        * `America/Cayman` - America/Cayman
        * `America/Chicago` - America/Chicago
        * `America/Chihuahua` - America/Chihuahua
        * `America/Ciudad_Juarez` - America/Ciudad_Juarez
        * `America/Coral_Harbour` - America/Coral_Harbour
        * `America/Cordoba` - America/Cordoba
        * `America/Costa_Rica` - America/Costa_Rica
        * `America/Creston` - America/Creston
        * `America/Cuiaba` - America/Cuiaba
        * `America/Curacao` - America/Curacao
        * `America/Danmarkshavn` - America/Danmarkshavn
        * `America/Dawson` - America/Dawson
        * `America/Dawson_Creek` - America/Dawson_Creek
        * `America/Denver` - America/Denver
        * `America/Detroit` - America/Detroit
        * `America/Dominica` - America/Dominica
        * `America/Edmonton` - America/Edmonton
        * `America/Eirunepe` - America/Eirunepe
        * `America/El_Salvador` - America/El_Salvador
        * `America/Ensenada` - America/Ensenada
        * `America/Fort_Nelson` - America/Fort_Nelson
        * `America/Fort_Wayne` - America/Fort_Wayne
        * `America/Fortaleza` - America/Fortaleza
        * `America/Glace_Bay` - America/Glace_Bay
        * `America/Godthab` - America/Godthab
        * `America/Goose_Bay` - America/Goose_Bay
        * `America/Grand_Turk` - America/Grand_Turk
        * `America/Grenada` - America/Grenada
        * `America/Guadeloupe` - America/Guadeloupe
        * `America/Guatemala` - America/Guatemala
        * `America/Guayaquil` - America/Guayaquil
        * `America/Guyana` - America/Guyana
        * `America/Halifax` - America/Halifax
        * `America/Havana` - America/Havana
        * `America/Hermosillo` - America/Hermosillo
        * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis
        * `America/Indiana/Knox` - America/Indiana/Knox
        * `America/Indiana/Marengo` - America/Indiana/Marengo
        * `America/Indiana/Petersburg` - America/Indiana/Petersburg
        * `America/Indiana/Tell_City` - America/Indiana/Tell_City
        * `America/Indiana/Vevay` - America/Indiana/Vevay
        * `America/Indiana/Vincennes` - America/Indiana/Vincennes
        * `America/Indiana/Winamac` - America/Indiana/Winamac
        * `America/Indianapolis` - America/Indianapolis
        * `America/Inuvik` - America/Inuvik
        * `America/Iqaluit` - America/Iqaluit
        * `America/Jamaica` - America/Jamaica
        * `America/Jujuy` - America/Jujuy
        * `America/Juneau` - America/Juneau
        * `America/Kentucky/Louisville` - America/Kentucky/Louisville
        * `America/Kentucky/Monticello` - America/Kentucky/Monticello
        * `America/Knox_IN` - America/Knox_IN
        * `America/Kralendijk` - America/Kralendijk
        * `America/La_Paz` - America/La_Paz
        * `America/Lima` - America/Lima
        * `America/Los_Angeles` - America/Los_Angeles
        * `America/Louisville` - America/Louisville
        * `America/Lower_Princes` - America/Lower_Princes
        * `America/Maceio` - America/Maceio
        * `America/Managua` - America/Managua
        * `America/Manaus` - America/Manaus
        * `America/Marigot` - America/Marigot
        * `America/Martinique` - America/Martinique
        * `America/Matamoros` - America/Matamoros
        * `America/Mazatlan` - America/Mazatlan
        * `America/Mendoza` - America/Mendoza
        * `America/Menominee` - America/Menominee
        * `America/Merida` - America/Merida
        * `America/Metlakatla` - America/Metlakatla
        * `America/Mexico_City` - America/Mexico_City
        * `America/Miquelon` - America/Miquelon
        * `America/Moncton` - America/Moncton
        * `America/Monterrey` - America/Monterrey
        * `America/Montevideo` - America/Montevideo
        * `America/Montreal` - America/Montreal
        * `America/Montserrat` - America/Montserrat
        * `America/Nassau` - America/Nassau
        * `America/New_York` - America/New_York
        * `America/Nipigon` - America/Nipigon
        * `America/Nome` - America/Nome
        * `America/Noronha` - America/Noronha
        * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah
        * `America/North_Dakota/Center` - America/North_Dakota/Center
        * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem
        * `America/Nuuk` - America/Nuuk
        * `America/Ojinaga` - America/Ojinaga
        * `America/Panama` - America/Panama
        * `America/Pangnirtung` - America/Pangnirtung
        * `America/Paramaribo` - America/Paramaribo
        * `America/Phoenix` - America/Phoenix
        * `America/Port-au-Prince` - America/Port-au-Prince
        * `America/Port_of_Spain` - America/Port_of_Spain
        * `America/Porto_Acre` - America/Porto_Acre
        * `America/Porto_Velho` - America/Porto_Velho
        * `America/Puerto_Rico` - America/Puerto_Rico
        * `America/Punta_Arenas` - America/Punta_Arenas
        * `America/Rainy_River` - America/Rainy_River
        * `America/Rankin_Inlet` - America/Rankin_Inlet
        * `America/Recife` - America/Recife
        * `America/Regina` - America/Regina
        * `America/Resolute` - America/Resolute
        * `America/Rio_Branco` - America/Rio_Branco
        * `America/Rosario` - America/Rosario
        * `America/Santa_Isabel` - America/Santa_Isabel
        * `America/Santarem` - America/Santarem
        * `America/Santiago` - America/Santiago
        * `America/Santo_Domingo` - America/Santo_Domingo
        * `America/Sao_Paulo` - America/Sao_Paulo
        * `America/Scoresbysund` - America/Scoresbysund
        * `America/Shiprock` - America/Shiprock
        * `America/Sitka` - America/Sitka
        * `America/St_Barthelemy` - America/St_Barthelemy
        * `America/St_Johns` - America/St_Johns
        * `America/St_Kitts` - America/St_Kitts
        * `America/St_Lucia` - America/St_Lucia
        * `America/St_Thomas` - America/St_Thomas
        * `America/St_Vincent` - America/St_Vincent
        * `America/Swift_Current` - America/Swift_Current
        * `America/Tegucigalpa` - America/Tegucigalpa
        * `America/Thule` - America/Thule
        * `America/Thunder_Bay` - America/Thunder_Bay
        * `America/Tijuana` - America/Tijuana
        * `America/Toronto` - America/Toronto
        * `America/Tortola` - America/Tortola
        * `America/Vancouver` - America/Vancouver
        * `America/Virgin` - America/Virgin
        * `America/Whitehorse` - America/Whitehorse
        * `America/Winnipeg` - America/Winnipeg
        * `America/Yakutat` - America/Yakutat
        * `America/Yellowknife` - America/Yellowknife
        * `Antarctica/Casey` - Antarctica/Casey
        * `Antarctica/Davis` - Antarctica/Davis
        * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville
        * `Antarctica/Macquarie` - Antarctica/Macquarie
        * `Antarctica/Mawson` - Antarctica/Mawson
        * `Antarctica/McMurdo` - Antarctica/McMurdo
        * `Antarctica/Palmer` - Antarctica/Palmer
        * `Antarctica/Rothera` - Antarctica/Rothera
        * `Antarctica/South_Pole` - Antarctica/South_Pole
        * `Antarctica/Syowa` - Antarctica/Syowa
        * `Antarctica/Troll` - Antarctica/Troll
        * `Antarctica/Vostok` - Antarctica/Vostok
        * `Arctic/Longyearbyen` - Arctic/Longyearbyen
        * `Asia/Aden` - Asia/Aden
        * `Asia/Almaty` - Asia/Almaty
        * `Asia/Amman` - Asia/Amman
        * `Asia/Anadyr` - Asia/Anadyr
        * `Asia/Aqtau` - Asia/Aqtau
        * `Asia/Aqtobe` - Asia/Aqtobe
        * `Asia/Ashgabat` - Asia/Ashgabat
        * `Asia/Ashkhabad` - Asia/Ashkhabad
        * `Asia/Atyrau` - Asia/Atyrau
        * `Asia/Baghdad` - Asia/Baghdad
        * `Asia/Bahrain` - Asia/Bahrain
        * `Asia/Baku` - Asia/Baku
        * `Asia/Bangkok` - Asia/Bangkok
        * `Asia/Barnaul` - Asia/Barnaul
        * `Asia/Beirut` - Asia/Beirut
        * `Asia/Bishkek` - Asia/Bishkek
        * `Asia/Brunei` - Asia/Brunei
        * `Asia/Calcutta` - Asia/Calcutta
        * `Asia/Chita` - Asia/Chita
        * `Asia/Choibalsan` - Asia/Choibalsan
        * `Asia/Chongqing` - Asia/Chongqing
        * `Asia/Chungking` - Asia/Chungking
        * `Asia/Colombo` - Asia/Colombo
        * `Asia/Dacca` - Asia/Dacca
        * `Asia/Damascus` - Asia/Damascus
        * `Asia/Dhaka` - Asia/Dhaka
        * `Asia/Dili` - Asia/Dili
        * `Asia/Dubai` - Asia/Dubai
        * `Asia/Dushanbe` - Asia/Dushanbe
        * `Asia/Famagusta` - Asia/Famagusta
        * `Asia/Gaza` - Asia/Gaza
        * `Asia/Harbin` - Asia/Harbin
        * `Asia/Hebron` - Asia/Hebron
        * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh
        * `Asia/Hong_Kong` - Asia/Hong_Kong
        * `Asia/Hovd` - Asia/Hovd
        * `Asia/Irkutsk` - Asia/Irkutsk
        * `Asia/Istanbul` - Asia/Istanbul
        * `Asia/Jakarta` - Asia/Jakarta
        * `Asia/Jayapura` - Asia/Jayapura
        * `Asia/Jerusalem` - Asia/Jerusalem
        * `Asia/Kabul` - Asia/Kabul
        * `Asia/Kamchatka` - Asia/Kamchatka
        * `Asia/Karachi` - Asia/Karachi
        * `Asia/Kashgar` - Asia/Kashgar
        * `Asia/Kathmandu` - Asia/Kathmandu
        * `Asia/Katmandu` - Asia/Katmandu
        * `Asia/Khandyga` - Asia/Khandyga
        * `Asia/Kolkata` - Asia/Kolkata
        * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk
        * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur
        * `Asia/Kuching` - Asia/Kuching
        * `Asia/Kuwait` - Asia/Kuwait
        * `Asia/Macao` - Asia/Macao
        * `Asia/Macau` - Asia/Macau
        * `Asia/Magadan` - Asia/Magadan
        * `Asia/Makassar` - Asia/Makassar
        * `Asia/Manila` - Asia/Manila
        * `Asia/Muscat` - Asia/Muscat
        * `Asia/Nicosia` - Asia/Nicosia
        * `Asia/Novokuznetsk` - Asia/Novokuznetsk
        * `Asia/Novosibirsk` - Asia/Novosibirsk
        * `Asia/Omsk` - Asia/Omsk
        * `Asia/Oral` - Asia/Oral
        * `Asia/Phnom_Penh` - Asia/Phnom_Penh
        * `Asia/Pontianak` - Asia/Pontianak
        * `Asia/Pyongyang` - Asia/Pyongyang
        * `Asia/Qatar` - Asia/Qatar
        * `Asia/Qostanay` - Asia/Qostanay
        * `Asia/Qyzylorda` - Asia/Qyzylorda
        * `Asia/Rangoon` - Asia/Rangoon
        * `Asia/Riyadh` - Asia/Riyadh
        * `Asia/Saigon` - Asia/Saigon
        * `Asia/Sakhalin` - Asia/Sakhalin
        * `Asia/Samarkand` - Asia/Samarkand
        * `Asia/Seoul` - Asia/Seoul
        * `Asia/Shanghai` - Asia/Shanghai
        * `Asia/Singapore` - Asia/Singapore
        * `Asia/Srednekolymsk` - Asia/Srednekolymsk
        * `Asia/Taipei` - Asia/Taipei
        * `Asia/Tashkent` - Asia/Tashkent
        * `Asia/Tbilisi` - Asia/Tbilisi
        * `Asia/Tehran` - Asia/Tehran
        * `Asia/Tel_Aviv` - Asia/Tel_Aviv
        * `Asia/Thimbu` - Asia/Thimbu
        * `Asia/Thimphu` - Asia/Thimphu
        * `Asia/Tokyo` - Asia/Tokyo
        * `Asia/Tomsk` - Asia/Tomsk
        * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang
        * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar
        * `Asia/Ulan_Bator` - Asia/Ulan_Bator
        * `Asia/Urumqi` - Asia/Urumqi
        * `Asia/Ust-Nera` - Asia/Ust-Nera
        * `Asia/Vientiane` - Asia/Vientiane
        * `Asia/Vladivostok` - Asia/Vladivostok
        * `Asia/Yakutsk` - Asia/Yakutsk
        * `Asia/Yangon` - Asia/Yangon
        * `Asia/Yekaterinburg` - Asia/Yekaterinburg
        * `Asia/Yerevan` - Asia/Yerevan
        * `Atlantic/Azores` - Atlantic/Azores
        * `Atlantic/Bermuda` - Atlantic/Bermuda
        * `Atlantic/Canary` - Atlantic/Canary
        * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde
        * `Atlantic/Faeroe` - Atlantic/Faeroe
        * `Atlantic/Faroe` - Atlantic/Faroe
        * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen
        * `Atlantic/Madeira` - Atlantic/Madeira
        * `Atlantic/Reykjavik` - Atlantic/Reykjavik
        * `Atlantic/South_Georgia` - Atlantic/South_Georgia
        * `Atlantic/St_Helena` - Atlantic/St_Helena
        * `Atlantic/Stanley` - Atlantic/Stanley
        * `Australia/ACT` - Australia/ACT
        * `Australia/Adelaide` - Australia/Adelaide
        * `Australia/Brisbane` - Australia/Brisbane
        * `Australia/Broken_Hill` - Australia/Broken_Hill
        * `Australia/Canberra` - Australia/Canberra
        * `Australia/Currie` - Australia/Currie
        * `Australia/Darwin` - Australia/Darwin
        * `Australia/Eucla` - Australia/Eucla
        * `Australia/Hobart` - Australia/Hobart
        * `Australia/LHI` - Australia/LHI
        * `Australia/Lindeman` - Australia/Lindeman
        * `Australia/Lord_Howe` - Australia/Lord_Howe
        * `Australia/Melbourne` - Australia/Melbourne
        * `Australia/NSW` - Australia/NSW
        * `Australia/North` - Australia/North
        * `Australia/Perth` - Australia/Perth
        * `Australia/Queensland` - Australia/Queensland
        * `Australia/South` - Australia/South
        * `Australia/Sydney` - Australia/Sydney
        * `Australia/Tasmania` - Australia/Tasmania
        * `Australia/Victoria` - Australia/Victoria
        * `Australia/West` - Australia/West
        * `Australia/Yancowinna` - Australia/Yancowinna
        * `Brazil/Acre` - Brazil/Acre
        * `Brazil/DeNoronha` - Brazil/DeNoronha
        * `Brazil/East` - Brazil/East
        * `Brazil/West` - Brazil/West
        * `CET` - CET
        * `CST6CDT` - CST6CDT
        * `Canada/Atlantic` - Canada/Atlantic
        * `Canada/Central` - Canada/Central
        * `Canada/Eastern` - Canada/Eastern
        * `Canada/Mountain` - Canada/Mountain
        * `Canada/Newfoundland` - Canada/Newfoundland
        * `Canada/Pacific` - Canada/Pacific
        * `Canada/Saskatchewan` - Canada/Saskatchewan
        * `Canada/Yukon` - Canada/Yukon
        * `Chile/Continental` - Chile/Continental
        * `Chile/EasterIsland` - Chile/EasterIsland
        * `Cuba` - Cuba
        * `EET` - EET
        * `EST` - EST
        * `EST5EDT` - EST5EDT
        * `Egypt` - Egypt
        * `Eire` - Eire
        * `Etc/GMT` - Etc/GMT
        * `Etc/GMT+0` - Etc/GMT+0
        * `Etc/GMT+1` - Etc/GMT+1
        * `Etc/GMT+10` - Etc/GMT+10
        * `Etc/GMT+11` - Etc/GMT+11
        * `Etc/GMT+12` - Etc/GMT+12
        * `Etc/GMT+2` - Etc/GMT+2
        * `Etc/GMT+3` - Etc/GMT+3
        * `Etc/GMT+4` - Etc/GMT+4
        * `Etc/GMT+5` - Etc/GMT+5
        * `Etc/GMT+6` - Etc/GMT+6
        * `Etc/GMT+7` - Etc/GMT+7
        * `Etc/GMT+8` - Etc/GMT+8
        * `Etc/GMT+9` - Etc/GMT+9
        * `Etc/GMT-0` - Etc/GMT-0
        * `Etc/GMT-1` - Etc/GMT-1
        * `Etc/GMT-10` - Etc/GMT-10
        * `Etc/GMT-11` - Etc/GMT-11
        * `Etc/GMT-12` - Etc/GMT-12
        * `Etc/GMT-13` - Etc/GMT-13
        * `Etc/GMT-14` - Etc/GMT-14
        * `Etc/GMT-2` - Etc/GMT-2
        * `Etc/GMT-3` - Etc/GMT-3
        * `Etc/GMT-4` - Etc/GMT-4
        * `Etc/GMT-5` - Etc/GMT-5
        * `Etc/GMT-6` - Etc/GMT-6
        * `Etc/GMT-7` - Etc/GMT-7
        * `Etc/GMT-8` - Etc/GMT-8
        * `Etc/GMT-9` - Etc/GMT-9
        * `Etc/GMT0` - Etc/GMT0
        * `Etc/Greenwich` - Etc/Greenwich
        * `Etc/UCT` - Etc/UCT
        * `Etc/UTC` - Etc/UTC
        * `Etc/Universal` - Etc/Universal
        * `Etc/Zulu` - Etc/Zulu
        * `Europe/Amsterdam` - Europe/Amsterdam
        * `Europe/Andorra` - Europe/Andorra
        * `Europe/Astrakhan` - Europe/Astrakhan
        * `Europe/Athens` - Europe/Athens
        * `Europe/Belfast` - Europe/Belfast
        * `Europe/Belgrade` - Europe/Belgrade
        * `Europe/Berlin` - Europe/Berlin
        * `Europe/Bratislava` - Europe/Bratislava
        * `Europe/Brussels` - Europe/Brussels
        * `Europe/Bucharest` - Europe/Bucharest
        * `Europe/Budapest` - Europe/Budapest
        * `Europe/Busingen` - Europe/Busingen
        * `Europe/Chisinau` - Europe/Chisinau
        * `Europe/Copenhagen` - Europe/Copenhagen
        * `Europe/Dublin` - Europe/Dublin
        * `Europe/Gibraltar` - Europe/Gibraltar
        * `Europe/Guernsey` - Europe/Guernsey
        * `Europe/Helsinki` - Europe/Helsinki
        * `Europe/Isle_of_Man` - Europe/Isle_of_Man
        * `Europe/Istanbul` - Europe/Istanbul
        * `Europe/Jersey` - Europe/Jersey
        * `Europe/Kaliningrad` - Europe/Kaliningrad
        * `Europe/Kiev` - Europe/Kiev
        * `Europe/Kirov` - Europe/Kirov
        * `Europe/Kyiv` - Europe/Kyiv
        * `Europe/Lisbon` - Europe/Lisbon
        * `Europe/Ljubljana` - Europe/Ljubljana
        * `Europe/London` - Europe/London
        * `Europe/Luxembourg` - Europe/Luxembourg
        * `Europe/Madrid` - Europe/Madrid
        * `Europe/Malta` - Europe/Malta
        * `Europe/Mariehamn` - Europe/Mariehamn
        * `Europe/Minsk` - Europe/Minsk
        * `Europe/Monaco` - Europe/Monaco
        * `Europe/Moscow` - Europe/Moscow
        * `Europe/Nicosia` - Europe/Nicosia
        * `Europe/Oslo` - Europe/Oslo
        * `Europe/Paris` - Europe/Paris
        * `Europe/Podgorica` - Europe/Podgorica
        * `Europe/Prague` - Europe/Prague
        * `Europe/Riga` - Europe/Riga
        * `Europe/Rome` - Europe/Rome
        * `Europe/Samara` - Europe/Samara
        * `Europe/San_Marino` - Europe/San_Marino
        * `Europe/Sarajevo` - Europe/Sarajevo
        * `Europe/Saratov` - Europe/Saratov
        * `Europe/Simferopol` - Europe/Simferopol
        * `Europe/Skopje` - Europe/Skopje
        * `Europe/Sofia` - Europe/Sofia
        * `Europe/Stockholm` - Europe/Stockholm
        * `Europe/Tallinn` - Europe/Tallinn
        * `Europe/Tirane` - Europe/Tirane
        * `Europe/Tiraspol` - Europe/Tiraspol
        * `Europe/Ulyanovsk` - Europe/Ulyanovsk
        * `Europe/Uzhgorod` - Europe/Uzhgorod
        * `Europe/Vaduz` - Europe/Vaduz
        * `Europe/Vatican` - Europe/Vatican
        * `Europe/Vienna` - Europe/Vienna
        * `Europe/Vilnius` - Europe/Vilnius
        * `Europe/Volgograd` - Europe/Volgograd
        * `Europe/Warsaw` - Europe/Warsaw
        * `Europe/Zagreb` - Europe/Zagreb
        * `Europe/Zaporozhye` - Europe/Zaporozhye
        * `Europe/Zurich` - Europe/Zurich
        * `GB` - GB
        * `GB-Eire` - GB-Eire
        * `GMT` - GMT
        * `GMT+0` - GMT+0
        * `GMT-0` - GMT-0
        * `GMT0` - GMT0
        * `Greenwich` - Greenwich
        * `HST` - HST
        * `Hongkong` - Hongkong
        * `Iceland` - Iceland
        * `Indian/Antananarivo` - Indian/Antananarivo
        * `Indian/Chagos` - Indian/Chagos
        * `Indian/Christmas` - Indian/Christmas
        * `Indian/Cocos` - Indian/Cocos
        * `Indian/Comoro` - Indian/Comoro
        * `Indian/Kerguelen` - Indian/Kerguelen
        * `Indian/Mahe` - Indian/Mahe
        * `Indian/Maldives` - Indian/Maldives
        * `Indian/Mauritius` - Indian/Mauritius
        * `Indian/Mayotte` - Indian/Mayotte
        * `Indian/Reunion` - Indian/Reunion
        * `Iran` - Iran
        * `Israel` - Israel
        * `Jamaica` - Jamaica
        * `Japan` - Japan
        * `Kwajalein` - Kwajalein
        * `Libya` - Libya
        * `MET` - MET
        * `MST` - MST
        * `MST7MDT` - MST7MDT
        * `Mexico/BajaNorte` - Mexico/BajaNorte
        * `Mexico/BajaSur` - Mexico/BajaSur
        * `Mexico/General` - Mexico/General
        * `NZ` - NZ
        * `NZ-CHAT` - NZ-CHAT
        * `Navajo` - Navajo
        * `PRC` - PRC
        * `PST8PDT` - PST8PDT
        * `Pacific/Apia` - Pacific/Apia
        * `Pacific/Auckland` - Pacific/Auckland
        * `Pacific/Bougainville` - Pacific/Bougainville
        * `Pacific/Chatham` - Pacific/Chatham
        * `Pacific/Chuuk` - Pacific/Chuuk
        * `Pacific/Easter` - Pacific/Easter
        * `Pacific/Efate` - Pacific/Efate
        * `Pacific/Enderbury` - Pacific/Enderbury
        * `Pacific/Fakaofo` - Pacific/Fakaofo
        * `Pacific/Fiji` - Pacific/Fiji
        * `Pacific/Funafuti` - Pacific/Funafuti
        * `Pacific/Galapagos` - Pacific/Galapagos
        * `Pacific/Gambier` - Pacific/Gambier
        * `Pacific/Guadalcanal` - Pacific/Guadalcanal
        * `Pacific/Guam` - Pacific/Guam
        * `Pacific/Honolulu` - Pacific/Honolulu
        * `Pacific/Johnston` - Pacific/Johnston
        * `Pacific/Kanton` - Pacific/Kanton
        * `Pacific/Kiritimati` - Pacific/Kiritimati
        * `Pacific/Kosrae` - Pacific/Kosrae
        * `Pacific/Kwajalein` - Pacific/Kwajalein
        * `Pacific/Majuro` - Pacific/Majuro
        * `Pacific/Marquesas` - Pacific/Marquesas
        * `Pacific/Midway` - Pacific/Midway
        * `Pacific/Nauru` - Pacific/Nauru
        * `Pacific/Niue` - Pacific/Niue
        * `Pacific/Norfolk` - Pacific/Norfolk
        * `Pacific/Noumea` - Pacific/Noumea
        * `Pacific/Pago_Pago` - Pacific/Pago_Pago
        * `Pacific/Palau` - Pacific/Palau
        * `Pacific/Pitcairn` - Pacific/Pitcairn
        * `Pacific/Pohnpei` - Pacific/Pohnpei
        * `Pacific/Ponape` - Pacific/Ponape
        * `Pacific/Port_Moresby` - Pacific/Port_Moresby
        * `Pacific/Rarotonga` - Pacific/Rarotonga
        * `Pacific/Saipan` - Pacific/Saipan
        * `Pacific/Samoa` - Pacific/Samoa
        * `Pacific/Tahiti` - Pacific/Tahiti
        * `Pacific/Tarawa` - Pacific/Tarawa
        * `Pacific/Tongatapu` - Pacific/Tongatapu
        * `Pacific/Truk` - Pacific/Truk
        * `Pacific/Wake` - Pacific/Wake
        * `Pacific/Wallis` - Pacific/Wallis
        * `Pacific/Yap` - Pacific/Yap
        * `Poland` - Poland
        * `Portugal` - Portugal
        * `ROC` - ROC
        * `ROK` - ROK
        * `Singapore` - Singapore
        * `Turkey` - Turkey
        * `UCT` - UCT
        * `US/Alaska` - US/Alaska
        * `US/Aleutian` - US/Aleutian
        * `US/Arizona` - US/Arizona
        * `US/Central` - US/Central
        * `US/East-Indiana` - US/East-Indiana
        * `US/Eastern` - US/Eastern
        * `US/Hawaii` - US/Hawaii
        * `US/Indiana-Starke` - US/Indiana-Starke
        * `US/Michigan` - US/Michigan
        * `US/Mountain` - US/Mountain
        * `US/Pacific` - US/Pacific
        * `US/Samoa` - US/Samoa
        * `UTC` - UTC
        * `Universal` - Universal
        * `W-SU` - W-SU
        * `WET` - WET
        * `Zulu` - Zulu
            data_attributes (string): data_attributes
            person_display_name_properties (array): person_display_name_properties
            correlation_config (string): correlation_config
            autocapture_opt_out (boolean): autocapture_opt_out
            autocapture_exceptions_opt_in (boolean): autocapture_exceptions_opt_in
            autocapture_web_vitals_opt_in (boolean): autocapture_web_vitals_opt_in
            autocapture_web_vitals_allowed_metrics (string): autocapture_web_vitals_allowed_metrics
            autocapture_exceptions_errors_to_ignore (string): autocapture_exceptions_errors_to_ignore
            capture_console_log_opt_in (boolean): capture_console_log_opt_in
            capture_performance_opt_in (boolean): capture_performance_opt_in
            session_recording_opt_in (boolean): session_recording_opt_in
            session_recording_sample_rate (string): session_recording_sample_rate
            session_recording_minimum_duration_milliseconds (integer): session_recording_minimum_duration_milliseconds
            session_recording_linked_flag (string): session_recording_linked_flag
            session_recording_network_payload_capture_config (string): session_recording_network_payload_capture_config
            session_recording_masking_config (string): session_recording_masking_config
            session_recording_url_trigger_config (array): session_recording_url_trigger_config
            session_recording_url_blocklist_config (array): session_recording_url_blocklist_config
            session_recording_event_trigger_config (array): session_recording_event_trigger_config
            session_recording_trigger_match_type_config (string): session_recording_trigger_match_type_config
            session_replay_config (string): session_replay_config
            survey_config (string): survey_config
            week_start_day (string): week_start_day
            primary_dashboard (integer): primary_dashboard
            live_events_columns (array): live_events_columns
            recording_domains (array): recording_domains
            cookieless_server_hash_mode (string): cookieless_server_hash_mode
            human_friendly_comparison_periods (boolean): human_friendly_comparison_periods
            inject_web_apps (boolean): inject_web_apps
            extra_settings (string): extra_settings
            modifiers (string): modifiers
            has_completed_onboarding_for (string): has_completed_onboarding_for
            surveys_opt_in (boolean): surveys_opt_in
            heatmaps_opt_in (boolean): heatmaps_opt_in
            flags_persistence_default (boolean): flags_persistence_default
            capture_dead_clicks (boolean): capture_dead_clicks
            default_data_theme (integer): default_data_theme
            revenue_analytics_config (object): revenue_analytics_config
            onboarding_tasks (string): onboarding_tasks

        Returns:
            Any: No response body

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'uuid': uuid,
            'name': name,
            'access_control': access_control,
            'organization': organization,
            'project_id': project_id,
            'api_token': api_token,
            'created_at': created_at,
            'updated_at': updated_at,
            'ingested_event': ingested_event,
            'default_modifiers': default_modifiers,
            'person_on_events_querying_enabled': person_on_events_querying_enabled,
            'user_access_level': user_access_level,
            'app_urls': app_urls,
            'slack_incoming_webhook': slack_incoming_webhook,
            'anonymize_ips': anonymize_ips,
            'completed_snippet_onboarding': completed_snippet_onboarding,
            'test_account_filters': test_account_filters,
            'test_account_filters_default_checked': test_account_filters_default_checked,
            'path_cleaning_filters': path_cleaning_filters,
            'is_demo': is_demo,
            'timezone': timezone,
            'data_attributes': data_attributes,
            'person_display_name_properties': person_display_name_properties,
            'correlation_config': correlation_config,
            'autocapture_opt_out': autocapture_opt_out,
            'autocapture_exceptions_opt_in': autocapture_exceptions_opt_in,
            'autocapture_web_vitals_opt_in': autocapture_web_vitals_opt_in,
            'autocapture_web_vitals_allowed_metrics': autocapture_web_vitals_allowed_metrics,
            'autocapture_exceptions_errors_to_ignore': autocapture_exceptions_errors_to_ignore,
            'capture_console_log_opt_in': capture_console_log_opt_in,
            'capture_performance_opt_in': capture_performance_opt_in,
            'session_recording_opt_in': session_recording_opt_in,
            'session_recording_sample_rate': session_recording_sample_rate,
            'session_recording_minimum_duration_milliseconds': session_recording_minimum_duration_milliseconds,
            'session_recording_linked_flag': session_recording_linked_flag,
            'session_recording_network_payload_capture_config': session_recording_network_payload_capture_config,
            'session_recording_masking_config': session_recording_masking_config,
            'session_recording_url_trigger_config': session_recording_url_trigger_config,
            'session_recording_url_blocklist_config': session_recording_url_blocklist_config,
            'session_recording_event_trigger_config': session_recording_event_trigger_config,
            'session_recording_trigger_match_type_config': session_recording_trigger_match_type_config,
            'session_replay_config': session_replay_config,
            'survey_config': survey_config,
            'week_start_day': week_start_day,
            'primary_dashboard': primary_dashboard,
            'live_events_columns': live_events_columns,
            'recording_domains': recording_domains,
            'cookieless_server_hash_mode': cookieless_server_hash_mode,
            'human_friendly_comparison_periods': human_friendly_comparison_periods,
            'inject_web_apps': inject_web_apps,
            'extra_settings': extra_settings,
            'modifiers': modifiers,
            'has_completed_onboarding_for': has_completed_onboarding_for,
            'surveys_opt_in': surveys_opt_in,
            'heatmaps_opt_in': heatmaps_opt_in,
            'flags_persistence_default': flags_persistence_default,
            'capture_dead_clicks': capture_dead_clicks,
            'default_data_theme': default_data_theme,
            'revenue_analytics_config': revenue_analytics_config,
            'onboarding_tasks': onboarding_tasks,
            'effective_membership_level': effective_membership_level,
            'has_group_types': has_group_types,
            'group_types': group_types,
            'live_events_token': live_events_token,
            'product_intents': product_intents,
            'access_control_version': access_control_version,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/authenticate_wizard/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def environments_event_ingestion_restrictions_retrieve(self, project_id, id) -> Any:
        """
        Retrieves event ingestion restrictions configured for a specific environment within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/event_ingestion_restrictions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def environments_is_generating_demo_data_retrieve(self, project_id, id) -> Any:
        """
        Checks if demo data is being generated for a specific environment in a project using the "GET" method and returns a status.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            environments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/environments/{id}/is_generating_demo_data/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def event_definitions_retrieve(self, project_id) -> Any:
        """
        Retrieves event definitions associated with a specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            event_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/event_definitions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_definitions_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves the details of a specific event definition within a project by project and event definition IDs.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            event_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/event_definitions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_definitions_update(self, project_id, id) -> Any:
        """
        Updates an event definition for a specified project by replacing it with new data using the HTTP PUT method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            event_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/event_definitions/{id}/"
        query_params = {}
        response = self._put(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_definitions_partial_update(self, project_id, id) -> Any:
        """
        Updates an existing event definition for a specific project using the "PATCH" method, modifying selected properties of the event definition resource identified by its ID within the project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            event_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/event_definitions/{id}/"
        query_params = {}
        response = self._patch(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def event_definitions_destroy(self, project_id, id) -> Any:
        """
        Deletes an event definition in a specified project using the provided project ID and event definition ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            event_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/event_definitions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def events_list(self, project_id, after=None, before=None, distinct_id=None, event=None, format=None, limit=None, offset=None, person_id=None, properties=None, select=None, where=None) -> dict[str, Any]:
        """
        Retrieves a list of events for a specific project, allowing filtering by various parameters such as date range, distinct IDs, event types, and more, using the GET method.

        Args:
            project_id (string): project_id
            after (string): Only return events with a timestamp after this time.
            before (string): Only return events with a timestamp before this time.
            distinct_id (integer): Filter list by distinct id.
            event (string): Filter list by event. For example `user sign up` or `$pageview`.
            format (string): Specifies the output format for event data returned in the response.
            limit (integer): The maximum number of results to return
            offset (integer): The initial index from which to return the results.
            person_id (integer): Filter list by person id.
            properties (array): Filter events by event property, person property, cohort, groups and more.
            select (array): (Experimental) JSON-serialized array of HogQL expressions to return
            where (array): (Experimental) JSON-serialized array of HogQL expressions that must pass

        Returns:
            dict[str, Any]: API response data.

        Tags:
            events
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/events/"
        query_params = {k: v for k, v in [('after', after), ('before', before), ('distinct_id', distinct_id), ('event', event), ('format', format), ('limit', limit), ('offset', offset), ('person_id', person_id), ('properties', properties), ('select', select), ('where', where)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def events_retrieve(self, project_id, id, format=None) -> dict[str, Any]:
        """
        Retrieves a specific event by ID in a specified project, optionally formatting the response.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format for the event data.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            events
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/events/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def events_values_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves event values for a specified project using the project ID and optionally formats the output based on the provided format parameter.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for retrieving event values for a project.

        Returns:
            Any: No response body

        Tags:
            events
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/events/values/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_holdouts_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of experiment holdouts for a specific project, allowing for pagination with optional limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_holdouts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_holdouts/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_holdouts_create(self, project_id, id, name, created_by, created_at, updated_at, description=None, filters=None) -> dict[str, Any]:
        """
        Creates an experiment holdout for a specified project, excluding a subset of users from experimentation to measure the overall impact of experiments.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_holdouts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'filters': filters,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiment_holdouts/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_holdouts_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details of a specific experiment holdout group within a project for analyzing cumulative feature impact.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_holdouts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_holdouts/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_holdouts_update(self, project_id, id, name, created_by, created_at, updated_at, description=None, filters=None) -> dict[str, Any]:
        """
        Updates an existing experiment holdout with the specified ID in a project using the PUT method.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            filters (string): filters

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_holdouts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'filters': filters,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiment_holdouts/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def experiment_holdouts_destroy(self, project_id, id) -> Any:
        """
        Deletes an experiment holdout for a specified project, identified by project ID and holdout ID, using the DELETE method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            experiment_holdouts
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_holdouts/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_saved_metrics_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of saved experiment metrics for the specified project.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_saved_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_saved_metrics/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_saved_metrics_create(self, project_id, id, name, query, created_by, created_at, updated_at, description=None, tags=None) -> dict[str, Any]:
        """
        Saves experiment metrics for a specified project and returns a success status upon creation.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            query (string): query
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            tags (array): tags

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_saved_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'query': query,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'tags': tags,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiment_saved_metrics/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_saved_metrics_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a saved metric from an experiment by its ID within a specified project using the API.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_saved_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_saved_metrics/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiment_saved_metrics_update(self, project_id, id, name, query, created_by, created_at, updated_at, description=None, tags=None) -> dict[str, Any]:
        """
        Updates the saved experiment metrics for a specified project and experiment ID.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            query (string): query
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            tags (array): tags

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiment_saved_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'query': query,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'tags': tags,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiment_saved_metrics/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def experiment_saved_metrics_destroy(self, project_id, id) -> Any:
        """
        Deletes an experiment saved metric by ID in a specified project using the DELETE method, returning a successful response if the operation is completed.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            experiment_saved_metrics
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiment_saved_metrics/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of experiments for a specified project using the provided project ID, with optional parameters for limiting and offsetting the results.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiments/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_create(self, project_id, id, name, feature_flag_key, feature_flag, holdout, exposure_cohort, saved_metrics, created_by, created_at, updated_at, description=None, start_date=None, end_date=None, holdout_id=None, parameters=None, secondary_metrics=None, saved_metrics_ids=None, filters=None, archived=None, type=None, exposure_criteria=None, metrics=None, metrics_secondary=None, stats_config=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new experiment within the specified project and returns a success status upon creation.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            feature_flag_key (string): feature_flag_key
            feature_flag (string): feature_flag
            holdout (string): holdout
            exposure_cohort (integer): exposure_cohort
            saved_metrics (array): saved_metrics
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            start_date (string): start_date
            end_date (string): end_date
            holdout_id (integer): holdout_id
            parameters (string): parameters
            secondary_metrics (string): secondary_metrics
            saved_metrics_ids (array): saved_metrics_ids
            filters (string): filters
            archived (boolean): archived
            type (string): type
            exposure_criteria (string): exposure_criteria
            metrics (string): metrics
            metrics_secondary (string): metrics_secondary
            stats_config (string): stats_config
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'start_date': start_date,
            'end_date': end_date,
            'feature_flag_key': feature_flag_key,
            'feature_flag': feature_flag,
            'holdout': holdout,
            'holdout_id': holdout_id,
            'exposure_cohort': exposure_cohort,
            'parameters': parameters,
            'secondary_metrics': secondary_metrics,
            'saved_metrics': saved_metrics,
            'saved_metrics_ids': saved_metrics_ids,
            'filters': filters,
            'archived': archived,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'type': type,
            'exposure_criteria': exposure_criteria,
            'metrics': metrics,
            'metrics_secondary': metrics_secondary,
            'stats_config': stats_config,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiments/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details about a specific experiment within a project using the project ID and experiment ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiments/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_update(self, project_id, id, name, feature_flag_key, feature_flag, holdout, exposure_cohort, saved_metrics, created_by, created_at, updated_at, description=None, start_date=None, end_date=None, holdout_id=None, parameters=None, secondary_metrics=None, saved_metrics_ids=None, filters=None, archived=None, type=None, exposure_criteria=None, metrics=None, metrics_secondary=None, stats_config=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates or replaces an experiment in a project using the PUT method, specifying the project ID and experiment ID in the path.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            feature_flag_key (string): feature_flag_key
            feature_flag (string): feature_flag
            holdout (string): holdout
            exposure_cohort (integer): exposure_cohort
            saved_metrics (array): saved_metrics
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            start_date (string): start_date
            end_date (string): end_date
            holdout_id (integer): holdout_id
            parameters (string): parameters
            secondary_metrics (string): secondary_metrics
            saved_metrics_ids (array): saved_metrics_ids
            filters (string): filters
            archived (boolean): archived
            type (string): type
            exposure_criteria (string): exposure_criteria
            metrics (string): metrics
            metrics_secondary (string): metrics_secondary
            stats_config (string): stats_config
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'start_date': start_date,
            'end_date': end_date,
            'feature_flag_key': feature_flag_key,
            'feature_flag': feature_flag,
            'holdout': holdout,
            'holdout_id': holdout_id,
            'exposure_cohort': exposure_cohort,
            'parameters': parameters,
            'secondary_metrics': secondary_metrics,
            'saved_metrics': saved_metrics,
            'saved_metrics_ids': saved_metrics_ids,
            'filters': filters,
            'archived': archived,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'type': type,
            'exposure_criteria': exposure_criteria,
            'metrics': metrics,
            'metrics_secondary': metrics_secondary,
            'stats_config': stats_config,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiments/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def experiments_destroy(self, project_id, id) -> Any:
        """
        Deletes an experiment within a specified project and returns no content upon successful deletion.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiments/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_create_exposure_cohort_for_experiment_create(self, project_id, id, name, feature_flag_key, feature_flag, holdout, exposure_cohort, saved_metrics, created_by, created_at, updated_at, description=None, start_date=None, end_date=None, holdout_id=None, parameters=None, secondary_metrics=None, saved_metrics_ids=None, filters=None, archived=None, type=None, exposure_criteria=None, metrics=None, metrics_secondary=None, stats_config=None, _create_in_folder=None) -> Any:
        """
        Creates an exposure cohort for a specific experiment, linking it to the specified project and experiment identifiers, using the POST method.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            feature_flag_key (string): feature_flag_key
            feature_flag (string): feature_flag
            holdout (string): holdout
            exposure_cohort (integer): exposure_cohort
            saved_metrics (array): saved_metrics
            created_by (string): created_by
            created_at (string): created_at
            updated_at (string): updated_at
            description (string): description
            start_date (string): start_date
            end_date (string): end_date
            holdout_id (integer): holdout_id
            parameters (string): parameters
            secondary_metrics (string): secondary_metrics
            saved_metrics_ids (array): saved_metrics_ids
            filters (string): filters
            archived (boolean): archived
            type (string): type
            exposure_criteria (string): exposure_criteria
            metrics (string): metrics
            metrics_secondary (string): metrics_secondary
            stats_config (string): stats_config
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'start_date': start_date,
            'end_date': end_date,
            'feature_flag_key': feature_flag_key,
            'feature_flag': feature_flag,
            'holdout': holdout,
            'holdout_id': holdout_id,
            'exposure_cohort': exposure_cohort,
            'parameters': parameters,
            'secondary_metrics': secondary_metrics,
            'saved_metrics': saved_metrics,
            'saved_metrics_ids': saved_metrics_ids,
            'filters': filters,
            'archived': archived,
            'created_by': created_by,
            'created_at': created_at,
            'updated_at': updated_at,
            'type': type,
            'exposure_criteria': exposure_criteria,
            'metrics': metrics,
            'metrics_secondary': metrics_secondary,
            'stats_config': stats_config,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/experiments/{id}/create_exposure_cohort_for_experiment/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def experiments_requires_flag_implementation_retrieve(self, project_id) -> Any:
        """
        Retrieves a list of experiments requiring flag implementation for the specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/experiments/requires_flag_implementation/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_list(self, project_id) -> list[Any]:
        """
        Retrieves a list of explicit members for a project specified by the project ID using the GET method.

        Args:
            project_id (string): project_id

        Returns:
            list[Any]: API response data.

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_create(self, project_id, id, parent_level, parent_membership_id, joined_at, updated_at, user, user_uuid, effective_level, level=None) -> dict[str, Any]:
        """
        Adds explicit members to a project specified by the project ID using the API.

        Args:
            project_id (string): project_id
            id (string): id
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.
            level (string): level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_retrieve(self, project_id, parent_membership__user__uuid) -> dict[str, Any]:
        """
        Retrieves explicit membership details for a specific user within a designated project.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_update(self, project_id, parent_membership__user__uuid, id, parent_level, parent_membership_id, joined_at, updated_at, user, user_uuid, effective_level, level=None) -> dict[str, Any]:
        """
        Updates an explicit member belonging to a specified project using the PUT method by modifying the membership details associated with a user identified by their UUID.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid
            id (string): id
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.
            level (string): level

        Returns:
            dict[str, Any]: API response data.

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_partial_update(self, project_id, parent_membership__user__uuid, id=None, level=None, parent_level=None, parent_membership_id=None, joined_at=None, updated_at=None, user=None, user_uuid=None, effective_level=None) -> dict[str, Any]:
        """
        Updates the membership details of a specific user within a project using the provided UUID and project ID.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid
            id (string): id
            level (string): level
            parent_level (integer): parent_level
            parent_membership_id (string): parent_membership_id
            joined_at (string): joined_at
            updated_at (string): updated_at
            user (string): user
            user_uuid (string): user_uuid
            effective_level (string): If organization level is higher than project level, then that takes precedence over explicit project level.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        request_body = {
            'id': id,
            'level': level,
            'parent_level': parent_level,
            'parent_membership_id': parent_membership_id,
            'joined_at': joined_at,
            'updated_at': updated_at,
            'user': user,
            'user_uuid': user_uuid,
            'effective_level': effective_level,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def explicit_members_destroy(self, project_id, parent_membership__user__uuid) -> Any:
        """
        Removes an explicit member from a project using the provided user UUID and project ID.

        Args:
            project_id (string): project_id
            parent_membership__user__uuid (string): parent_membership__user__uuid

        Returns:
            Any: No response body

        Tags:
            explicit_members
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if parent_membership__user__uuid is None:
            raise ValueError("Missing required parameter 'parent_membership__user__uuid'")
        url = f"{self.base_url}/api/projects/{project_id}/explicit_members/{parent_membership__user__uuid}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def exports_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of exports for a specified project using path and query parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/exports/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def exports_create(self, project_id, id, export_format, created_at, has_content, filename, dashboard=None, insight=None, export_context=None, expires_after=None) -> dict[str, Any]:
        """
        Initiates an export process for the specified project and returns the operation status.

        Args:
            project_id (string): project_id
            id (integer): id
            export_format (string): * `image/png` - image/png
        * `application/pdf` - application/pdf
        * `text/csv` - text/csv
        * `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet` - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
            created_at (string): created_at
            has_content (string): has_content
            filename (string): filename
            dashboard (integer): dashboard
            insight (integer): insight
            export_context (string): export_context
            expires_after (string): expires_after

        Returns:
            dict[str, Any]: API response data.

        Tags:
            exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'export_format': export_format,
            'created_at': created_at,
            'has_content': has_content,
            'export_context': export_context,
            'filename': filename,
            'expires_after': expires_after,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/exports/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def exports_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves the export with the specified ID from a project identified by its project ID using the provided API endpoint.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/exports/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def exports_content_retrieve(self, project_id, id) -> Any:
        """
        Retrieves the content of a specific export associated with a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            exports
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/exports/{id}/content/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_list(self, project_id, active=None, created_by_id=None, limit=None, offset=None, search=None, type=None) -> dict[str, Any]:
        """
        Retrieves a filtered list of feature flags for a specified project, supporting query parameters like active status, creator ID, search term, and feature type.

        Args:
            project_id (string): project_id
            active (string): Filters feature flags to only include active or inactive flags based on boolean value (true/false).
            created_by_id (string): The User ID which initially created the feature flag.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            search (string): Search by feature flag key or name. Case insensitive.
            type (string): Filters feature flags by type in the GET operation, used to specify the kind of feature flag to retrieve for the given project.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/"
        query_params = {k: v for k, v in [('active', active), ('created_by_id', created_by_id), ('limit', limit), ('offset', offset), ('search', search), ('type', type)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_create(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new feature flag for the project specified by the provided project ID.

        Args:
            project_id (string): project_id
            id (integer): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_role_access_list(self, project_id, feature_flag_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves role access details for a specific feature flag within a project, allowing pagination with limit and offset parameters.

        Args:
            project_id (string): project_id
            feature_flag_id (string): feature_flag_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if feature_flag_id is None:
            raise ValueError("Missing required parameter 'feature_flag_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_role_access_create(self, project_id, feature_flag_id, id, feature_flag, role, role_id, added_at, updated_at) -> dict[str, Any]:
        """
        Grants role-based access to a specific feature flag within a project and returns a success status upon creation.

        Args:
            project_id (string): project_id
            feature_flag_id (string): feature_flag_id
            id (integer): id
            feature_flag (string): feature_flag
            role (string): role
            role_id (string): role_id
            added_at (string): added_at
            updated_at (string): updated_at

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if feature_flag_id is None:
            raise ValueError("Missing required parameter 'feature_flag_id'")
        request_body = {
            'id': id,
            'feature_flag': feature_flag,
            'role': role,
            'role_id': role_id,
            'added_at': added_at,
            'updated_at': updated_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_role_access_retrieve(self, project_id, feature_flag_id, id) -> dict[str, Any]:
        """
        Retrieves role access information for a specific feature flag within a project using the provided project, feature flag, and role IDs.

        Args:
            project_id (string): project_id
            feature_flag_id (string): feature_flag_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if feature_flag_id is None:
            raise ValueError("Missing required parameter 'feature_flag_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_role_access_destroy(self, project_id, feature_flag_id, id) -> Any:
        """
        Removes role-based access from a feature flag in a specific project.

        Args:
            project_id (string): project_id
            feature_flag_id (string): feature_flag_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if feature_flag_id is None:
            raise ValueError("Missing required parameter 'feature_flag_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{feature_flag_id}/role_access/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific feature flag by its ID within a project, returning details such as its name, key, and variants.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_update(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a feature flag in a specified project using the provided ID and project ID, allowing modifications to the flag's attributes.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def feature_flags_destroy(self, project_id, id) -> Any:
        """
        Deletes a specified feature flag within a project using a DELETE request, returning a 405 response.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_activity_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves the activity log for a specific feature flag within a project, including historical changes and events.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_create_static_cohort_for_flag_create(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> Any:
        """
        Creates a static cohort from a feature flag's user list for targeted analysis or segmentation purposes.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/create_static_cohort_for_flag/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_dashboard_create(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> Any:
        """
        Creates a dashboard for a specific feature flag within a project using the provided parameters and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/dashboard/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_enrich_usage_dashboard_create(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> Any:
        """
        Enriches the usage dashboard for a specific feature flag in a project by sending a POST request to the "/api/projects/{project_id}/feature_flags/{id}/enrich_usage_dashboard/" endpoint.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/enrich_usage_dashboard/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_remote_config_retrieve(self, project_id, id) -> Any:
        """
        Retrieves the remote configuration for a specific feature flag in a project, using the provided project and feature flag IDs.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/remote_config/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_status_retrieve(self, project_id, id) -> Any:
        """
        Retrieves the status of a specific feature flag (by ID) within a project, returning relevant details in the response.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/{id}/status/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_activity_retrieve(self, project_id) -> Any:
        """
        Retrieves activity data for feature flags in a specified project using the "GET" method at the "/api/projects/{project_id}/feature_flags/activity/" endpoint.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_evaluation_reasons_retrieve(self, project_id) -> Any:
        """
        Retrieves the evaluation reasons for feature flags in a specified project, providing insight into why particular flag variations were served to users or contexts.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/evaluation_reasons/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_local_evaluation_retrieve(self, project_id) -> Any:
        """
        Retrieves configuration for locally evaluated feature flags within a specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/local_evaluation/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_my_flags_retrieve(self, project_id) -> Any:
        """
        Retrieves the list of feature flags associated with the specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/my_flags/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def feature_flags_user_blast_radius_create(self, project_id, id, key, created_by, last_modified_by, is_simple_flag, rollout_percentage, experiment_set, surveys, features, can_edit, usage_dashboard, user_access_level, status, name=None, filters=None, deleted=None, active=None, created_at=None, version=0, ensure_experience_continuity=None, rollback_conditions=None, performed_rollback=None, tags=None, analytics_dashboards=None, has_enriched_analytics=None, creation_context=None, is_remote_configuration=None, has_encrypted_payloads=None, _create_in_folder=None) -> Any:
        """
        Updates the user blast radius for a feature flag in a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (integer): id
            key (string): key
            created_by (string): created_by
            last_modified_by (string): last_modified_by
            is_simple_flag (boolean): is_simple_flag
            rollout_percentage (integer): rollout_percentage
            experiment_set (array): experiment_set
            surveys (object): surveys
            features (object): features
            can_edit (boolean): can_edit
            usage_dashboard (integer): usage_dashboard
            user_access_level (string): The effective access level the user has for this object
            status (string): status
            name (string): contains the description for the flag (field name `name` is kept for backwards-compatibility)
            filters (object): filters
            deleted (boolean): deleted
            active (boolean): active
            created_at (string): created_at
            version (integer): version
            ensure_experience_continuity (boolean): ensure_experience_continuity
            rollback_conditions (string): rollback_conditions
            performed_rollback (boolean): performed_rollback
            tags (array): tags
            analytics_dashboards (array): analytics_dashboards
            has_enriched_analytics (boolean): has_enriched_analytics
            creation_context (string): Indicates the origin product of the feature flag. Choices: 'feature_flags', 'experiments', 'surveys', 'early_access_features', 'web_experiments'.

        * `feature_flags` - feature_flags
        * `experiments` - experiments
        * `surveys` - surveys
        * `early_access_features` - early_access_features
        * `web_experiments` - web_experiments
            is_remote_configuration (boolean): is_remote_configuration
            has_encrypted_payloads (boolean): has_encrypted_payloads
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            feature_flags
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'key': key,
            'filters': filters,
            'deleted': deleted,
            'active': active,
            'created_by': created_by,
            'created_at': created_at,
            'version': version,
            'last_modified_by': last_modified_by,
            'is_simple_flag': is_simple_flag,
            'rollout_percentage': rollout_percentage,
            'ensure_experience_continuity': ensure_experience_continuity,
            'experiment_set': experiment_set,
            'surveys': surveys,
            'features': features,
            'rollback_conditions': rollback_conditions,
            'performed_rollback': performed_rollback,
            'can_edit': can_edit,
            'tags': tags,
            'usage_dashboard': usage_dashboard,
            'analytics_dashboards': analytics_dashboards,
            'has_enriched_analytics': has_enriched_analytics,
            'user_access_level': user_access_level,
            'creation_context': creation_context,
            'is_remote_configuration': is_remote_configuration,
            'has_encrypted_payloads': has_encrypted_payloads,
            'status': status,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/feature_flags/user_blast_radius/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_list(self, project_id, limit=None, offset=None, search=None) -> dict[str, Any]:
        """
        Retrieves a list of files from a project's file system by project ID, allowing filtering by search criteria and pagination using limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            search (string): A search term.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/file_system/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_create(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> dict[str, Any]:
        """
        Creates a new file system entry for a project with the specified project ID using the API.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            dict[str, Any]: API response data.

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves file system information for a specified file within a project using the provided project ID and file ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_update(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> dict[str, Any]:
        """
        Updates a file system resource in a project by replacing it entirely using the PUT method.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            dict[str, Any]: API response data.

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def file_system_destroy(self, project_id, id) -> Any:
        """
        Deletes a specified file system within a project using the provided ID and project ID, returning a 204 No Content response upon successful deletion.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_count_create(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> Any:
        """
        Counts files in a specified project's file system directory and returns the result.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/count/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_link_create(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> Any:
        """
        Creates a link to a file system entry within a specified project and returns the operation result.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/link/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_move_create(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> Any:
        """
        Moves a specified file system item to a new location within a project and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/{id}/move/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_count_by_path_create(self, project_id, id, path, depth, created_at, created_by, type=None, ref=None, href=None, meta=None, shortcut=None) -> Any:
        """
        Generates a count of files in the file system by path for a specified project using the project ID.

        Args:
            project_id (string): project_id
            id (string): id
            path (string): path
            depth (integer): depth
            created_at (string): created_at
            created_by (string): created_by
            type (string): type
            ref (string): ref
            href (string): href
            meta (string): meta
            shortcut (boolean): shortcut

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'path': path,
            'depth': depth,
            'type': type,
            'ref': ref,
            'href': href,
            'meta': meta,
            'shortcut': shortcut,
            'created_at': created_at,
            'created_by': created_by,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/file_system/count_by_path/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def file_system_unfiled_retrieve(self, project_id) -> Any:
        """
        Retrieves a list of unfiled files within a project using the project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            file_system
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/file_system/unfiled/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_list(self, project_id, group_type_index, search, cursor=None) -> dict[str, Any]:
        """
        Retrieves a list of groups for a specified project using the "GET" method, supporting filtering by group type and searching.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to list
            search (string): Search the group name
            cursor (string): The pagination cursor value.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/"
        query_params = {k: v for k, v in [('cursor', cursor), ('group_type_index', group_type_index), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_activity_retrieve(self, project_id, group_type_index, id) -> Any:
        """
        Retrieves activity data for specified groups within a project based on group type and ID parameters.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to find
            id (string): Specify the id of the user to find groups for

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/activity/"
        query_params = {k: v for k, v in [('group_type_index', group_type_index), ('id', id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_delete_property_create(self, project_id, group_key, group_type_index, created_at, group_properties=None) -> Any:
        """
        Deletes a specified property from groups within a project using a POST request.

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find
            created_at (string): created_at
            group_properties (string): group_properties

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type_index': group_type_index,
            'group_key': group_key,
            'group_properties': group_properties,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/groups/delete_property/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_find_retrieve(self, project_id, group_key, group_type_index) -> Any:
        """
        Retrieves groups within a specific project by filtering on group key and group type index.

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/find/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_property_definitions_retrieve(self, project_id) -> Any:
        """
        Retrieves property definitions for a specific group within a project using the project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/property_definitions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_property_values_retrieve(self, project_id) -> Any:
        """
        Retrieves property values for groups in a project identified by the provided project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/property_values/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_related_retrieve(self, project_id, group_type_index, id) -> Any:
        """
        Retrieves related groups for a specified project based on group type and ID.

        Args:
            project_id (string): project_id
            group_type_index (integer): Specify the group type to find
            id (string): Specify the id of the user to find groups for

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups/related/"
        query_params = {k: v for k, v in [('group_type_index', group_type_index), ('id', id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_update_property_create(self, project_id, group_key, group_type_index, created_at, group_properties=None) -> Any:
        """
        Updates a specific group property within a project by sending a POST request to "/api/projects/{project_id}/groups/update_property/".

        Args:
            project_id (string): project_id
            group_key (string): Specify the key of the group to find
            group_type_index (integer): Specify the group type to find
            created_at (string): created_at
            group_properties (string): group_properties

        Returns:
            Any: No response body

        Tags:
            groups
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type_index': group_type_index,
            'group_key': group_key,
            'group_properties': group_properties,
            'created_at': created_at,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/groups/update_property/"
        query_params = {k: v for k, v in [('group_key', group_key), ('group_type_index', group_type_index)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_types_list(self, project_id) -> list[Any]:
        """
        Retrieves group types for a specific project by project ID.

        Args:
            project_id (string): project_id

        Returns:
            list[Any]: API response data.

        Tags:
            groups_types
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/groups_types/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_types_create_detail_dashboard_update(self, project_id, group_type, group_type_index, name_singular=None, name_plural=None, detail_dashboard=None, default_columns=None) -> Any:
        """
        Updates the detail dashboard for a specific group type in a project using the provided details and returns a status message.

        Args:
            project_id (string): project_id
            group_type (string): group_type
            group_type_index (integer): group_type_index
            name_singular (string): name_singular
            name_plural (string): name_plural
            detail_dashboard (integer): detail_dashboard
            default_columns (array): default_columns

        Returns:
            Any: No response body

        Tags:
            groups_types
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type': group_type,
            'group_type_index': group_type_index,
            'name_singular': name_singular,
            'name_plural': name_plural,
            'detail_dashboard': detail_dashboard,
            'default_columns': default_columns,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/groups_types/create_detail_dashboard/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_types_set_default_columns_update(self, project_id, group_type, group_type_index, name_singular=None, name_plural=None, detail_dashboard=None, default_columns=None) -> Any:
        """
        Sets the default columns for project group types and returns a success status.

        Args:
            project_id (string): project_id
            group_type (string): group_type
            group_type_index (integer): group_type_index
            name_singular (string): name_singular
            name_plural (string): name_plural
            detail_dashboard (integer): detail_dashboard
            default_columns (array): default_columns

        Returns:
            Any: No response body

        Tags:
            groups_types
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type': group_type,
            'group_type_index': group_type_index,
            'name_singular': name_singular,
            'name_plural': name_plural,
            'detail_dashboard': detail_dashboard,
            'default_columns': default_columns,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/groups_types/set_default_columns/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def groups_types_update_metadata_partial_update(self, project_id, group_type=None, group_type_index=None, name_singular=None, name_plural=None, detail_dashboard=None, default_columns=None) -> Any:
        """
        Updates metadata for group types within a specified project.

        Args:
            project_id (string): project_id
            group_type (string): group_type
            group_type_index (integer): group_type_index
            name_singular (string): name_singular
            name_plural (string): name_plural
            detail_dashboard (integer): detail_dashboard
            default_columns (array): default_columns

        Returns:
            Any: No response body

        Tags:
            groups_types
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'group_type': group_type,
            'group_type_index': group_type_index,
            'name_singular': name_singular,
            'name_plural': name_plural,
            'detail_dashboard': detail_dashboard,
            'default_columns': default_columns,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/groups_types/update_metadata/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_list(self, project_id, created_at=None, created_by=None, enabled=None, exclude_kind=None, id=None, kind=None, limit=None, offset=None, type=None, updated_at=None) -> dict[str, Any]:
        """
        Retrieves a list of Hog functions for a specified PostHog project with optional filtering and pagination parameters.

        Args:
            project_id (string): project_id
            created_at (string): Filter results by specifying a creation date for hog functions using the "created_at" query parameter.
            created_by (integer): Filters hog functions by the user ID of the creator.
            enabled (boolean): A boolean query parameter indicating whether to include only enabled hog functions in the response.
            exclude_kind (array): Multiple values may be separated by commas.
            id (string): The ID of the specific hog function to retrieve within the project.
            kind (array): Multiple values may be separated by commas.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            type (array): Multiple values may be separated by commas.
            updated_at (string): Filter results by the `updated_at` timestamp to retrieve hog functions updated at or after a specified time.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/"
        query_params = {k: v for k, v in [('created_at', created_at), ('created_by', created_by), ('enabled', enabled), ('exclude_kind', exclude_kind), ('id', id), ('kind', kind), ('limit', limit), ('offset', offset), ('type', type), ('updated_at', updated_at)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new HOG function configuration for the specified project and returns the created resource.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific Hog function configuration from a PostHog project by ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_update(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates an existing hog function for a specified project using the provided identifier and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def hog_functions_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific hog function within a specified project and returns a status code.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_broadcast_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Broadcasts a Hog function across environments in a PostHog project using the specified project ID and Hog function ID.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/broadcast/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_invocations_create(self, project_id, id, created_at, created_by, updated_at, bytecode, transpiled, template, status, type=None, kind=None, name=None, description=None, enabled=None, deleted=None, hog=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template_id=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Triggers a specific hog function for a project by ID and returns the execution result.

        Args:
            project_id (string): project_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            bytecode (string): bytecode
            transpiled (string): transpiled
            template (string): template
            status (string): status
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template_id (string): template_id
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/invocations/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_logs_retrieve(self, project_id, id) -> Any:
        """
        Retrieves logs for a specific Hog function within a project using the provided project ID and Hog function ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/logs/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_metrics_retrieve(self, project_id, id) -> Any:
        """
        Retrieves metrics for a specific Hog function identified by its ID within a project specified by the project ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/metrics/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_metrics_totals_retrieve(self, project_id, id) -> Any:
        """
        Retrieves the total metrics for a specific Hog function, identified by its ID within a project, by making a GET request to the API endpoint.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/{id}/metrics/totals/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_icon_retrieve(self, project_id) -> Any:
        """
        Retrieves and displays an icon associated with a Hog function in a specified project using the project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/icon/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_icons_retrieve(self, project_id) -> Any:
        """
        Retrieves the list of available icon URLs for Hog functions associated with a specific project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/icons/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def hog_functions_rearrange_partial_update(self, project_id, id=None, type=None, kind=None, name=None, description=None, created_at=None, created_by=None, updated_at=None, enabled=None, deleted=None, hog=None, bytecode=None, transpiled=None, inputs_schema=None, inputs=None, filters=None, masking=None, mappings=None, icon_url=None, template=None, template_id=None, status=None, execution_order=None, _create_in_folder=None) -> Any:
        """
        Rearranges the order of hog functions for a specified project.

        Args:
            project_id (string): project_id
            id (string): id
            type (string): type
            kind (string): kind
            name (string): name
            description (string): description
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            enabled (boolean): enabled
            deleted (boolean): deleted
            hog (string): hog
            bytecode (string): bytecode
            transpiled (string): transpiled
            inputs_schema (array): inputs_schema
            inputs (object): inputs
            filters (object): filters
            masking (string): masking
            mappings (array): mappings
            icon_url (string): icon_url
            template (string): template
            template_id (string): template_id
            status (string): status
            execution_order (integer): execution_order
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            hog_functions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'type': type,
            'kind': kind,
            'name': name,
            'description': description,
            'created_at': created_at,
            'created_by': created_by,
            'updated_at': updated_at,
            'enabled': enabled,
            'deleted': deleted,
            'hog': hog,
            'bytecode': bytecode,
            'transpiled': transpiled,
            'inputs_schema': inputs_schema,
            'inputs': inputs,
            'filters': filters,
            'masking': masking,
            'mappings': mappings,
            'icon_url': icon_url,
            'template': template,
            'template_id': template_id,
            'status': status,
            'execution_order': execution_order,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/hog_functions/rearrange/"
        query_params = {}
        response = self._patch(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_list(self, project_id, created_by=None, format=None, limit=None, offset=None, refresh=None, short_id=None) -> dict[str, Any]:
        """
        Retrieves project insights including stats, health metrics, and recent activity for the specified project ID.

        Args:
            project_id (string): project_id
            created_by (integer): Filter insights by the user who created them, using the "created_by" query parameter.
            format (string): Specifies the format of the returned data (e.g., JSON, XML).
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            refresh (string): Whether to refresh the retrieved insights, how aggresively, and if sync or async:
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        Background calculation can be tracked using the `query_status` response field.
            short_id (string): Optional query parameter to filter insights by a specific short identifier.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/"
        query_params = {k: v for k, v in [('created_by', created_by), ('format', format), ('limit', limit), ('offset', offset), ('refresh', refresh), ('short_id', short_id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new project insight with configurable parameters and returns the created resource.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format parameter specifies the output format of the insights data, passed as a query parameter in the POST request to the specified project insights endpoint.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_sharing_list(self, project_id, insight_id) -> list[Any]:
        """
        Retrieves sharing details for a specific insight within a project using the specified project and insight IDs.

        Args:
            project_id (string): project_id
            insight_id (string): insight_id

        Returns:
            list[Any]: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if insight_id is None:
            raise ValueError("Missing required parameter 'insight_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/{insight_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_retrieve(self, project_id, id, format=None, from_dashboard=None, refresh=None) -> dict[str, Any]:
        """
        Retrieves specific project insights such as stats, health metrics, and team details using a project ID and insight ID.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the format in which the response data should be returned (e.g., JSON, CSV).
            from_dashboard (integer): Only if loading an insight in the context of a dashboard: The relevant dashboard's ID.
        When set, the specified dashboard's filters and date range override will be applied.
            refresh (string): Whether to refresh the insight, how aggresively, and if sync or async:
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        Background calculation can be tracked using the `query_status` response field.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format), ('from_dashboard', from_dashboard), ('refresh', refresh)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_update(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates an insight with the specified ID within a project using the project and insight IDs.

        Args:
            project_id (string): project_id
            id (string): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The "format" query parameter specifies the output format for the insights data when updating an insight resource.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def insights_destroy(self, project_id, id, format=None) -> Any:
        """
        Deletes an insight from a project using the project and insight IDs.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format for the result of deleting the insight, used as a query parameter.

        Returns:
            Any: API response data.

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_activity_retrieve_2(self, project_id, id, format=None) -> Any:
        """
        Retrieves activity insights for a specific project ID and insight ID in the specified format.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format for the activity insights data.

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/{id}/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_viewed_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Marks a specific project insight as viewed and returns a success status.

        Args:
            project_id (string): project_id
            id (string): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format query parameter specifies the output format for viewing insights.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/{id}/viewed/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_activity_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves activity insights for a specific project using the "GET" method, returning data formatted according to the specified format.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format (e.g., JSON, XML) for the activity insights data.

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_cancel_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Cancels an insight for a specified project using the PostHog API, requiring a project ID and supporting optional parameters for query customization.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): Specifies the output format for the response, which is optional and sent via the query string.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/cancel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_funnel_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves insights for a funnel in a specified project using the PostHog API, returning no response body upon successful execution.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the funnel insights data (e.g., JSON, CSV).

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_funnel_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Generates a funnel analysis for the specified project and returns formatted results.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): Specifies the response format for the funnel insight data (e.g., json, xml).
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_funnel_correlation_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves insights funnel correlation for a specified project, returning results in the requested format.

        Args:
            project_id (string): project_id
            format (string): The format parameter specifies the output format for the correlation insights of a project's funnel, allowing users to customize the data presentation.

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_funnel_correlation_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Identifies and returns correlation insights for funnel analysis within a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format of the response data, specified as a query parameter.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_my_last_viewed_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves the user's last viewed insights for a specified project, optionally formatting the response.

        Args:
            project_id (string): project_id
            format (string): The output format for the data (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/my_last_viewed/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_timing_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Tracks and analyzes project timing insights based on specified parameters and returns the processed data.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): `format`: The response format (e.g., json, xml) for the timing insights data.
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/timing/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_trend_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves trend insights for a specific project identified by {project_id}, optionally formatted based on the provided query parameter.

        Args:
            project_id (string): project_id
            format (string): Specifies the response format for the trend insight data (e.g., JSON, CSV).

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/insights/trend/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def insights_trend_create(self, project_id, id, short_id, dashboard_tiles, last_refresh, cache_target_age, next_allowed_client_refresh, result, hasMore, columns, created_at, created_by, updated_at, last_modified_at, last_modified_by, is_sample, effective_restriction_level, effective_privilege_level, user_access_level, timezone, is_cached, query_status, hogql, types, format=None, name=None, derived_name=None, filters=None, query=None, order=None, deleted=None, dashboards=None, description=None, tags=None, favorited=None, saved=None, _create_in_folder=None) -> Any:
        """
        Tracks and analyzes project insights trend data for a specific project ID and returns formatted results.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            dashboard_tiles (array): 
            A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.
    
            last_refresh (string): 
            The datetime this insight's results were generated.
            If added to one or more dashboards the insight can be refreshed separately on each.
            Returns the appropriate last_refresh datetime for the context the insight is viewed in
            (see from_dashboard query parameter).
    
            cache_target_age (string): The target age of the cached results for this insight.
            next_allowed_client_refresh (string): 
            The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed
            by querying the database.
    
            result (string): result
            hasMore (string): hasMore
            columns (string): columns
            created_at (string): created_at
            created_by (string): created_by
            updated_at (string): updated_at
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            is_sample (boolean): is_sample
            effective_restriction_level (string): effective_restriction_level
            effective_privilege_level (string): effective_privilege_level
            user_access_level (string): The effective access level the user has for this object
            timezone (string): The timezone this chart is displayed in.
            is_cached (string): is_cached
            query_status (string): query_status
            hogql (string): hogql
            types (string): types
            format (string): The format for the response data (e.g., json, xml).
            name (string): name
            derived_name (string): derived_name
            filters (string): filters
            query (string): Query node JSON string
            order (integer): order
            deleted (boolean): deleted
            dashboards (array): 
                DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.
                A dashboard ID for each of the dashboards that this insight is displayed on.
        
            description (string): description
            tags (array): tags
            favorited (boolean): favorited
            saved (boolean): saved
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            insights
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'filters': filters,
            'query': query,
            'order': order,
            'deleted': deleted,
            'dashboards': dashboards,
            'dashboard_tiles': dashboard_tiles,
            'last_refresh': last_refresh,
            'cache_target_age': cache_target_age,
            'next_allowed_client_refresh': next_allowed_client_refresh,
            'result': result,
            'hasMore': hasMore,
            'columns': columns,
            'created_at': created_at,
            'created_by': created_by,
            'description': description,
            'updated_at': updated_at,
            'tags': tags,
            'favorited': favorited,
            'saved': saved,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'is_sample': is_sample,
            'effective_restriction_level': effective_restriction_level,
            'effective_privilege_level': effective_privilege_level,
            'user_access_level': user_access_level,
            'timezone': timezone,
            'is_cached': is_cached,
            'query_status': query_status,
            'hogql': hogql,
            'types': types,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/insights/trend/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_list(self, project_id, contains=None, created_by=None, date_from=None, date_to=None, limit=None, offset=None, user=None) -> dict[str, Any]:
        """
        Retrieves a list of notebooks for a specific project with optional filtering by content, creator, date range, and pagination parameters.

        Args:
            project_id (string): project_id
            contains (string): Filter for notebooks that match a provided filter. Each match pair is separated by a colon, multiple match pairs can be sent separated by a space or a comma
            created_by (integer): The UUID of the Notebook's creator
            date_from (string): Filter for notebooks created after this date & time
            date_to (string): Filter for notebooks created before this date & time
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            user (string): If any value is provided for this parameter, return notebooks created by the logged in user.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/"
        query_params = {k: v for k, v in [('contains', contains), ('created_by', created_by), ('date_from', date_from), ('date_to', date_to), ('limit', limit), ('offset', offset), ('user', user)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_create(self, project_id, id, short_id, created_at, created_by, last_modified_at, last_modified_by, user_access_level, title=None, content=None, text_content=None, version=None, deleted=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new notebook for a specified project using the project ID.

        Args:
            project_id (string): project_id
            id (string): id
            short_id (string): short_id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            user_access_level (string): The effective access level the user has for this object
            title (string): title
            content (string): content
            text_content (string): text_content
            version (integer): version
            deleted (boolean): deleted
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'title': title,
            'content': content,
            'text_content': text_content,
            'version': version,
            'deleted': deleted,
            'created_at': created_at,
            'created_by': created_by,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'user_access_level': user_access_level,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_retrieve(self, project_id, short_id) -> dict[str, Any]:
        """
        Retrieves the details of a specific notebook identified by its short ID within a given project.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/{short_id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_update(self, project_id, short_id, id, created_at, created_by, last_modified_at, last_modified_by, user_access_level, title=None, content=None, text_content=None, version=None, deleted=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a notebook in the specified project and returns a success status.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            id (string): id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            user_access_level (string): The effective access level the user has for this object
            title (string): title
            content (string): content
            text_content (string): text_content
            version (integer): version
            deleted (boolean): deleted
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'title': title,
            'content': content,
            'text_content': text_content,
            'version': version,
            'deleted': deleted,
            'created_at': created_at,
            'created_by': created_by,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'user_access_level': user_access_level,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/{short_id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def notebooks_destroy(self, project_id, short_id) -> Any:
        """
        Deletes a notebook specified by its short ID from a project identified by its project ID using the API.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: API response data.

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/{short_id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_activity_retrieve_2(self, project_id, short_id) -> Any:
        """
        Retrieves the activity history for a specific notebook within a project.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: No response body

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/{short_id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_activity_retrieve(self, project_id) -> Any:
        """
        Retrieves activity information for a notebook within a specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def notebooks_recording_comments_retrieve(self, project_id) -> Any:
        """
        Retrieves a list of recording comments associated with a specific project by its ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            notebooks
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/notebooks/recording_comments/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_list(self, project_id, distinct_id=None, email=None, format=None, limit=None, offset=None, properties=None, search=None) -> dict[str, Any]:
        """
        Retrieves a list of persons associated with a specific project, optionally filtered by distinct ID, email, properties, or search criteria.

        Args:
            project_id (string): project_id
            distinct_id (string): Filter list by distinct id.
            email (string): Filter persons by email (exact match)
            format (string): Specifies the response format for the returned data (e.g., JSON, XML, CSV).
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            properties (array): Filter Persons by person properties.
            search (string): Search persons, either by email (full text search) or distinct_id (exact match).

        Returns:
            dict[str, Any]: API response data.

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/"
        query_params = {k: v for k, v in [('distinct_id', distinct_id), ('email', email), ('format', format), ('limit', limit), ('offset', offset), ('properties', properties), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_retrieve(self, project_id, id, format=None) -> dict[str, Any]:
        """
        Retrieves a specific person's details from a project using their ID and allows optional response formatting.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the output format of the response for the specified person within a project.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_update(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> dict[str, Any]:
        """
        Updates a specific person's details within a designated project and returns a success response upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Defines the output format for the response data in the PUT operation.
            properties (string): properties

        Returns:
            dict[str, Any]: API response data.

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def persons_destroy(self, project_id, id, delete_events=None, format=None) -> Any:
        """
        Deletes a specific person within a project, optionally removing associated events, without returning content.

        Args:
            project_id (string): project_id
            id (string): id
            delete_events (boolean): If true, a task to delete all events associated with this person will be created and queued. The task does not run immediately and instead is batched together and at 5AM UTC every Sunday
            format (string): Specifies the response format (e.g., JSON, XML) for the deleted person resource.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/"
        query_params = {k: v for k, v in [('delete_events', delete_events), ('format', format)] if v is not None}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_activity_retrieve_2(self, project_id, id, format=None) -> Any:
        """
        Retrieves activity information for a specific person within a project using the "GET" method.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): Specifies the desired response format (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_delete_events_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Deletes events associated with a person in a project using the POST method and returns a status message.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the format of the response data (e.g., JSON, XML).
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/delete_events/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_delete_property_create(self, project_id, id, _unset, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Removes a specified property from a person within a project using a POST request, returning a success status on completion.

        Args:
            project_id (string): project_id
            id (string): id
            _unset (string): Specify the property key to delete
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): Specifies the response media format (e.g., JSON, XML) for the operation.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/delete_property/"
        query_params = {k: v for k, v in [('$unset', _unset), ('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_properties_timeline_retrieve(self, project_id, id, format=None) -> Any:
        """
        Retrieves a timeline of property changes for a specific person in a project, optionally formatted.

        Args:
            project_id (string): project_id
            id (string): id
            format (string): The format of the response data (e.g., `json` or `xml`).

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/properties_timeline/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_split_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Splits a specified person into separate entities within a project and returns the operation result.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format of the response, specified as a query parameter.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/split/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_update_property_create(self, project_id, id, key, value, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Updates a property for a specified person within a project using the provided key and value.

        Args:
            project_id (string): project_id
            id (string): id
            key (string): Specify the property key
            value (string): Specify the property value
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format parameter specifies the output format for the response.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/{id}/update_property/"
        query_params = {k: v for k, v in [('format', format), ('key', key), ('value', value)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_activity_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves activity data for persons associated with a specific project in the requested format.

        Args:
            project_id (string): project_id
            format (string): Specifies the format of the response data for the activity of persons in a project.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/activity/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def persons_cohorts_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of person cohorts for a specified project using the provided project ID.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the response.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/cohorts/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_funnel_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of persons in a funnel for a specific project using the project ID and optionally formats the output.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the response, allowing clients to request data in a specific format.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_funnel_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Tracks user funnel data for a specific project and returns formatted results.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The output format for the funnel data (e.g., json, csv).
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/funnel/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_funnel_correlation_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves correlation data for persons in a project, identified by the project ID, and optionally formats the output based on the specified format parameter.

        Args:
            project_id (string): project_id
            format (string): The format for the response data (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_funnel_correlation_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Calculates and returns the correlation between funnel data for individuals within a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format parameter specifies the output format for the correlation data.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/funnel/correlation/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_lifecycle_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves lifecycle information for persons associated with a project, identified by the specified project ID, allowing optional format specification.

        Args:
            project_id (string): project_id
            format (string): Specifies the output format for the lifecycle data of persons in a project.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/lifecycle/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_reset_person_distinct_id_create(self, project_id, id, name, distinct_ids, created_at, uuid, format=None, properties=None) -> Any:
        """
        Resets and unlinks a person's distinct identifier in the specified project, clearing associated user data across devices or sessions.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            distinct_ids (array): distinct_ids
            created_at (string): created_at
            uuid (string): uuid
            format (string): The format of the response, specified in the query string.
            properties (string): properties

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'distinct_ids': distinct_ids,
            'properties': properties,
            'created_at': created_at,
            'uuid': uuid,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/persons/reset_person_distinct_id/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_stickiness_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves stickiness data for persons associated with a specific project, optionally formatted.

        Args:
            project_id (string): project_id
            format (string): The output format for the response data (e.g., JSON, XML).

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/stickiness/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_trends_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves trends related to persons in a specified project using the GET method and returns the data in a requested format.

        Args:
            project_id (string): project_id
            format (string): Specifies the format (e.g., JSON, CSV) for the response data of project person trends.

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/trends/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def persons_values_retrieve(self, project_id, format=None) -> Any:
        """
        Retrieves a list of person values for a specified project using the provided project ID.

        Args:
            project_id (string): project_id
            format (string): Specifies the format in which the data should be returned (e.g., JSON, XML, CSV).

        Returns:
            Any: No response body

        Tags:
            persons
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/persons/values/"
        query_params = {k: v for k, v in [('format', format)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def plugin_configs_logs_list(self, project_id, plugin_config_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves and returns log entries for a specific plugin configuration within a project, allowing pagination through query parameters for limit and offset.

        Args:
            project_id (string): project_id
            plugin_config_id (string): plugin_config_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            plugin_configs
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if plugin_config_id is None:
            raise ValueError("Missing required parameter 'plugin_config_id'")
        url = f"{self.base_url}/api/projects/{project_id}/plugin_configs/{plugin_config_id}/logs/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def property_definitions_list(self, project_id, event_names=None, exclude_core_properties=None, exclude_hidden=None, excluded_properties=None, filter_by_event_names=None, group_type_index=None, is_feature_flag=None, is_numerical=None, limit=None, offset=None, properties=None, search=None, type=None) -> dict[str, Any]:
        """
        Retrieves property definitions for a specific project with optional filtering for event names, excluded properties, hidden status, numerical type, and feature flags.

        Args:
            project_id (string): project_id
            event_names (string): If sent, response value will have `is_seen_on_filtered_events` populated. JSON-encoded
            exclude_core_properties (boolean): Whether to exclude core properties
            exclude_hidden (boolean): Whether to exclude properties marked as hidden
            excluded_properties (string): JSON-encoded list of excluded properties
            filter_by_event_names (boolean): Whether to return only properties for events in `event_names`
            group_type_index (integer): What group type is the property for. Only should be set if `type=group`
            is_feature_flag (boolean): Whether to return only (or excluding) feature flag properties
            is_numerical (boolean): Whether to return only (or excluding) numerical property definitions
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            properties (string): Comma-separated list of properties to filter
            search (string): Searches properties by name
            type (string): What property definitions to return * `event` - event
        * `person` - person
        * `group` - group
        * `session` - session

        Returns:
            dict[str, Any]: API response data.

        Tags:
            property_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/property_definitions/"
        query_params = {k: v for k, v in [('event_names', event_names), ('exclude_core_properties', exclude_core_properties), ('exclude_hidden', exclude_hidden), ('excluded_properties', excluded_properties), ('filter_by_event_names', filter_by_event_names), ('group_type_index', group_type_index), ('is_feature_flag', is_feature_flag), ('is_numerical', is_numerical), ('limit', limit), ('offset', offset), ('properties', properties), ('search', search), ('type', type)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def property_definitions_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific property definition by ID for a given project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            property_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/property_definitions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def property_definitions_update(self, project_id, id, name, is_seen_on_filtered_events, is_numerical=None, property_type=None, tags=None) -> dict[str, Any]:
        """
        Updates or replaces a specific property definition within a project using the PUT method, where the project and property definition are identified by their respective IDs.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            is_seen_on_filtered_events (string): is_seen_on_filtered_events
            is_numerical (boolean): is_numerical
            property_type (string): property_type
            tags (array): tags

        Returns:
            dict[str, Any]: API response data.

        Tags:
            property_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'is_numerical': is_numerical,
            'property_type': property_type,
            'tags': tags,
            'is_seen_on_filtered_events': is_seen_on_filtered_events,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/property_definitions/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def property_definitions_destroy(self, project_id, id) -> Any:
        """
        Deletes a specified property definition from a project using the provided project ID and property definition ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            property_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/property_definitions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def property_definitions_seen_together_retrieve(self, project_id) -> Any:
        """
        Retrieves property definitions that are commonly seen together for a specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            property_definitions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/property_definitions/seen_together/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def query_create(self, project_id, query, async_=None, client_query_id=None, filters_override=None, refresh="blocking", variables_override=None) -> Any:
        """
        Submits a query to process or retrieve project-specific data and returns the results.

        Args:
            project_id (string): project_id
            query (string): Submit a JSON string representing a query for PostHog data analysis, for example a HogQL query.

        Example payload:

        ```

        {"query": {"kind": "HogQLQuery", "query": "select * from events limit 100"}}

        ```

        For more details on HogQL queries, see the [PostHog HogQL documentation](/docs/hogql#api-access).
            async_ (string): async
            client_query_id (string): Client provided query ID. Can be used to retrieve the status or cancel the query.
            filters_override (string): filters_override
            refresh (string): Whether results should be calculated sync or async, and how much to rely on the cache:
        - `'blocking'` - calculate synchronously (returning only when the query is done), UNLESS there are very fresh results in the cache
        - `'async'` - kick off background calculation (returning immediately with a query status), UNLESS there are very fresh results in the cache
        - `'lazy_async'` - kick off background calculation, UNLESS there are somewhat fresh results in the cache
        - `'force_blocking'` - calculate synchronously, even if fresh results are already cached
        - `'force_async'` - kick off background calculation, even if fresh results are already cached
        - `'force_cache'` - return cached data or a cache miss; always completes immediately as it never calculates Background calculation can be tracked using the `query_status` response field.
            variables_override (string): variables_override

        Returns:
            Any: API response data.

        Tags:
            query
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'async_': async_,
            'client_query_id': client_query_id,
            'filters_override': filters_override,
            'query': query,
            'refresh': refresh,
            'variables_override': variables_override,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/query/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def query_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves query details for a specific query within a project identified by the project ID and query ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            query
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/query/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def query_destroy(self, project_id, id) -> Any:
        """
        Deletes a query identified by the given ID within a specified project using the DELETE method and returns a successful response without content upon deletion.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: Query cancelled

        Tags:
            query
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/query/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def query_check_auth_for_async_create(self, project_id) -> Any:
        """
        Checks authorization for asynchronous operations on a specified project and returns the result.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            query
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/query/check_auth_for_async/"
        query_params = {}
        response = self._post(url, data={}, params=query_params)
        response.raise_for_status()
        return response.json()

    def query_draft_sql_retrieve(self, project_id) -> Any:
        """
        Retrieves draft SQL queries for a specified project using the project's ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            query
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/query/draft_sql/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_list(self, project_id, created_by=None, limit=None, offset=None, short_id=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of session recording playlists for a specified project, filtered by creator, short ID, or other parameters.

        Args:
            project_id (string): project_id
            created_by (integer): Filters session recording playlists to those created by the specified user.
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            short_id (string): Filter sessions by a specific short identifier.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/"
        query_params = {k: v for k, v in [('created_by', created_by), ('limit', limit), ('offset', offset), ('short_id', short_id)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_create(self, project_id, id, short_id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new session recording playlist for a specified project, allowing users to organize session recordings, using the PostHog API.

        Args:
            project_id (string): project_id
            id (integer): id
            short_id (string): short_id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_retrieve(self, project_id, short_id) -> dict[str, Any]:
        """
        Retrieves a session recording playlist by project ID and short ID using the GET method.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_update(self, project_id, short_id, id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Updates a session recording playlist's configurations (name, description, filters, etc.) for a specified project and playlist identifier using the provided parameters.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def session_recording_playlists_destroy(self, project_id, short_id) -> Any:
        """
        Deletes a session recording playlist in a specified project using its short identifier, returning a 405 status code (method not allowed for hard deletes).

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: API response data.

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_recordings_retrieve(self, project_id, short_id) -> Any:
        """
        Retrieves a list of recordings associated with a specific session recording playlist in a project.

        Args:
            project_id (string): project_id
            short_id (string): short_id

        Returns:
            Any: No response body

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_recordings_create(self, project_id, short_id, session_recording_id, id, created_at, created_by, last_modified_at, last_modified_by, recordings_counts, name=None, derived_name=None, description=None, pinned=None, deleted=None, filters=None, _create_in_folder=None) -> Any:
        """
        Creates a new recording for a session recording playlist within a specified project using the provided session recording ID and short ID.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            session_recording_id (string): session_recording_id
            id (integer): id
            created_at (string): created_at
            created_by (string): created_by
            last_modified_at (string): last_modified_at
            last_modified_by (string): last_modified_by
            recordings_counts (object): recordings_counts
            name (string): name
            derived_name (string): derived_name
            description (string): description
            pinned (boolean): pinned
            deleted (boolean): deleted
            filters (string): filters
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        if session_recording_id is None:
            raise ValueError("Missing required parameter 'session_recording_id'")
        request_body = {
            'id': id,
            'short_id': short_id,
            'name': name,
            'derived_name': derived_name,
            'description': description,
            'pinned': pinned,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'filters': filters,
            'last_modified_at': last_modified_at,
            'last_modified_by': last_modified_by,
            'recordings_counts': recordings_counts,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recording_playlists_recordings_destroy(self, project_id, short_id, session_recording_id) -> Any:
        """
        Deletes a specific session recording from a session recording playlist in a project using the provided project, playlist, and recording identifiers.

        Args:
            project_id (string): project_id
            short_id (string): short_id
            session_recording_id (string): session_recording_id

        Returns:
            Any: No response body

        Tags:
            session_recording_playlists
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if short_id is None:
            raise ValueError("Missing required parameter 'short_id'")
        if session_recording_id is None:
            raise ValueError("Missing required parameter 'session_recording_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of session recordings for a specified project, allowing pagination through limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves a specific session recording for a project identified by project_id and session ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_update(self, project_id, id, distinct_id, viewed, viewers, recording_duration, active_seconds, inactive_seconds, start_time, end_time, click_count, keypress_count, mouse_activity_count, console_log_count, console_warn_count, console_error_count, start_url, storage, snapshot_source, ongoing, activity_score, person=None) -> dict[str, Any]:
        """
        Updates or replaces a specific session recording within a project using the provided ID and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            distinct_id (string): distinct_id
            viewed (boolean): viewed
            viewers (array): viewers
            recording_duration (integer): recording_duration
            active_seconds (integer): active_seconds
            inactive_seconds (integer): inactive_seconds
            start_time (string): start_time
            end_time (string): end_time
            click_count (integer): click_count
            keypress_count (integer): keypress_count
            mouse_activity_count (integer): mouse_activity_count
            console_log_count (integer): console_log_count
            console_warn_count (integer): console_warn_count
            console_error_count (integer): console_error_count
            start_url (string): start_url
            storage (string): storage
            snapshot_source (string): snapshot_source
            ongoing (boolean): ongoing
            activity_score (number): activity_score
            person (object): person

        Returns:
            dict[str, Any]: API response data.

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'distinct_id': distinct_id,
            'viewed': viewed,
            'viewers': viewers,
            'recording_duration': recording_duration,
            'active_seconds': active_seconds,
            'inactive_seconds': inactive_seconds,
            'start_time': start_time,
            'end_time': end_time,
            'click_count': click_count,
            'keypress_count': keypress_count,
            'mouse_activity_count': mouse_activity_count,
            'console_log_count': console_log_count,
            'console_warn_count': console_warn_count,
            'console_error_count': console_error_count,
            'start_url': start_url,
            'person': person,
            'storage': storage,
            'snapshot_source': snapshot_source,
            'ongoing': ongoing,
            'activity_score': activity_score,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def session_recordings_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific session recording using the provided project ID and session recording ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_analyze_similar_retrieve(self, project_id, id) -> Any:
        """
        Analyzes a session recording for similar recordings within a specific project using the provided project ID and session recording ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/{id}/analyze/similar/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_sharing_list(self, project_id, recording_id) -> list[Any]:
        """
        Retrieves sharing details for a specific session recording within a project.

        Args:
            project_id (string): project_id
            recording_id (string): recording_id

        Returns:
            list[Any]: API response data.

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if recording_id is None:
            raise ValueError("Missing required parameter 'recording_id'")
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/{recording_id}/sharing/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def session_recordings_ai_regex_create(self, project_id, id, distinct_id, viewed, viewers, recording_duration, active_seconds, inactive_seconds, start_time, end_time, click_count, keypress_count, mouse_activity_count, console_log_count, console_warn_count, console_error_count, start_url, storage, snapshot_source, ongoing, activity_score, person=None) -> Any:
        """
        Creates AI-powered regex session recordings for a specified project using the POST method.

        Args:
            project_id (string): project_id
            id (string): id
            distinct_id (string): distinct_id
            viewed (boolean): viewed
            viewers (array): viewers
            recording_duration (integer): recording_duration
            active_seconds (integer): active_seconds
            inactive_seconds (integer): inactive_seconds
            start_time (string): start_time
            end_time (string): end_time
            click_count (integer): click_count
            keypress_count (integer): keypress_count
            mouse_activity_count (integer): mouse_activity_count
            console_log_count (integer): console_log_count
            console_warn_count (integer): console_warn_count
            console_error_count (integer): console_error_count
            start_url (string): start_url
            storage (string): storage
            snapshot_source (string): snapshot_source
            ongoing (boolean): ongoing
            activity_score (number): activity_score
            person (object): person

        Returns:
            Any: No response body

        Tags:
            session_recordings
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'distinct_id': distinct_id,
            'viewed': viewed,
            'viewers': viewers,
            'recording_duration': recording_duration,
            'active_seconds': active_seconds,
            'inactive_seconds': inactive_seconds,
            'start_time': start_time,
            'end_time': end_time,
            'click_count': click_count,
            'keypress_count': keypress_count,
            'mouse_activity_count': mouse_activity_count,
            'console_log_count': console_log_count,
            'console_warn_count': console_warn_count,
            'console_error_count': console_error_count,
            'start_url': start_url,
            'person': person,
            'storage': storage,
            'snapshot_source': snapshot_source,
            'ongoing': ongoing,
            'activity_score': activity_score,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/session_recordings/ai/regex/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def sessions_property_definitions_retrieve(self, project_id) -> Any:
        """
        Retrieves property definitions associated with sessions for a specified project.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            sessions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/sessions/property_definitions/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def sessions_values_retrieve(self, project_id) -> Any:
        """
        Retrieves session values for a specific project identified by its project_id.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            sessions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/sessions/values/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def subscriptions_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of subscriptions for a specified project by project ID, allowing pagination through query parameters for limit and offset.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            subscriptions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/subscriptions/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def subscriptions_create(self, project_id, id, target_type, target_value, frequency, start_date, created_at, created_by, summary, next_delivery_date, dashboard=None, insight=None, interval=None, byweekday=None, bysetpos=None, count=None, until_date=None, deleted=None, title=None, invite_message=None) -> dict[str, Any]:
        """
        Creates a new subscription for a project using the provided project ID and returns a successful creation status.

        Args:
            project_id (string): project_id
            id (integer): id
            target_type (string): * `email` - Email
        * `slack` - Slack
        * `webhook` - Webhook
            target_value (string): target_value
            frequency (string): * `daily` - Daily
        * `weekly` - Weekly
        * `monthly` - Monthly
        * `yearly` - Yearly
            start_date (string): start_date
            created_at (string): created_at
            created_by (string): created_by
            summary (string): summary
            next_delivery_date (string): next_delivery_date
            dashboard (integer): dashboard
            insight (integer): insight
            interval (integer): interval
            byweekday (array): byweekday
            bysetpos (integer): bysetpos
            count (integer): count
            until_date (string): until_date
            deleted (boolean): deleted
            title (string): title
            invite_message (string): invite_message

        Returns:
            dict[str, Any]: API response data.

        Tags:
            subscriptions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'target_type': target_type,
            'target_value': target_value,
            'frequency': frequency,
            'interval': interval,
            'byweekday': byweekday,
            'bysetpos': bysetpos,
            'count': count,
            'start_date': start_date,
            'until_date': until_date,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'title': title,
            'summary': summary,
            'next_delivery_date': next_delivery_date,
            'invite_message': invite_message,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/subscriptions/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def subscriptions_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details about a specific subscription within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            subscriptions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def subscriptions_update(self, project_id, id, target_type, target_value, frequency, start_date, created_at, created_by, summary, next_delivery_date, dashboard=None, insight=None, interval=None, byweekday=None, bysetpos=None, count=None, until_date=None, deleted=None, title=None, invite_message=None) -> dict[str, Any]:
        """
        Updates an existing subscription associated with a specific project by replacing it with the provided data.

        Args:
            project_id (string): project_id
            id (string): id
            target_type (string): * `email` - Email
        * `slack` - Slack
        * `webhook` - Webhook
            target_value (string): target_value
            frequency (string): * `daily` - Daily
        * `weekly` - Weekly
        * `monthly` - Monthly
        * `yearly` - Yearly
            start_date (string): start_date
            created_at (string): created_at
            created_by (string): created_by
            summary (string): summary
            next_delivery_date (string): next_delivery_date
            dashboard (integer): dashboard
            insight (integer): insight
            interval (integer): interval
            byweekday (array): byweekday
            bysetpos (integer): bysetpos
            count (integer): count
            until_date (string): until_date
            deleted (boolean): deleted
            title (string): title
            invite_message (string): invite_message

        Returns:
            dict[str, Any]: API response data.

        Tags:
            subscriptions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'dashboard': dashboard,
            'insight': insight,
            'target_type': target_type,
            'target_value': target_value,
            'frequency': frequency,
            'interval': interval,
            'byweekday': byweekday,
            'bysetpos': bysetpos,
            'count': count,
            'start_date': start_date,
            'until_date': until_date,
            'created_at': created_at,
            'created_by': created_by,
            'deleted': deleted,
            'title': title,
            'summary': summary,
            'next_delivery_date': next_delivery_date,
            'invite_message': invite_message,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def subscriptions_destroy(self, project_id, id) -> Any:
        """
        Deletes a specific subscription associated with a project by its identifier.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: API response data.

        Tags:
            subscriptions
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/subscriptions/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_list(self, project_id, limit=None, offset=None, search=None) -> dict[str, Any]:
        """
        Retrieves a paginated list of surveys for a specific project with optional search and pagination parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.
            search (string): A search term.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset), ('search', search)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_create(self, project_id, id, name, type, linked_flag, targeting_flag, internal_targeting_flag, created_at, created_by, description=None, schedule=None, linked_flag_id=None, targeting_flag_id=None, targeting_flag_filters=None, remove_targeting_flag=None, questions=None, conditions=None, appearance=None, start_date=None, end_date=None, archived=None, responses_limit=None, iteration_count=None, iteration_frequency_days=None, iteration_start_dates=None, current_iteration=None, current_iteration_start_date=None, response_sampling_start_date=None, response_sampling_interval_type=None, response_sampling_interval=None, response_sampling_limit=None, response_sampling_daily_limits=None, enable_partial_responses=None, _create_in_folder=None) -> dict[str, Any]:
        """
        Creates a new survey under the specified project and returns a status message upon successful creation.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            type (string): * `popover` - popover
        * `widget` - widget
        * `button` - button
        * `email` - email
        * `full_screen` - full screen
        * `api` - api
            linked_flag (string): linked_flag
            targeting_flag (string): targeting_flag
            internal_targeting_flag (string): internal_targeting_flag
            created_at (string): created_at
            created_by (string): created_by
            description (string): description
            schedule (string): schedule
            linked_flag_id (integer): linked_flag_id
            targeting_flag_id (integer): targeting_flag_id
            targeting_flag_filters (string): targeting_flag_filters
            remove_targeting_flag (boolean): remove_targeting_flag
            questions (string): 
                The `array` of questions included in the survey. Each question must conform to one of the defined question types: Basic, Link, Rating, or Multiple Choice.

                Basic (open-ended question)
                - `type`: `open`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `branching`: Branching logic for the question. See branching types below for details.

                Link (a question with a link)
                - `type`: `link`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `link`: The URL associated with the question.
                - `branching`: Branching logic for the question. See branching types below for details.

                Rating (a question with a rating scale)
                - `type`: `rating`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `display`: Display style of the rating (`number` or `emoji`).
                - `scale`: The scale of the rating (`number`).
                - `lowerBoundLabel`: Label for the lower bound of the scale.
                - `upperBoundLabel`: Label for the upper bound of the scale.
                - `branching`: Branching logic for the question. See branching types below for details.

                Multiple choice
                - `type`: `single_choice` or `multiple_choice`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `choices`: An array of choices for the question.
                - `shuffleOptions`: Whether to shuffle the order of the choices (`boolean`).
                - `hasOpenChoice`: Whether the question allows an open-ended response (`boolean`).
                - `branching`: Branching logic for the question. See branching types below for details.

                Branching logic can be one of the following types:

                Next question: Proceeds to the next question
                ```json
                {
                    "type": "next_question"
                }
                ```

                End: Ends the survey, optionally displaying a confirmation message.
                ```json
                {
                    "type": "end"
                }
                ```

                Response-based: Branches based on the response values. Available for the `rating` and `single_choice` question types.
                ```json
                {
                    "type": "response_based",
                    "responseValues": {
                        "responseKey": "value"
                    }
                }
                ```

                Specific question: Proceeds to a specific question by index.
                ```json
                {
                    "type": "specific_question",
                    "index": 2
                }
                ```
        
            conditions (string): conditions
            appearance (string): appearance
            start_date (string): start_date
            end_date (string): end_date
            archived (boolean): archived
            responses_limit (integer): responses_limit
            iteration_count (integer): iteration_count
            iteration_frequency_days (integer): iteration_frequency_days
            iteration_start_dates (array): iteration_start_dates
            current_iteration (integer): current_iteration
            current_iteration_start_date (string): current_iteration_start_date
            response_sampling_start_date (string): response_sampling_start_date
            response_sampling_interval_type (string): response_sampling_interval_type
            response_sampling_interval (integer): response_sampling_interval
            response_sampling_limit (integer): response_sampling_limit
            response_sampling_daily_limits (string): response_sampling_daily_limits
            enable_partial_responses (boolean): enable_partial_responses
            _create_in_folder (string): _create_in_folder

        Returns:
            dict[str, Any]: API response data.

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'type': type,
            'schedule': schedule,
            'linked_flag': linked_flag,
            'linked_flag_id': linked_flag_id,
            'targeting_flag_id': targeting_flag_id,
            'targeting_flag': targeting_flag,
            'internal_targeting_flag': internal_targeting_flag,
            'targeting_flag_filters': targeting_flag_filters,
            'remove_targeting_flag': remove_targeting_flag,
            'questions': questions,
            'conditions': conditions,
            'appearance': appearance,
            'created_at': created_at,
            'created_by': created_by,
            'start_date': start_date,
            'end_date': end_date,
            'archived': archived,
            'responses_limit': responses_limit,
            'iteration_count': iteration_count,
            'iteration_frequency_days': iteration_frequency_days,
            'iteration_start_dates': iteration_start_dates,
            'current_iteration': current_iteration,
            'current_iteration_start_date': current_iteration_start_date,
            'response_sampling_start_date': response_sampling_start_date,
            'response_sampling_interval_type': response_sampling_interval_type,
            'response_sampling_interval': response_sampling_interval,
            'response_sampling_limit': response_sampling_limit,
            'response_sampling_daily_limits': response_sampling_daily_limits,
            'enable_partial_responses': enable_partial_responses,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/surveys/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details for a specific survey in a project using the provided ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_update(self, project_id, id, name, type, linked_flag, targeting_flag, internal_targeting_flag, conditions, created_at, created_by, feature_flag_keys, description=None, schedule=None, linked_flag_id=None, questions=None, appearance=None, start_date=None, end_date=None, archived=None, responses_limit=None, iteration_count=None, iteration_frequency_days=None, iteration_start_dates=None, current_iteration=None, current_iteration_start_date=None, response_sampling_start_date=None, response_sampling_interval_type=None, response_sampling_interval=None, response_sampling_limit=None, response_sampling_daily_limits=None, enable_partial_responses=None) -> dict[str, Any]:
        """
        Updates a survey specified by its ID within a project identified by its ID using the PUT method.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            type (string): * `popover` - popover
        * `widget` - widget
        * `button` - button
        * `email` - email
        * `full_screen` - full screen
        * `api` - api
            linked_flag (string): linked_flag
            targeting_flag (string): targeting_flag
            internal_targeting_flag (string): internal_targeting_flag
            conditions (string): conditions
            created_at (string): created_at
            created_by (string): created_by
            feature_flag_keys (array): feature_flag_keys
            description (string): description
            schedule (string): schedule
            linked_flag_id (integer): linked_flag_id
            questions (string): 
                The `array` of questions included in the survey. Each question must conform to one of the defined question types: Basic, Link, Rating, or Multiple Choice.

                Basic (open-ended question)
                - `type`: `open`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `branching`: Branching logic for the question. See branching types below for details.

                Link (a question with a link)
                - `type`: `link`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `link`: The URL associated with the question.
                - `branching`: Branching logic for the question. See branching types below for details.

                Rating (a question with a rating scale)
                - `type`: `rating`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `display`: Display style of the rating (`number` or `emoji`).
                - `scale`: The scale of the rating (`number`).
                - `lowerBoundLabel`: Label for the lower bound of the scale.
                - `upperBoundLabel`: Label for the upper bound of the scale.
                - `branching`: Branching logic for the question. See branching types below for details.

                Multiple choice
                - `type`: `single_choice` or `multiple_choice`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `choices`: An array of choices for the question.
                - `shuffleOptions`: Whether to shuffle the order of the choices (`boolean`).
                - `hasOpenChoice`: Whether the question allows an open-ended response (`boolean`).
                - `branching`: Branching logic for the question. See branching types below for details.

                Branching logic can be one of the following types:

                Next question: Proceeds to the next question
                ```json
                {
                    "type": "next_question"
                }
                ```

                End: Ends the survey, optionally displaying a confirmation message.
                ```json
                {
                    "type": "end"
                }
                ```

                Response-based: Branches based on the response values. Available for the `rating` and `single_choice` question types.
                ```json
                {
                    "type": "response_based",
                    "responseValues": {
                        "responseKey": "value"
                    }
                }
                ```

                Specific question: Proceeds to a specific question by index.
                ```json
                {
                    "type": "specific_question",
                    "index": 2
                }
                ```
        
            appearance (string): appearance
            start_date (string): start_date
            end_date (string): end_date
            archived (boolean): archived
            responses_limit (integer): responses_limit
            iteration_count (integer): iteration_count
            iteration_frequency_days (integer): iteration_frequency_days
            iteration_start_dates (array): iteration_start_dates
            current_iteration (integer): current_iteration
            current_iteration_start_date (string): current_iteration_start_date
            response_sampling_start_date (string): response_sampling_start_date
            response_sampling_interval_type (string): response_sampling_interval_type
            response_sampling_interval (integer): response_sampling_interval
            response_sampling_limit (integer): response_sampling_limit
            response_sampling_daily_limits (string): response_sampling_daily_limits
            enable_partial_responses (boolean): enable_partial_responses

        Returns:
            dict[str, Any]: API response data.

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'type': type,
            'schedule': schedule,
            'linked_flag': linked_flag,
            'linked_flag_id': linked_flag_id,
            'targeting_flag': targeting_flag,
            'internal_targeting_flag': internal_targeting_flag,
            'questions': questions,
            'conditions': conditions,
            'appearance': appearance,
            'created_at': created_at,
            'created_by': created_by,
            'start_date': start_date,
            'end_date': end_date,
            'archived': archived,
            'responses_limit': responses_limit,
            'feature_flag_keys': feature_flag_keys,
            'iteration_count': iteration_count,
            'iteration_frequency_days': iteration_frequency_days,
            'iteration_start_dates': iteration_start_dates,
            'current_iteration': current_iteration,
            'current_iteration_start_date': current_iteration_start_date,
            'response_sampling_start_date': response_sampling_start_date,
            'response_sampling_interval_type': response_sampling_interval_type,
            'response_sampling_interval': response_sampling_interval,
            'response_sampling_limit': response_sampling_limit,
            'response_sampling_daily_limits': response_sampling_daily_limits,
            'enable_partial_responses': enable_partial_responses,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def surveys_destroy(self, project_id, id) -> Any:
        """
        Deletes a survey identified by `{id}` within a project specified by `{project_id}` using the HTTP DELETE method.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_activity_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves the activity details for a specific survey within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_stats_retrieve_2(self, project_id, id) -> Any:
        """
        Retrieves aggregated response statistics for a specific survey within a project.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/stats/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_summarize_responses_create(self, project_id, id, name, type, linked_flag, targeting_flag, internal_targeting_flag, created_at, created_by, description=None, schedule=None, linked_flag_id=None, targeting_flag_id=None, targeting_flag_filters=None, remove_targeting_flag=None, questions=None, conditions=None, appearance=None, start_date=None, end_date=None, archived=None, responses_limit=None, iteration_count=None, iteration_frequency_days=None, iteration_start_dates=None, current_iteration=None, current_iteration_start_date=None, response_sampling_start_date=None, response_sampling_interval_type=None, response_sampling_interval=None, response_sampling_limit=None, response_sampling_daily_limits=None, enable_partial_responses=None, _create_in_folder=None) -> Any:
        """
        Generates summarized insights from survey responses for a specified project and survey using AI-powered summarization.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            type (string): * `popover` - popover
        * `widget` - widget
        * `button` - button
        * `email` - email
        * `full_screen` - full screen
        * `api` - api
            linked_flag (string): linked_flag
            targeting_flag (string): targeting_flag
            internal_targeting_flag (string): internal_targeting_flag
            created_at (string): created_at
            created_by (string): created_by
            description (string): description
            schedule (string): schedule
            linked_flag_id (integer): linked_flag_id
            targeting_flag_id (integer): targeting_flag_id
            targeting_flag_filters (string): targeting_flag_filters
            remove_targeting_flag (boolean): remove_targeting_flag
            questions (string): 
                The `array` of questions included in the survey. Each question must conform to one of the defined question types: Basic, Link, Rating, or Multiple Choice.

                Basic (open-ended question)
                - `type`: `open`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `branching`: Branching logic for the question. See branching types below for details.

                Link (a question with a link)
                - `type`: `link`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `link`: The URL associated with the question.
                - `branching`: Branching logic for the question. See branching types below for details.

                Rating (a question with a rating scale)
                - `type`: `rating`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `display`: Display style of the rating (`number` or `emoji`).
                - `scale`: The scale of the rating (`number`).
                - `lowerBoundLabel`: Label for the lower bound of the scale.
                - `upperBoundLabel`: Label for the upper bound of the scale.
                - `branching`: Branching logic for the question. See branching types below for details.

                Multiple choice
                - `type`: `single_choice` or `multiple_choice`
                - `question`: The text of the question.
                - `description`: Optional description of the question.
                - `descriptionContentType`: Content type of the description (`html` or `text`).
                - `optional`: Whether the question is optional (`boolean`).
                - `buttonText`: Text displayed on the submit button.
                - `choices`: An array of choices for the question.
                - `shuffleOptions`: Whether to shuffle the order of the choices (`boolean`).
                - `hasOpenChoice`: Whether the question allows an open-ended response (`boolean`).
                - `branching`: Branching logic for the question. See branching types below for details.

                Branching logic can be one of the following types:

                Next question: Proceeds to the next question
                ```json
                {
                    "type": "next_question"
                }
                ```

                End: Ends the survey, optionally displaying a confirmation message.
                ```json
                {
                    "type": "end"
                }
                ```

                Response-based: Branches based on the response values. Available for the `rating` and `single_choice` question types.
                ```json
                {
                    "type": "response_based",
                    "responseValues": {
                        "responseKey": "value"
                    }
                }
                ```

                Specific question: Proceeds to a specific question by index.
                ```json
                {
                    "type": "specific_question",
                    "index": 2
                }
                ```
        
            conditions (string): conditions
            appearance (string): appearance
            start_date (string): start_date
            end_date (string): end_date
            archived (boolean): archived
            responses_limit (integer): responses_limit
            iteration_count (integer): iteration_count
            iteration_frequency_days (integer): iteration_frequency_days
            iteration_start_dates (array): iteration_start_dates
            current_iteration (integer): current_iteration
            current_iteration_start_date (string): current_iteration_start_date
            response_sampling_start_date (string): response_sampling_start_date
            response_sampling_interval_type (string): response_sampling_interval_type
            response_sampling_interval (integer): response_sampling_interval
            response_sampling_limit (integer): response_sampling_limit
            response_sampling_daily_limits (string): response_sampling_daily_limits
            enable_partial_responses (boolean): enable_partial_responses
            _create_in_folder (string): _create_in_folder

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'description': description,
            'type': type,
            'schedule': schedule,
            'linked_flag': linked_flag,
            'linked_flag_id': linked_flag_id,
            'targeting_flag_id': targeting_flag_id,
            'targeting_flag': targeting_flag,
            'internal_targeting_flag': internal_targeting_flag,
            'targeting_flag_filters': targeting_flag_filters,
            'remove_targeting_flag': remove_targeting_flag,
            'questions': questions,
            'conditions': conditions,
            'appearance': appearance,
            'created_at': created_at,
            'created_by': created_by,
            'start_date': start_date,
            'end_date': end_date,
            'archived': archived,
            'responses_limit': responses_limit,
            'iteration_count': iteration_count,
            'iteration_frequency_days': iteration_frequency_days,
            'iteration_start_dates': iteration_start_dates,
            'current_iteration': current_iteration,
            'current_iteration_start_date': current_iteration_start_date,
            'response_sampling_start_date': response_sampling_start_date,
            'response_sampling_interval_type': response_sampling_interval_type,
            'response_sampling_interval': response_sampling_interval,
            'response_sampling_limit': response_sampling_limit,
            'response_sampling_daily_limits': response_sampling_daily_limits,
            'enable_partial_responses': enable_partial_responses,
            '_create_in_folder': _create_in_folder,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/surveys/{id}/summarize_responses/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_activity_retrieve(self, project_id) -> Any:
        """
        Retrieves activity data for surveys associated with a specific project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/activity/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_responses_count_retrieve(self, project_id) -> Any:
        """
        Retrieves the count of survey responses for a specified project using the project ID.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/responses_count/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def surveys_stats_retrieve(self, project_id) -> Any:
        """
        Retrieves aggregated response statistics across all surveys for a specified project, providing total counts and rates, using the "GET" method.

        Args:
            project_id (string): project_id

        Returns:
            Any: No response body

        Tags:
            surveys
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/surveys/stats/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def web_experiments_list(self, project_id, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of web experiments for a specified project using the Optimizely Web Experimentation API, allowing for pagination via optional limit and offset parameters.

        Args:
            project_id (string): project_id
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            web_experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        url = f"{self.base_url}/api/projects/{project_id}/web_experiments/"
        query_params = {k: v for k, v in [('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def web_experiments_create(self, project_id, id, name, feature_flag_key, created_at=None, variants=None) -> dict[str, Any]:
        """
        Creates a new web experiment within a specified project using the Optimizely Web Experimentation API and returns a successful creation status message.

        Args:
            project_id (string): project_id
            id (integer): id
            name (string): name
            feature_flag_key (string): feature_flag_key
            created_at (string): created_at
            variants (string): variants

        Returns:
            dict[str, Any]: API response data.

        Tags:
            web_experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        request_body = {
            'id': id,
            'name': name,
            'created_at': created_at,
            'feature_flag_key': feature_flag_key,
            'variants': variants,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/web_experiments/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def web_experiments_retrieve(self, project_id, id) -> dict[str, Any]:
        """
        Retrieves details about a specific web experiment defined by its ID within a specified project using the Optimizely Web Experimentation API.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            dict[str, Any]: API response data.

        Tags:
            web_experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/web_experiments/{id}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def web_experiments_update(self, project_id, id, name, feature_flag_key, created_at=None, variants=None) -> dict[str, Any]:
        """
        Updates a web experiment for a specified project using the provided ID and returns a success status upon completion.

        Args:
            project_id (string): project_id
            id (string): id
            name (string): name
            feature_flag_key (string): feature_flag_key
            created_at (string): created_at
            variants (string): variants

        Returns:
            dict[str, Any]: API response data.

        Tags:
            web_experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        request_body = {
            'id': id,
            'name': name,
            'created_at': created_at,
            'feature_flag_key': feature_flag_key,
            'variants': variants,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/projects/{project_id}/web_experiments/{id}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def web_experiments_destroy(self, project_id, id) -> Any:
        """
        Deletes a web experiment associated with a specified project using the project ID and experiment ID.

        Args:
            project_id (string): project_id
            id (string): id

        Returns:
            Any: No response body

        Tags:
            web_experiments
        """
        if project_id is None:
            raise ValueError("Missing required parameter 'project_id'")
        if id is None:
            raise ValueError("Missing required parameter 'id'")
        url = f"{self.base_url}/api/projects/{project_id}/web_experiments/{id}/"
        query_params = {}
        response = self._delete(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_list(self, is_staff=None, limit=None, offset=None) -> dict[str, Any]:
        """
        Retrieves a list of user records from the system, filtered by staff status, with optional pagination using limit and offset parameters.

        Args:
            is_staff (boolean): `is_staff` indicates whether to filter users by staff status (true/false).
            limit (integer): Number of results to return per page.
            offset (integer): The initial index from which to return the results.

        Returns:
            dict[str, Any]: API response data.

        Tags:
            users, users
        """
        url = f"{self.base_url}/api/users/"
        query_params = {k: v for k, v in [('is_staff', is_staff), ('limit', limit), ('offset', offset)] if v is not None}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_retrieve(self, uuid) -> dict[str, Any]:
        """
        Retrieves user data for a specific user identified by the provided UUID using the GET method.

        Args:
            uuid (string): uuid

        Returns:
            dict[str, Any]: API response data.

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        url = f"{self.base_url}/api/users/{uuid}/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_update(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> dict[str, Any]:
        """
        Updates or replaces a user's entire resource at the specified UUID endpoint using the provided data.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            dict[str, Any]: API response data.

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/"
        query_params = {}
        response = self._put(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()


    def users_hedgehog_config_retrieve(self, uuid) -> Any:
        """
        Retrieves the hedgehog configuration for a user identified by the specified UUID.

        Args:
            uuid (string): uuid

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        url = f"{self.base_url}/api/users/{uuid}/hedgehog_config/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()


    def users_scene_personalisation_create(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Sends a request to personalize a scene for a user identified by their UUID, enabling tailored experiences based on user-specific data.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/scene_personalisation/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_start_2fa_setup_retrieve(self, uuid) -> Any:
        """
        Starts the setup process for two-factor authentication (2FA) for a user identified by their UUID.

        Args:
            uuid (string): uuid

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        url = f"{self.base_url}/api/users/{uuid}/start_2fa_setup/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_two_factor_backup_codes_create(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Generates and stores backup codes for two-factor authentication (2FA) associated with the specified user UUID.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/two_factor_backup_codes/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_two_factor_disable_create(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Disables two-factor authentication for a specific user identified by their UUID.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/two_factor_disable/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_two_factor_start_setup_retrieve(self, uuid) -> Any:
        """
        Initiates two-factor authentication setup for a user identified by their UUID, facilitating an additional security layer beyond the primary login credentials.

        Args:
            uuid (string): uuid

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        url = f"{self.base_url}/api/users/{uuid}/two_factor_start_setup/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_two_factor_status_retrieve(self, uuid) -> Any:
        """
        Retrieves the two-factor authentication status for a user identified by the specified UUID using the GET method.

        Args:
            uuid (string): uuid

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        url = f"{self.base_url}/api/users/{uuid}/two_factor_status/"
        query_params = {}
        response = self._get(url, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_two_factor_validate_create(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Validates two-factor authentication for a user identified by the provided UUID using the POST method.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/two_factor_validate/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_validate_2fa_create(self, uuid, date_joined, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Validates two-factor authentication for a user identified by the provided UUID using the API.

        Args:
            uuid (string): uuid
            date_joined (string): date_joined
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        if uuid is None:
            raise ValueError("Missing required parameter 'uuid'")
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/{uuid}/validate_2fa/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_request_email_verification_create(self, date_joined, uuid, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Sends an email verification request to a user using the POST method at the path "/api/users/request_email_verification/".

        Args:
            date_joined (string): date_joined
            uuid (string): uuid
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/request_email_verification/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def users_verify_email_create(self, date_joined, uuid, distinct_id, email, pending_email, is_email_verified, has_password, is_impersonated, is_impersonated_until, sensitive_session_expires_at, team, organization, organizations, password, is_2fa_enabled, has_social_auth, scene_personalisation, first_name=None, last_name=None, notification_settings=None, anonymize_data=None, toolbar_mode=None, is_staff=None, set_current_organization=None, set_current_team=None, current_password=None, events_column_config=None, has_seen_product_intro_for=None, theme_mode=None, hedgehog_config=None, role_at_organization=None) -> Any:
        """
        Verifies an email address for a user using a POST request to the "/api/users/verify_email/" endpoint.

        Args:
            date_joined (string): date_joined
            uuid (string): uuid
            distinct_id (string): distinct_id
            email (string): email
            pending_email (string): pending_email
            is_email_verified (boolean): is_email_verified
            has_password (boolean): has_password
            is_impersonated (boolean): is_impersonated
            is_impersonated_until (string): is_impersonated_until
            sensitive_session_expires_at (string): sensitive_session_expires_at
            team (string): team
            organization (string): organization
            organizations (array): organizations
            password (string): password
            is_2fa_enabled (boolean): is_2fa_enabled
            has_social_auth (boolean): has_social_auth
            scene_personalisation (array): scene_personalisation
            first_name (string): first_name
            last_name (string): last_name
            notification_settings (object): notification_settings
            anonymize_data (boolean): anonymize_data
            toolbar_mode (string): toolbar_mode
            is_staff (boolean): Designates whether the user can log into this admin site.
            set_current_organization (string): set_current_organization
            set_current_team (string): set_current_team
            current_password (string): current_password
            events_column_config (string): events_column_config
            has_seen_product_intro_for (string): has_seen_product_intro_for
            theme_mode (string): theme_mode
            hedgehog_config (string): hedgehog_config
            role_at_organization (string): * `engineering` - Engineering
        * `data` - Data
        * `product` - Product Management
        * `founder` - Founder
        * `leadership` - Leadership
        * `marketing` - Marketing
        * `sales` - Sales / Success
        * `other` - Other

        Returns:
            Any: No response body

        Tags:
            users, users
        """
        request_body = {
            'date_joined': date_joined,
            'uuid': uuid,
            'distinct_id': distinct_id,
            'first_name': first_name,
            'last_name': last_name,
            'email': email,
            'pending_email': pending_email,
            'is_email_verified': is_email_verified,
            'notification_settings': notification_settings,
            'anonymize_data': anonymize_data,
            'toolbar_mode': toolbar_mode,
            'has_password': has_password,
            'is_staff': is_staff,
            'is_impersonated': is_impersonated,
            'is_impersonated_until': is_impersonated_until,
            'sensitive_session_expires_at': sensitive_session_expires_at,
            'team': team,
            'organization': organization,
            'organizations': organizations,
            'set_current_organization': set_current_organization,
            'set_current_team': set_current_team,
            'password': password,
            'current_password': current_password,
            'events_column_config': events_column_config,
            'is_2fa_enabled': is_2fa_enabled,
            'has_social_auth': has_social_auth,
            'has_seen_product_intro_for': has_seen_product_intro_for,
            'scene_personalisation': scene_personalisation,
            'theme_mode': theme_mode,
            'hedgehog_config': hedgehog_config,
            'role_at_organization': role_at_organization,
        }
        request_body = {k: v for k, v in request_body.items() if v is not None}
        url = f"{self.base_url}/api/users/verify_email/"
        query_params = {}
        response = self._post(url, data=request_body, params=query_params)
        response.raise_for_status()
        return response.json()

    def list_tools(self):
        return [
            self.environments_app_metrics_retrieve,
            self.environments_app_metrics_error_details_retrieve,
            self.environments_app_metrics_historical_exports_retrieve,
            self.environments_app_metrics_historical_exports_retrieve_2,
            self.environments_batch_exports_list,
            self.environments_batch_exports_create,
            self.environments_batch_exports_backfills_list,
            self.environments_batch_exports_backfills_create,
            self.environments_batch_exports_backfills_retrieve,
            self.environments_batch_exports_backfills_cancel_create,
            self.environments_batch_exports_runs_list,
            self.environments_batch_exports_runs_retrieve,
            self.environments_batch_exports_runs_cancel_create,
            self.environments_batch_exports_runs_logs_retrieve,
            self.environments_batch_exports_runs_retry_create,
            self.environments_batch_exports_retrieve,
            self.environments_batch_exports_update,
            self.environments_batch_exports_destroy,
            self.environments_batch_exports_backfill_create,
            self.environments_batch_exports_logs_retrieve,
            self.environments_batch_exports_pause_create,
            self.environments_batch_exports_run_test_step_create,
            self.environments_batch_exports_unpause_create,
            self.environments_batch_exports_run_test_step_new_create,
            self.environments_batch_exports_test_retrieve,
            self.environments_dashboards_list,
            self.environments_dashboards_create,
            self.environments_dashboards_collaborators_list,
            self.environments_dashboards_collaborators_create,
            self.environments_dashboards_collaborators_destroy,
            self.environments_dashboards_sharing_list,
            self.environments_dashboards_retrieve,
            self.environments_dashboards_update,
            self.environments_dashboards_destroy,
            self.environments_dashboards_create_from_template_json_create,
            self.environments_error_tracking_assignment_rules_list,
            self.environments_error_tracking_assignment_rules_create,
            self.environments_error_tracking_assignment_rules_retrieve,
            self.environments_error_tracking_assignment_rules_update,
            self.environments_error_tracking_assignment_rules_destroy,
            self.environments_error_tracking_symbol_sets_list,
            self.environments_error_tracking_symbol_sets_retrieve,
            self.environments_error_tracking_symbol_sets_destroy,
            self.environments_events_list,
            self.environments_events_retrieve,
            self.environments_events_values_retrieve,
            self.environments_explicit_members_list,
            self.environments_explicit_members_create,
            self.environments_explicit_members_retrieve,
            self.environments_explicit_members_update,
            self.environments_explicit_members_partial_update,
            self.environments_explicit_members_destroy,
            self.environments_exports_list,
            self.environments_exports_create,
            self.environments_exports_retrieve,
            self.environments_exports_content_retrieve,
            self.environments_groups_list,
            self.environments_groups_activity_retrieve,
            self.environments_groups_delete_property_create,
            self.environments_groups_find_retrieve,
            self.environments_groups_property_definitions_retrieve,
            self.environments_groups_property_values_retrieve,
            self.environments_groups_related_retrieve,
            self.environments_groups_update_property_create,
            self.environments_hog_functions_list,
            self.environments_hog_functions_create,
            self.environments_hog_functions_retrieve,
            self.environments_hog_functions_update,
            self.environments_hog_functions_destroy,
            self.environments_hog_functions_broadcast_create,
            self.environments_hog_functions_invocations_create,
            self.environments_hog_functions_logs_retrieve,
            self.environments_hog_functions_metrics_retrieve,
            self.environments_hog_functions_metrics_totals_retrieve,
            self.environments_hog_functions_icon_retrieve,
            self.environments_hog_functions_icons_retrieve,
            self.environments_hog_functions_rearrange_partial_update,
            self.environments_insights_list,
            self.environments_insights_create,
            self.environments_insights_sharing_list,
            self.environments_insights_retrieve,
            self.environments_insights_update,
            self.environments_insights_destroy,
            self.environments_insights_activity_retrieve_2,
            self.environments_insights_viewed_create,
            self.environments_insights_activity_retrieve,
            self.environments_insights_cancel_create,
            self.environments_insights_funnel_retrieve,
            self.environments_insights_funnel_create,
            self.environments_insights_funnel_correlation_retrieve,
            self.environments_insights_funnel_correlation_create,
            self.environments_insights_my_last_viewed_retrieve,
            self.environments_insights_timing_create,
            self.environments_insights_trend_retrieve,
            self.environments_insights_trend_create,
            self.environments_max_tools_create_and_query_insight_create,
            self.environments_persons_list,
            self.environments_persons_retrieve,
            self.environments_persons_update,
            self.environments_persons_destroy,
            self.environments_persons_activity_retrieve_2,
            self.environments_persons_delete_events_create,
            self.environments_persons_delete_property_create,
            self.environments_persons_properties_timeline_retrieve,
            self.environments_persons_split_create,
            self.environments_persons_update_property_create,
            self.environments_persons_activity_retrieve,
            self.environments_persons_cohorts_retrieve,
            self.environments_persons_funnel_retrieve,
            self.environments_persons_funnel_create,
            self.environments_persons_funnel_correlation_retrieve,
            self.environments_persons_funnel_correlation_create,
            self.environments_persons_lifecycle_retrieve,
            self.environments_persons_reset_person_distinct_id_create,
            self.environments_persons_stickiness_retrieve,
            self.environments_persons_trends_retrieve,
            self.environments_persons_values_retrieve,
            self.environments_plugin_configs_logs_list,
            self.environments_query_create,
            self.environments_query_retrieve,
            self.environments_query_destroy,
            self.environments_query_check_auth_for_async_create,
            self.environments_query_draft_sql_retrieve,
            self.environments_session_recording_playlists_list,
            self.environments_session_recording_playlists_create,
            self.environments_session_recording_playlists_retrieve,
            self.environments_session_recording_playlists_update,
            self.environments_session_recording_playlists_destroy,
            self.environments_session_recording_playlists_recordings_retrieve,
            self.environments_session_recording_playlists_recordings_create,
            self.environments_session_recording_playlists_recordings_destroy,
            self.environments_session_recordings_list,
            self.environments_session_recordings_retrieve,
            self.environments_session_recordings_update,
            self.environments_session_recordings_destroy,
            self.environments_session_recordings_analyze_similar_retrieve,
            self.environments_session_recordings_sharing_list,
            self.environments_session_recordings_ai_regex_create,
            self.environments_sessions_property_definitions_retrieve,
            self.environments_sessions_values_retrieve,
            self.environments_subscriptions_list,
            self.environments_subscriptions_create,
            self.environments_subscriptions_retrieve,
            self.environments_subscriptions_update,
            self.environments_subscriptions_destroy,
            self.environments_web_vitals_retrieve,
            self.list,
            self.create,
            self.retrieve,
            self.update,
            self.destroy,
            self.batch_exports_list,
            self.batch_exports_create,
            self.batch_exports_retrieve,
            self.batch_exports_update,
            self.batch_exports_destroy,
            self.batch_exports_backfill_create,
            self.batch_exports_logs_retrieve,
            self.batch_exports_pause_create,
            self.batch_exports_run_test_step_create,
            self.batch_exports_unpause_create,
            self.batch_exports_run_test_step_new_create,
            self.batch_exports_test_retrieve,
            self.domains_list,
            self.domains_create,
            self.domains_retrieve,
            self.domains_update,
            self.domains_destroy,
            self.domains_verify_create,
            self.invites_list,
            self.invites_create,
            self.invites_destroy,
            self.invites_bulk_create,
            self.members_list,
            self.members_update,
            self.members_partial_update,
            self.members_destroy,
            self.list_2,
            self.create_2,
            self.retrieve_2,
            self.update_2,
            self.destroy_2,
            self.activity_retrieve,
            self.change_organization_create,
            self.is_generating_demo_data_retrieve,
            self.proxy_records_list,
            self.proxy_records_create,
            self.proxy_records_retrieve,
            self.proxy_records_update,
            self.proxy_records_destroy,
            self.roles_list,
            self.roles_create,
            self.roles_retrieve,
            self.roles_update,
            self.roles_destroy,
            self.roles_role_memberships_list,
            self.roles_role_memberships_create,
            self.roles_role_memberships_destroy,
            self.actions_list,
            self.actions_create,
            self.actions_retrieve,
            self.actions_update,
            self.actions_destroy,
            self.activity_log_list,
            self.activity_log_bookmark_activity_notification_create,
            self.activity_log_important_changes_retrieve,
            self.annotations_list,
            self.annotations_create,
            self.annotations_retrieve,
            self.annotations_update,
            self.annotations_destroy,
            self.app_metrics_retrieve,
            self.app_metrics_error_details_retrieve,
            self.app_metrics_historical_exports_retrieve,
            self.app_metrics_historical_exports_retrieve_2,
            self.batch_exports_list_2,
            self.batch_exports_create_2,
            self.batch_exports_backfills_list,
            self.batch_exports_backfills_create,
            self.batch_exports_backfills_retrieve,
            self.batch_exports_backfills_cancel_create,
            self.batch_exports_runs_list,
            self.batch_exports_runs_retrieve,
            self.batch_exports_runs_cancel_create,
            self.batch_exports_runs_logs_retrieve,
            self.batch_exports_runs_retry_create,
            self.batch_exports_retrieve_2,
            self.batch_exports_update_2,
            self.batch_exports_destroy_2,
            self.batch_exports_backfill_create_2,
            self.batch_exports_logs_retrieve_2,
            self.batch_exports_pause_create_2,
            self.batch_exports_run_test_step_create_2,
            self.batch_exports_unpause_create_2,
            self.batch_exports_run_test_step_new_create_2,
            self.batch_exports_test_retrieve_2,
            self.cohorts_list,
            self.cohorts_create,
            self.cohorts_retrieve,
            self.cohorts_update,
            self.cohorts_destroy,
            self.cohorts_activity_retrieve_2,
            self.cohorts_duplicate_as_static_cohort_retrieve,
            self.cohorts_persons_retrieve,
            self.cohorts_activity_retrieve,
            self.dashboard_templates_list,
            self.dashboard_templates_create,
            self.dashboard_templates_retrieve,
            self.dashboard_templates_update,
            self.dashboard_templates_destroy,
            self.dashboard_templates_json_schema_retrieve,
            self.dashboards_list,
            self.dashboards_create,
            self.dashboards_collaborators_list,
            self.dashboards_collaborators_create,
            self.dashboards_collaborators_destroy,
            self.dashboards_sharing_list,
            self.dashboards_retrieve,
            self.dashboards_update,
            self.dashboards_destroy,
            self.dashboards_create_from_template_json_create,
            self.early_access_feature_list,
            self.early_access_feature_create,
            self.early_access_feature_retrieve,
            self.early_access_feature_update,
            self.early_access_feature_destroy,
            self.environments_list,
            self.environments_create,
            self.environments_retrieve,
            self.environments_update,
            self.environments_destroy,
            self.environments_activity_retrieve,
            self.environments_authenticate_wizard_create,
            self.environments_event_ingestion_restrictions_retrieve,
            self.environments_is_generating_demo_data_retrieve,
            self.event_definitions_retrieve,
            self.event_definitions_retrieve_2,
            self.event_definitions_update,
            self.event_definitions_partial_update,
            self.event_definitions_destroy,
            self.events_list,
            self.events_retrieve,
            self.events_values_retrieve,
            self.experiment_holdouts_list,
            self.experiment_holdouts_create,
            self.experiment_holdouts_retrieve,
            self.experiment_holdouts_update,
            self.experiment_holdouts_destroy,
            self.experiment_saved_metrics_list,
            self.experiment_saved_metrics_create,
            self.experiment_saved_metrics_retrieve,
            self.experiment_saved_metrics_update,
            self.experiment_saved_metrics_destroy,
            self.experiments_list,
            self.experiments_create,
            self.experiments_retrieve,
            self.experiments_update,
            self.experiments_destroy,
            self.experiments_create_exposure_cohort_for_experiment_create,
            self.experiments_requires_flag_implementation_retrieve,
            self.explicit_members_list,
            self.explicit_members_create,
            self.explicit_members_retrieve,
            self.explicit_members_update,
            self.explicit_members_partial_update,
            self.explicit_members_destroy,
            self.exports_list,
            self.exports_create,
            self.exports_retrieve,
            self.exports_content_retrieve,
            self.feature_flags_list,
            self.feature_flags_create,
            self.feature_flags_role_access_list,
            self.feature_flags_role_access_create,
            self.feature_flags_role_access_retrieve,
            self.feature_flags_role_access_destroy,
            self.feature_flags_retrieve,
            self.feature_flags_update,
            self.feature_flags_destroy,
            self.feature_flags_activity_retrieve_2,
            self.feature_flags_create_static_cohort_for_flag_create,
            self.feature_flags_dashboard_create,
            self.feature_flags_enrich_usage_dashboard_create,
            self.feature_flags_remote_config_retrieve,
            self.feature_flags_status_retrieve,
            self.feature_flags_activity_retrieve,
            self.feature_flags_evaluation_reasons_retrieve,
            self.feature_flags_local_evaluation_retrieve,
            self.feature_flags_my_flags_retrieve,
            self.feature_flags_user_blast_radius_create,
            self.file_system_list,
            self.file_system_create,
            self.file_system_retrieve,
            self.file_system_update,
            self.file_system_destroy,
            self.file_system_count_create,
            self.file_system_link_create,
            self.file_system_move_create,
            self.file_system_count_by_path_create,
            self.file_system_unfiled_retrieve,
            self.groups_list,
            self.groups_activity_retrieve,
            self.groups_delete_property_create,
            self.groups_find_retrieve,
            self.groups_property_definitions_retrieve,
            self.groups_property_values_retrieve,
            self.groups_related_retrieve,
            self.groups_update_property_create,
            self.groups_types_list,
            self.groups_types_create_detail_dashboard_update,
            self.groups_types_set_default_columns_update,
            self.groups_types_update_metadata_partial_update,
            self.hog_functions_list,
            self.hog_functions_create,
            self.hog_functions_retrieve,
            self.hog_functions_update,
            self.hog_functions_destroy,
            self.hog_functions_broadcast_create,
            self.hog_functions_invocations_create,
            self.hog_functions_logs_retrieve,
            self.hog_functions_metrics_retrieve,
            self.hog_functions_metrics_totals_retrieve,
            self.hog_functions_icon_retrieve,
            self.hog_functions_icons_retrieve,
            self.hog_functions_rearrange_partial_update,
            self.insights_list,
            self.insights_create,
            self.insights_sharing_list,
            self.insights_retrieve,
            self.insights_update,
            self.insights_destroy,
            self.insights_activity_retrieve_2,
            self.insights_viewed_create,
            self.insights_activity_retrieve,
            self.insights_cancel_create,
            self.insights_funnel_retrieve,
            self.insights_funnel_create,
            self.insights_funnel_correlation_retrieve,
            self.insights_funnel_correlation_create,
            self.insights_my_last_viewed_retrieve,
            self.insights_timing_create,
            self.insights_trend_retrieve,
            self.insights_trend_create,
            self.notebooks_list,
            self.notebooks_create,
            self.notebooks_retrieve,
            self.notebooks_update,
            self.notebooks_destroy,
            self.notebooks_activity_retrieve_2,
            self.notebooks_activity_retrieve,
            self.notebooks_recording_comments_retrieve,
            self.persons_list,
            self.persons_retrieve,
            self.persons_update,
            self.persons_destroy,
            self.persons_activity_retrieve_2,
            self.persons_delete_events_create,
            self.persons_delete_property_create,
            self.persons_properties_timeline_retrieve,
            self.persons_split_create,
            self.persons_update_property_create,
            self.persons_activity_retrieve,
            self.persons_cohorts_retrieve,
            self.persons_funnel_retrieve,
            self.persons_funnel_create,
            self.persons_funnel_correlation_retrieve,
            self.persons_funnel_correlation_create,
            self.persons_lifecycle_retrieve,
            self.persons_reset_person_distinct_id_create,
            self.persons_stickiness_retrieve,
            self.persons_trends_retrieve,
            self.persons_values_retrieve,
            self.plugin_configs_logs_list,
            self.property_definitions_list,
            self.property_definitions_retrieve,
            self.property_definitions_update,
            self.property_definitions_destroy,
            self.property_definitions_seen_together_retrieve,
            self.query_create,
            self.query_retrieve,
            self.query_destroy,
            self.query_check_auth_for_async_create,
            self.query_draft_sql_retrieve,
            self.session_recording_playlists_list,
            self.session_recording_playlists_create,
            self.session_recording_playlists_retrieve,
            self.session_recording_playlists_update,
            self.session_recording_playlists_destroy,
            self.session_recording_playlists_recordings_retrieve,
            self.session_recording_playlists_recordings_create,
            self.session_recording_playlists_recordings_destroy,
            self.session_recordings_list,
            self.session_recordings_retrieve,
            self.session_recordings_update,
            self.session_recordings_destroy,
            self.session_recordings_analyze_similar_retrieve,
            self.session_recordings_sharing_list,
            self.session_recordings_ai_regex_create,
            self.sessions_property_definitions_retrieve,
            self.sessions_values_retrieve,
            self.subscriptions_list,
            self.subscriptions_create,
            self.subscriptions_retrieve,
            self.subscriptions_update,
            self.subscriptions_destroy,
            self.surveys_list,
            self.surveys_create,
            self.surveys_retrieve,
            self.surveys_update,
            self.surveys_destroy,
            self.surveys_activity_retrieve_2,
            self.surveys_stats_retrieve_2,
            self.surveys_summarize_responses_create,
            self.surveys_activity_retrieve,
            self.surveys_responses_count_retrieve,
            self.surveys_stats_retrieve,
            self.web_experiments_list,
            self.web_experiments_create,
            self.web_experiments_retrieve,
            self.web_experiments_update,
            self.web_experiments_destroy,
            self.users_list,
            self.users_retrieve,
            self.users_update,
            self.users_hedgehog_config_retrieve,
            self.users_scene_personalisation_create,
            self.users_start_2fa_setup_retrieve,
            self.users_two_factor_backup_codes_create,
            self.users_two_factor_disable_create,
            self.users_two_factor_start_setup_retrieve,
            self.users_two_factor_status_retrieve,
            self.users_two_factor_validate_create,
            self.users_validate_2fa_create,
            self.users_request_email_verification_create,
            self.users_verify_email_create
        ]
